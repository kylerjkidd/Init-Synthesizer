
Init-Synth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000108e4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ec  08010abc  08010abc  00011abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080113a8  080113a8  000131d4  2**0
                  CONTENTS
  4 .ARM          00000008  080113a8  080113a8  000123a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080113b0  080113b0  000131d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080113b0  080113b0  000123b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080113b4  080113b4  000123b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080113b8  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e14  200001d4  0801158c  000131d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fe8  0801158c  00013fe8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000131d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ec98  00000000  00000000  00013204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006a3f  00000000  00000000  00041e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020c0  00000000  00000000  000488e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001900  00000000  00000000  0004a9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c95  00000000  00000000  0004c2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002fb84  00000000  00000000  00072f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbb8c  00000000  00000000  000a2ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0017e645  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008aa0  00000000  00000000  0017e700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001871a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  0018720f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  00187309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001d4 	.word	0x200001d4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08010aa4 	.word	0x08010aa4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001d8 	.word	0x200001d8
 8000214:	08010aa4 	.word	0x08010aa4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2f>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a0c:	bf24      	itt	cs
 8000a0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a16:	d90d      	bls.n	8000a34 <__aeabi_d2f+0x30>
 8000a18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a2c:	bf08      	it	eq
 8000a2e:	f020 0001 	biceq.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a38:	d121      	bne.n	8000a7e <__aeabi_d2f+0x7a>
 8000a3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a3e:	bfbc      	itt	lt
 8000a40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a44:	4770      	bxlt	lr
 8000a46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4e:	f1c2 0218 	rsb	r2, r2, #24
 8000a52:	f1c2 0c20 	rsb	ip, r2, #32
 8000a56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5e:	bf18      	it	ne
 8000a60:	f040 0001 	orrne.w	r0, r0, #1
 8000a64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a70:	ea40 000c 	orr.w	r0, r0, ip
 8000a74:	fa23 f302 	lsr.w	r3, r3, r2
 8000a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a7c:	e7cc      	b.n	8000a18 <__aeabi_d2f+0x14>
 8000a7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a82:	d107      	bne.n	8000a94 <__aeabi_d2f+0x90>
 8000a84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a88:	bf1e      	ittt	ne
 8000a8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a92:	4770      	bxne	lr
 8000a94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_uldivmod>:
 8000aa4:	b953      	cbnz	r3, 8000abc <__aeabi_uldivmod+0x18>
 8000aa6:	b94a      	cbnz	r2, 8000abc <__aeabi_uldivmod+0x18>
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	bf08      	it	eq
 8000aac:	2800      	cmpeq	r0, #0
 8000aae:	bf1c      	itt	ne
 8000ab0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ab4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab8:	f000 b96a 	b.w	8000d90 <__aeabi_idiv0>
 8000abc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac4:	f000 f806 	bl	8000ad4 <__udivmoddi4>
 8000ac8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad0:	b004      	add	sp, #16
 8000ad2:	4770      	bx	lr

08000ad4 <__udivmoddi4>:
 8000ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad8:	9d08      	ldr	r5, [sp, #32]
 8000ada:	460c      	mov	r4, r1
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d14e      	bne.n	8000b7e <__udivmoddi4+0xaa>
 8000ae0:	4694      	mov	ip, r2
 8000ae2:	458c      	cmp	ip, r1
 8000ae4:	4686      	mov	lr, r0
 8000ae6:	fab2 f282 	clz	r2, r2
 8000aea:	d962      	bls.n	8000bb2 <__udivmoddi4+0xde>
 8000aec:	b14a      	cbz	r2, 8000b02 <__udivmoddi4+0x2e>
 8000aee:	f1c2 0320 	rsb	r3, r2, #32
 8000af2:	4091      	lsls	r1, r2
 8000af4:	fa20 f303 	lsr.w	r3, r0, r3
 8000af8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000afc:	4319      	orrs	r1, r3
 8000afe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b06:	fa1f f68c 	uxth.w	r6, ip
 8000b0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b12:	fb07 1114 	mls	r1, r7, r4, r1
 8000b16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b1a:	fb04 f106 	mul.w	r1, r4, r6
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	d90a      	bls.n	8000b38 <__udivmoddi4+0x64>
 8000b22:	eb1c 0303 	adds.w	r3, ip, r3
 8000b26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b2a:	f080 8112 	bcs.w	8000d52 <__udivmoddi4+0x27e>
 8000b2e:	4299      	cmp	r1, r3
 8000b30:	f240 810f 	bls.w	8000d52 <__udivmoddi4+0x27e>
 8000b34:	3c02      	subs	r4, #2
 8000b36:	4463      	add	r3, ip
 8000b38:	1a59      	subs	r1, r3, r1
 8000b3a:	fa1f f38e 	uxth.w	r3, lr
 8000b3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b42:	fb07 1110 	mls	r1, r7, r0, r1
 8000b46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b4a:	fb00 f606 	mul.w	r6, r0, r6
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	d90a      	bls.n	8000b68 <__udivmoddi4+0x94>
 8000b52:	eb1c 0303 	adds.w	r3, ip, r3
 8000b56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b5a:	f080 80fc 	bcs.w	8000d56 <__udivmoddi4+0x282>
 8000b5e:	429e      	cmp	r6, r3
 8000b60:	f240 80f9 	bls.w	8000d56 <__udivmoddi4+0x282>
 8000b64:	4463      	add	r3, ip
 8000b66:	3802      	subs	r0, #2
 8000b68:	1b9b      	subs	r3, r3, r6
 8000b6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b6e:	2100      	movs	r1, #0
 8000b70:	b11d      	cbz	r5, 8000b7a <__udivmoddi4+0xa6>
 8000b72:	40d3      	lsrs	r3, r2
 8000b74:	2200      	movs	r2, #0
 8000b76:	e9c5 3200 	strd	r3, r2, [r5]
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d905      	bls.n	8000b8e <__udivmoddi4+0xba>
 8000b82:	b10d      	cbz	r5, 8000b88 <__udivmoddi4+0xb4>
 8000b84:	e9c5 0100 	strd	r0, r1, [r5]
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	e7f5      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000b8e:	fab3 f183 	clz	r1, r3
 8000b92:	2900      	cmp	r1, #0
 8000b94:	d146      	bne.n	8000c24 <__udivmoddi4+0x150>
 8000b96:	42a3      	cmp	r3, r4
 8000b98:	d302      	bcc.n	8000ba0 <__udivmoddi4+0xcc>
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	f0c0 80f0 	bcc.w	8000d80 <__udivmoddi4+0x2ac>
 8000ba0:	1a86      	subs	r6, r0, r2
 8000ba2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	2d00      	cmp	r5, #0
 8000baa:	d0e6      	beq.n	8000b7a <__udivmoddi4+0xa6>
 8000bac:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb0:	e7e3      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000bb2:	2a00      	cmp	r2, #0
 8000bb4:	f040 8090 	bne.w	8000cd8 <__udivmoddi4+0x204>
 8000bb8:	eba1 040c 	sub.w	r4, r1, ip
 8000bbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc0:	fa1f f78c 	uxth.w	r7, ip
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bce:	fb08 4416 	mls	r4, r8, r6, r4
 8000bd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bd6:	fb07 f006 	mul.w	r0, r7, r6
 8000bda:	4298      	cmp	r0, r3
 8000bdc:	d908      	bls.n	8000bf0 <__udivmoddi4+0x11c>
 8000bde:	eb1c 0303 	adds.w	r3, ip, r3
 8000be2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x11a>
 8000be8:	4298      	cmp	r0, r3
 8000bea:	f200 80cd 	bhi.w	8000d88 <__udivmoddi4+0x2b4>
 8000bee:	4626      	mov	r6, r4
 8000bf0:	1a1c      	subs	r4, r3, r0
 8000bf2:	fa1f f38e 	uxth.w	r3, lr
 8000bf6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c02:	fb00 f707 	mul.w	r7, r0, r7
 8000c06:	429f      	cmp	r7, r3
 8000c08:	d908      	bls.n	8000c1c <__udivmoddi4+0x148>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c12:	d202      	bcs.n	8000c1a <__udivmoddi4+0x146>
 8000c14:	429f      	cmp	r7, r3
 8000c16:	f200 80b0 	bhi.w	8000d7a <__udivmoddi4+0x2a6>
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	1bdb      	subs	r3, r3, r7
 8000c1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c22:	e7a5      	b.n	8000b70 <__udivmoddi4+0x9c>
 8000c24:	f1c1 0620 	rsb	r6, r1, #32
 8000c28:	408b      	lsls	r3, r1
 8000c2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c2e:	431f      	orrs	r7, r3
 8000c30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c34:	fa04 f301 	lsl.w	r3, r4, r1
 8000c38:	ea43 030c 	orr.w	r3, r3, ip
 8000c3c:	40f4      	lsrs	r4, r6
 8000c3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c42:	0c38      	lsrs	r0, r7, #16
 8000c44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c48:	fbb4 fef0 	udiv	lr, r4, r0
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fb00 441e 	mls	r4, r0, lr, r4
 8000c54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c58:	fb0e f90c 	mul.w	r9, lr, ip
 8000c5c:	45a1      	cmp	r9, r4
 8000c5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x1a6>
 8000c64:	193c      	adds	r4, r7, r4
 8000c66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c6a:	f080 8084 	bcs.w	8000d76 <__udivmoddi4+0x2a2>
 8000c6e:	45a1      	cmp	r9, r4
 8000c70:	f240 8081 	bls.w	8000d76 <__udivmoddi4+0x2a2>
 8000c74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	eba4 0409 	sub.w	r4, r4, r9
 8000c7e:	fa1f f983 	uxth.w	r9, r3
 8000c82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c86:	fb00 4413 	mls	r4, r0, r3, r4
 8000c8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	d907      	bls.n	8000ca6 <__udivmoddi4+0x1d2>
 8000c96:	193c      	adds	r4, r7, r4
 8000c98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c9c:	d267      	bcs.n	8000d6e <__udivmoddi4+0x29a>
 8000c9e:	45a4      	cmp	ip, r4
 8000ca0:	d965      	bls.n	8000d6e <__udivmoddi4+0x29a>
 8000ca2:	3b02      	subs	r3, #2
 8000ca4:	443c      	add	r4, r7
 8000ca6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000caa:	fba0 9302 	umull	r9, r3, r0, r2
 8000cae:	eba4 040c 	sub.w	r4, r4, ip
 8000cb2:	429c      	cmp	r4, r3
 8000cb4:	46ce      	mov	lr, r9
 8000cb6:	469c      	mov	ip, r3
 8000cb8:	d351      	bcc.n	8000d5e <__udivmoddi4+0x28a>
 8000cba:	d04e      	beq.n	8000d5a <__udivmoddi4+0x286>
 8000cbc:	b155      	cbz	r5, 8000cd4 <__udivmoddi4+0x200>
 8000cbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000cc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cca:	40cb      	lsrs	r3, r1
 8000ccc:	431e      	orrs	r6, r3
 8000cce:	40cc      	lsrs	r4, r1
 8000cd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	e750      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000cd8:	f1c2 0320 	rsb	r3, r2, #32
 8000cdc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ce8:	4094      	lsls	r4, r2
 8000cea:	430c      	orrs	r4, r1
 8000cec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000d00:	0c23      	lsrs	r3, r4, #16
 8000d02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d06:	fb00 f107 	mul.w	r1, r0, r7
 8000d0a:	4299      	cmp	r1, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x24c>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d16:	d22c      	bcs.n	8000d72 <__udivmoddi4+0x29e>
 8000d18:	4299      	cmp	r1, r3
 8000d1a:	d92a      	bls.n	8000d72 <__udivmoddi4+0x29e>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	4463      	add	r3, ip
 8000d20:	1a5b      	subs	r3, r3, r1
 8000d22:	b2a4      	uxth	r4, r4
 8000d24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d28:	fb08 3311 	mls	r3, r8, r1, r3
 8000d2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d30:	fb01 f307 	mul.w	r3, r1, r7
 8000d34:	42a3      	cmp	r3, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x276>
 8000d38:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d40:	d213      	bcs.n	8000d6a <__udivmoddi4+0x296>
 8000d42:	42a3      	cmp	r3, r4
 8000d44:	d911      	bls.n	8000d6a <__udivmoddi4+0x296>
 8000d46:	3902      	subs	r1, #2
 8000d48:	4464      	add	r4, ip
 8000d4a:	1ae4      	subs	r4, r4, r3
 8000d4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d50:	e739      	b.n	8000bc6 <__udivmoddi4+0xf2>
 8000d52:	4604      	mov	r4, r0
 8000d54:	e6f0      	b.n	8000b38 <__udivmoddi4+0x64>
 8000d56:	4608      	mov	r0, r1
 8000d58:	e706      	b.n	8000b68 <__udivmoddi4+0x94>
 8000d5a:	45c8      	cmp	r8, r9
 8000d5c:	d2ae      	bcs.n	8000cbc <__udivmoddi4+0x1e8>
 8000d5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d66:	3801      	subs	r0, #1
 8000d68:	e7a8      	b.n	8000cbc <__udivmoddi4+0x1e8>
 8000d6a:	4631      	mov	r1, r6
 8000d6c:	e7ed      	b.n	8000d4a <__udivmoddi4+0x276>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	e799      	b.n	8000ca6 <__udivmoddi4+0x1d2>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e7d4      	b.n	8000d20 <__udivmoddi4+0x24c>
 8000d76:	46d6      	mov	lr, sl
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1a6>
 8000d7a:	4463      	add	r3, ip
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	e74d      	b.n	8000c1c <__udivmoddi4+0x148>
 8000d80:	4606      	mov	r6, r0
 8000d82:	4623      	mov	r3, r4
 8000d84:	4608      	mov	r0, r1
 8000d86:	e70f      	b.n	8000ba8 <__udivmoddi4+0xd4>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	e730      	b.n	8000bf0 <__udivmoddi4+0x11c>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_idiv0>:
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop

08000d94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d9a:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000d9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d9e:	4a11      	ldr	r2, [pc, #68]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000da6:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000daa:	f003 0304 	and.w	r3, r3, #4
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000db2:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000db4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000db6:	4a0b      	ldr	r2, [pc, #44]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000dbe:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000dc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	200b      	movs	r0, #11
 8000dd0:	f003 f9ed 	bl	80041ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000dd4:	200b      	movs	r0, #11
 8000dd6:	f003 fa04 	bl	80041e2 <HAL_NVIC_EnableIRQ>

}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000

08000de8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08c      	sub	sp, #48	@ 0x30
 8000dec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfe:	4b71      	ldr	r3, [pc, #452]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	4a70      	ldr	r2, [pc, #448]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e04:	f043 0304 	orr.w	r3, r3, #4
 8000e08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0a:	4b6e      	ldr	r3, [pc, #440]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0e:	f003 0304 	and.w	r3, r3, #4
 8000e12:	61bb      	str	r3, [r7, #24]
 8000e14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e16:	4b6b      	ldr	r3, [pc, #428]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1a:	4a6a      	ldr	r2, [pc, #424]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e1c:	f043 0320 	orr.w	r3, r3, #32
 8000e20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e22:	4b68      	ldr	r3, [pc, #416]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e26:	f003 0320 	and.w	r3, r3, #32
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e2e:	4b65      	ldr	r3, [pc, #404]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e32:	4a64      	ldr	r2, [pc, #400]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e3a:	4b62      	ldr	r3, [pc, #392]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	4b5f      	ldr	r3, [pc, #380]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4a:	4a5e      	ldr	r2, [pc, #376]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e52:	4b5c      	ldr	r3, [pc, #368]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	4b59      	ldr	r3, [pc, #356]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e62:	4a58      	ldr	r2, [pc, #352]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e6a:	4b56      	ldr	r3, [pc, #344]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e76:	4b53      	ldr	r3, [pc, #332]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7a:	4a52      	ldr	r2, [pc, #328]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e7c:	f043 0308 	orr.w	r3, r3, #8
 8000e80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e82:	4b50      	ldr	r3, [pc, #320]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e86:	f003 0308 	and.w	r3, r3, #8
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f242 01b0 	movw	r1, #8368	@ 0x20b0
 8000e94:	484c      	ldr	r0, [pc, #304]	@ (8000fc8 <MX_GPIO_Init+0x1e0>)
 8000e96:	f003 fdbb 	bl	8004a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f44f 61d4 	mov.w	r1, #1696	@ 0x6a0
 8000ea0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea4:	f003 fdb4 	bl	8004a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_5
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f244 21e3 	movw	r1, #17123	@ 0x42e3
 8000eae:	4847      	ldr	r0, [pc, #284]	@ (8000fcc <MX_GPIO_Init+0x1e4>)
 8000eb0:	f003 fdae 	bl	8004a10 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2104      	movs	r1, #4
 8000eb8:	4845      	ldr	r0, [pc, #276]	@ (8000fd0 <MX_GPIO_Init+0x1e8>)
 8000eba:	f003 fda9 	bl	8004a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC4 PC5 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000ebe:	f242 03b0 	movw	r3, #8368	@ 0x20b0
 8000ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	483c      	ldr	r0, [pc, #240]	@ (8000fc8 <MX_GPIO_Init+0x1e0>)
 8000ed8:	f003 fc18 	bl	800470c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8000edc:	f64c 030f 	movw	r3, #51215	@ 0xc80f
 8000ee0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4835      	ldr	r0, [pc, #212]	@ (8000fc8 <MX_GPIO_Init+0x1e0>)
 8000ef2:	f003 fc0b 	bl	800470c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ef6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000efc:	2303      	movs	r3, #3
 8000efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f04:	f107 031c 	add.w	r3, r7, #28
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4832      	ldr	r0, [pc, #200]	@ (8000fd4 <MX_GPIO_Init+0x1ec>)
 8000f0c:	f003 fbfe 	bl	800470c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA6 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f10:	f248 135f 	movw	r3, #33119	@ 0x815f
 8000f14:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f16:	2303      	movs	r3, #3
 8000f18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	4619      	mov	r1, r3
 8000f24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f28:	f003 fbf0 	bl	800470c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
 8000f2c:	f44f 63d4 	mov.w	r3, #1696	@ 0x6a0
 8000f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	4619      	mov	r1, r3
 8000f44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f48:	f003 fbe0 	bl	800470c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB14 PB6
                           PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_6
 8000f4c:	f244 23c3 	movw	r3, #17091	@ 0x42c3
 8000f50:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	4819      	ldr	r0, [pc, #100]	@ (8000fcc <MX_GPIO_Init+0x1e4>)
 8000f66:	f003 fbd1 	bl	800470c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8;
 8000f6a:	f640 5304 	movw	r3, #3332	@ 0xd04
 8000f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f70:	2303      	movs	r3, #3
 8000f72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4813      	ldr	r0, [pc, #76]	@ (8000fcc <MX_GPIO_Init+0x1e4>)
 8000f80:	f003 fbc4 	bl	800470c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f84:	2304      	movs	r3, #4
 8000f86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480d      	ldr	r0, [pc, #52]	@ (8000fd0 <MX_GPIO_Init+0x1e8>)
 8000f9c:	f003 fbb6 	bl	800470c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fa0:	2320      	movs	r3, #32
 8000fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4805      	ldr	r0, [pc, #20]	@ (8000fcc <MX_GPIO_Init+0x1e4>)
 8000fb8:	f003 fba8 	bl	800470c <HAL_GPIO_Init>

}
 8000fbc:	bf00      	nop
 8000fbe:	3730      	adds	r7, #48	@ 0x30
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	48000800 	.word	0x48000800
 8000fcc:	48000400 	.word	0x48000400
 8000fd0:	48000c00 	.word	0x48000c00
 8000fd4:	48001800 	.word	0x48001800

08000fd8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800104c <MX_I2C3_Init+0x74>)
 8000fde:	4a1c      	ldr	r2, [pc, #112]	@ (8001050 <MX_I2C3_Init+0x78>)
 8000fe0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B21E5A;
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800104c <MX_I2C3_Init+0x74>)
 8000fe4:	4a1b      	ldr	r2, [pc, #108]	@ (8001054 <MX_I2C3_Init+0x7c>)
 8000fe6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000fe8:	4b18      	ldr	r3, [pc, #96]	@ (800104c <MX_I2C3_Init+0x74>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fee:	4b17      	ldr	r3, [pc, #92]	@ (800104c <MX_I2C3_Init+0x74>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff4:	4b15      	ldr	r3, [pc, #84]	@ (800104c <MX_I2C3_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000ffa:	4b14      	ldr	r3, [pc, #80]	@ (800104c <MX_I2C3_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001000:	4b12      	ldr	r3, [pc, #72]	@ (800104c <MX_I2C3_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001006:	4b11      	ldr	r3, [pc, #68]	@ (800104c <MX_I2C3_Init+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800100c:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <MX_I2C3_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001012:	480e      	ldr	r0, [pc, #56]	@ (800104c <MX_I2C3_Init+0x74>)
 8001014:	f003 fd2e 	bl	8004a74 <HAL_I2C_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800101e:	f000 f9e2 	bl	80013e6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001022:	2100      	movs	r1, #0
 8001024:	4809      	ldr	r0, [pc, #36]	@ (800104c <MX_I2C3_Init+0x74>)
 8001026:	f004 fab1 	bl	800558c <HAL_I2CEx_ConfigAnalogFilter>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001030:	f000 f9d9 	bl	80013e6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001034:	2100      	movs	r1, #0
 8001036:	4805      	ldr	r0, [pc, #20]	@ (800104c <MX_I2C3_Init+0x74>)
 8001038:	f004 faf3 	bl	8005622 <HAL_I2CEx_ConfigDigitalFilter>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001042:	f000 f9d0 	bl	80013e6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200001f0 	.word	0x200001f0
 8001050:	40007800 	.word	0x40007800
 8001054:	20b21e5a 	.word	0x20b21e5a

08001058 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b09e      	sub	sp, #120	@ 0x78
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2250      	movs	r2, #80	@ 0x50
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f00f f867 	bl	801014c <memset>
  if(i2cHandle->Instance==I2C3)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a1f      	ldr	r2, [pc, #124]	@ (8001100 <HAL_I2C_MspInit+0xa8>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d137      	bne.n	80010f8 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001088:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800108c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800108e:	2300      	movs	r3, #0
 8001090:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4618      	mov	r0, r3
 8001098:	f006 fffa 	bl	8008090 <HAL_RCCEx_PeriphCLKConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80010a2:	f000 f9a0 	bl	80013e6 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a6:	4b17      	ldr	r3, [pc, #92]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	4a16      	ldr	r2, [pc, #88]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b2:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010c2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c4:	2312      	movs	r3, #18
 80010c6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80010d0:	2308      	movs	r3, #8
 80010d2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010d8:	4619      	mov	r1, r3
 80010da:	480b      	ldr	r0, [pc, #44]	@ (8001108 <HAL_I2C_MspInit+0xb0>)
 80010dc:	f003 fb16 	bl	800470c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e4:	4a07      	ldr	r2, [pc, #28]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80010ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ec:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80010f8:	bf00      	nop
 80010fa:	3778      	adds	r7, #120	@ 0x78
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40007800 	.word	0x40007800
 8001104:	40021000 	.word	0x40021000
 8001108:	48000800 	.word	0x48000800

0800110c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001110:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001112:	4a11      	ldr	r2, [pc, #68]	@ (8001158 <MX_I2S2_Init+0x4c>)
 8001114:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001116:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001118:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800111c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800111e:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001124:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800112a:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <MX_I2S2_Init+0x48>)
 800112c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001130:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8001132:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001134:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8001138:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <MX_I2S2_Init+0x48>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001140:	4804      	ldr	r0, [pc, #16]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001142:	f004 fabb 	bl	80056bc <HAL_I2S_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_I2S2_Init+0x44>
  {
    Error_Handler();
 800114c:	f000 f94b 	bl	80013e6 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000244 	.word	0x20000244
 8001158:	40003800 	.word	0x40003800

0800115c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b09e      	sub	sp, #120	@ 0x78
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2250      	movs	r2, #80	@ 0x50
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f00e ffe5 	bl	801014c <memset>
  if(i2sHandle->Instance==SPI2)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a43      	ldr	r2, [pc, #268]	@ (8001294 <HAL_I2S_MspInit+0x138>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d17f      	bne.n	800128c <HAL_I2S_MspInit+0x130>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800118c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001190:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 8001192:	2300      	movs	r3, #0
 8001194:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4618      	mov	r0, r3
 800119c:	f006 ff78 	bl	8008090 <HAL_RCCEx_PeriphCLKConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_I2S_MspInit+0x4e>
    {
      Error_Handler();
 80011a6:	f000 f91e 	bl	80013e6 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ae:	4a3a      	ldr	r2, [pc, #232]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80011b6:	4b38      	ldr	r3, [pc, #224]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	4b35      	ldr	r3, [pc, #212]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	4a34      	ldr	r2, [pc, #208]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ce:	4b32      	ldr	r3, [pc, #200]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	4b2f      	ldr	r3, [pc, #188]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011de:	4a2e      	ldr	r2, [pc, #184]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80011f2:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80011f6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001204:	2305      	movs	r3, #5
 8001206:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001208:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800120c:	4619      	mov	r1, r3
 800120e:	4823      	ldr	r0, [pc, #140]	@ (800129c <HAL_I2S_MspInit+0x140>)
 8001210:	f003 fa7c 	bl	800470c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001214:	2340      	movs	r3, #64	@ 0x40
 8001216:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8001224:	2306      	movs	r3, #6
 8001226:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001228:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800122c:	4619      	mov	r1, r3
 800122e:	481c      	ldr	r0, [pc, #112]	@ (80012a0 <HAL_I2S_MspInit+0x144>)
 8001230:	f003 fa6c 	bl	800470c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8001234:	4b1b      	ldr	r3, [pc, #108]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001236:	4a1c      	ldr	r2, [pc, #112]	@ (80012a8 <HAL_I2S_MspInit+0x14c>)
 8001238:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 800123a:	4b1a      	ldr	r3, [pc, #104]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 800123c:	220d      	movs	r2, #13
 800123e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001240:	4b18      	ldr	r3, [pc, #96]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001242:	2210      	movs	r2, #16
 8001244:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001246:	4b17      	ldr	r3, [pc, #92]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800124c:	4b15      	ldr	r3, [pc, #84]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 800124e:	2280      	movs	r2, #128	@ 0x80
 8001250:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001252:	4b14      	ldr	r3, [pc, #80]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001254:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001258:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800125a:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 800125c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001260:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001262:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001264:	2220      	movs	r2, #32
 8001266:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001268:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 800126a:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800126e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001270:	480c      	ldr	r0, [pc, #48]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001272:	f002 ffd1 	bl	8004218 <HAL_DMA_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <HAL_I2S_MspInit+0x124>
    {
      Error_Handler();
 800127c:	f000 f8b3 	bl	80013e6 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a08      	ldr	r2, [pc, #32]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001284:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001286:	4a07      	ldr	r2, [pc, #28]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800128c:	bf00      	nop
 800128e:	3778      	adds	r7, #120	@ 0x78
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40003800 	.word	0x40003800
 8001298:	40021000 	.word	0x40021000
 800129c:	48000400 	.word	0x48000400
 80012a0:	48000800 	.word	0x48000800
 80012a4:	20000280 	.word	0x20000280
 80012a8:	40020008 	.word	0x40020008

080012ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b2:	f002 fe0f 	bl	8003ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b6:	f000 f84b 	bl	8001350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ba:	f7ff fd95 	bl	8000de8 <MX_GPIO_Init>
  MX_DMA_Init();
 80012be:	f7ff fd69 	bl	8000d94 <MX_DMA_Init>
  MX_I2S2_Init();
 80012c2:	f7ff ff23 	bl	800110c <MX_I2S2_Init>
  MX_I2C3_Init();
 80012c6:	f7ff fe87 	bl	8000fd8 <MX_I2C3_Init>
  MX_SPI3_Init();
 80012ca:	f001 fd4f 	bl	8002d6c <MX_SPI3_Init>
  MX_USB_Device_Init();
 80012ce:	f00e f9c3 	bl	800f658 <MX_USB_Device_Init>
  MX_USART2_UART_Init();
 80012d2:	f002 fb83 	bl	80039dc <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80012d6:	f002 fb23 	bl	8003920 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 80012da:	4818      	ldr	r0, [pc, #96]	@ (800133c <main+0x90>)
 80012dc:	f008 fa04 	bl	80096e8 <HAL_TIM_Base_Start_IT>

  System_Reset_Initialize();
 80012e0:	f002 f942 	bl	8003568 <System_Reset_Initialize>

  Synth_Reset_Initialize();
 80012e4:	f001 feca 	bl	800307c <Synth_Reset_Initialize>

  HAL_UART_Receive_IT(&huart2, sys.temp_buf , 1); // set up interrupt for MIDI/serial input
 80012e8:	2201      	movs	r2, #1
 80012ea:	4915      	ldr	r1, [pc, #84]	@ (8001340 <main+0x94>)
 80012ec:	4815      	ldr	r0, [pc, #84]	@ (8001344 <main+0x98>)
 80012ee:	f008 fe6d 	bl	8009fcc <HAL_UART_Receive_IT>

  uint8_t data[] = "INIT-READY\n";
 80012f2:	4a15      	ldr	r2, [pc, #84]	@ (8001348 <main+0x9c>)
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80012f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, data, 10, 1000);
 80012fc:	1d39      	adds	r1, r7, #4
 80012fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001302:	220a      	movs	r2, #10
 8001304:	480f      	ldr	r0, [pc, #60]	@ (8001344 <main+0x98>)
 8001306:	f008 fdd3 	bl	8009eb0 <HAL_UART_Transmit>
	  //Preset_Write(4);
	  //Preset_Write_test(0);



	  if(sys.midi_data_present == 1){
 800130a:	4b10      	ldr	r3, [pc, #64]	@ (800134c <main+0xa0>)
 800130c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800130e:	2b01      	cmp	r3, #1
 8001310:	d101      	bne.n	8001316 <main+0x6a>
		  MIDI_Decode_Handler();
 8001312:	f000 f86f 	bl	80013f4 <MIDI_Decode_Handler>
	  }

	  if(sys.usb_data_present == 1){
 8001316:	4b0d      	ldr	r3, [pc, #52]	@ (800134c <main+0xa0>)
 8001318:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800131a:	2b01      	cmp	r3, #1
 800131c:	d101      	bne.n	8001322 <main+0x76>
		  Serial_Command_Handler();
 800131e:	f000 fe87 	bl	8002030 <Serial_Command_Handler>
	  }

	  //Gate_Control();

	  if((sys.note_status_bit == 1)){
 8001322:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <main+0xa0>)
 8001324:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001326:	2b01      	cmp	r3, #1
 8001328:	d1ef      	bne.n	800130a <main+0x5e>

		  Waveform_Synthesis_Handler(sys.midi_note_input, sys.midi_note_velocity);
 800132a:	4b08      	ldr	r3, [pc, #32]	@ (800134c <main+0xa0>)
 800132c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800132e:	4a07      	ldr	r2, [pc, #28]	@ (800134c <main+0xa0>)
 8001330:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f000 fa91 	bl	800185c <Waveform_Synthesis_Handler>
	  if(sys.midi_data_present == 1){
 800133a:	e7e6      	b.n	800130a <main+0x5e>
 800133c:	200003fc 	.word	0x200003fc
 8001340:	200003d3 	.word	0x200003d3
 8001344:	20000448 	.word	0x20000448
 8001348:	08010abc 	.word	0x08010abc
 800134c:	20000370 	.word	0x20000370

08001350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b094      	sub	sp, #80	@ 0x50
 8001354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001356:	f107 0318 	add.w	r3, r7, #24
 800135a:	2238      	movs	r2, #56	@ 0x38
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f00e fef4 	bl	801014c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001372:	2000      	movs	r0, #0
 8001374:	f006 f8aa 	bl	80074cc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001378:	2321      	movs	r3, #33	@ 0x21
 800137a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800137c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001380:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001382:	2301      	movs	r3, #1
 8001384:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001386:	2302      	movs	r3, #2
 8001388:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800138a:	2303      	movs	r3, #3
 800138c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800138e:	2302      	movs	r3, #2
 8001390:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 28;
 8001392:	231c      	movs	r3, #28
 8001394:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001396:	2302      	movs	r3, #2
 8001398:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800139a:	2302      	movs	r3, #2
 800139c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800139e:	2302      	movs	r3, #2
 80013a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a2:	f107 0318 	add.w	r3, r7, #24
 80013a6:	4618      	mov	r0, r3
 80013a8:	f006 f944 	bl	8007634 <HAL_RCC_OscConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013b2:	f000 f818 	bl	80013e6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b6:	230f      	movs	r3, #15
 80013b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ba:	2303      	movs	r3, #3
 80013bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	2104      	movs	r1, #4
 80013ce:	4618      	mov	r0, r3
 80013d0:	f006 fc42 	bl	8007c58 <HAL_RCC_ClockConfig>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80013da:	f000 f804 	bl	80013e6 <Error_Handler>
  }
}
 80013de:	bf00      	nop
 80013e0:	3750      	adds	r7, #80	@ 0x50
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ea:	b672      	cpsid	i
}
 80013ec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ee:	bf00      	nop
 80013f0:	e7fd      	b.n	80013ee <Error_Handler+0x8>
	...

080013f4 <MIDI_Decode_Handler>:

#include "midi.h"
#include "serial.h"
#include "system.h"

void MIDI_Decode_Handler(){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0

	int status_byte = sys.midi_buf[0];
 80013fa:	4b30      	ldr	r3, [pc, #192]	@ (80014bc <MIDI_Decode_Handler+0xc8>)
 80013fc:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8001400:	60fb      	str	r3, [r7, #12]
	int data_byte1  = sys.midi_buf[1];
 8001402:	4b2e      	ldr	r3, [pc, #184]	@ (80014bc <MIDI_Decode_Handler+0xc8>)
 8001404:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001408:	60bb      	str	r3, [r7, #8]
	int data_byte2  = sys.midi_buf[2];
 800140a:	4b2c      	ldr	r3, [pc, #176]	@ (80014bc <MIDI_Decode_Handler+0xc8>)
 800140c:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001410:	607b      	str	r3, [r7, #4]

	if(status_byte < 0x80){ // if the status byte is less than 128, it is assumed to be ASCII and a system level command
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2b7f      	cmp	r3, #127	@ 0x7f
 8001416:	dc0a      	bgt.n	800142e <MIDI_Decode_Handler+0x3a>

		Serial_Command_Handler();
 8001418:	f000 fe0a 	bl	8002030 <Serial_Command_Handler>

		sys.temp_buf_index = 0;
 800141c:	4b27      	ldr	r3, [pc, #156]	@ (80014bc <MIDI_Decode_Handler+0xc8>)
 800141e:	2200      	movs	r2, #0
 8001420:	669a      	str	r2, [r3, #104]	@ 0x68
	    memset (sys.midi_buf, '\0', 3); // clear buffer of old data
 8001422:	2203      	movs	r2, #3
 8001424:	2100      	movs	r1, #0
 8001426:	4826      	ldr	r0, [pc, #152]	@ (80014c0 <MIDI_Decode_Handler+0xcc>)
 8001428:	f00e fe90 	bl	801014c <memset>

	    return;
 800142c:	e042      	b.n	80014b4 <MIDI_Decode_Handler+0xc0>
	}

	sys.midi_data_present = 0; // reset interrupt flag
 800142e:	4b23      	ldr	r3, [pc, #140]	@ (80014bc <MIDI_Decode_Handler+0xc8>)
 8001430:	2200      	movs	r2, #0
 8001432:	671a      	str	r2, [r3, #112]	@ 0x70

	status_byte = ( 0xF0 & status_byte); // mask out MIDI channel byte
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800143a:	60fb      	str	r3, [r7, #12]

    if(status_byte == 0x80){
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b80      	cmp	r3, #128	@ 0x80
 8001440:	d112      	bne.n	8001468 <MIDI_Decode_Handler+0x74>
    	sys.note_status_bit    =  0; // note off
 8001442:	4b1e      	ldr	r3, [pc, #120]	@ (80014bc <MIDI_Decode_Handler+0xc8>)
 8001444:	2200      	movs	r2, #0
 8001446:	675a      	str	r2, [r3, #116]	@ 0x74
    	sys.midi_note_input    = data_byte1;
 8001448:	4a1c      	ldr	r2, [pc, #112]	@ (80014bc <MIDI_Decode_Handler+0xc8>)
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	6793      	str	r3, [r2, #120]	@ 0x78
    	sys.midi_note_velocity = data_byte2;
 800144e:	4a1b      	ldr	r2, [pc, #108]	@ (80014bc <MIDI_Decode_Handler+0xc8>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	67d3      	str	r3, [r2, #124]	@ 0x7c

    	sys.gate = 0;
 8001454:	4b19      	ldr	r3, [pc, #100]	@ (80014bc <MIDI_Decode_Handler+0xc8>)
 8001456:	2200      	movs	r2, #0
 8001458:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    	Gate_Control();
 800145c:	f002 f930 	bl	80036c0 <Gate_Control>
    	Command_Blink_Status_LED(0); // report no error
 8001460:	2000      	movs	r0, #0
 8001462:	f002 f9e7 	bl	8003834 <Command_Blink_Status_LED>
 8001466:	e01c      	b.n	80014a2 <MIDI_Decode_Handler+0xae>
    }
    else if(status_byte == 0x90){
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2b90      	cmp	r3, #144	@ 0x90
 800146c:	d112      	bne.n	8001494 <MIDI_Decode_Handler+0xa0>
    	sys.note_status_bit    =  1; // note on
 800146e:	4b13      	ldr	r3, [pc, #76]	@ (80014bc <MIDI_Decode_Handler+0xc8>)
 8001470:	2201      	movs	r2, #1
 8001472:	675a      	str	r2, [r3, #116]	@ 0x74
    	sys.midi_note_input    = data_byte1;
 8001474:	4a11      	ldr	r2, [pc, #68]	@ (80014bc <MIDI_Decode_Handler+0xc8>)
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	6793      	str	r3, [r2, #120]	@ 0x78
    	sys.midi_note_velocity = data_byte2;
 800147a:	4a10      	ldr	r2, [pc, #64]	@ (80014bc <MIDI_Decode_Handler+0xc8>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	67d3      	str	r3, [r2, #124]	@ 0x7c

    	sys.gate = 1;
 8001480:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <MIDI_Decode_Handler+0xc8>)
 8001482:	2201      	movs	r2, #1
 8001484:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    	Gate_Control();
 8001488:	f002 f91a 	bl	80036c0 <Gate_Control>
    	Command_Blink_Status_LED(0);
 800148c:	2000      	movs	r0, #0
 800148e:	f002 f9d1 	bl	8003834 <Command_Blink_Status_LED>
 8001492:	e006      	b.n	80014a2 <MIDI_Decode_Handler+0xae>
    }
    else{
    	sys.note_status_bit = -1; // invalid status command
 8001494:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <MIDI_Decode_Handler+0xc8>)
 8001496:	f04f 32ff 	mov.w	r2, #4294967295
 800149a:	675a      	str	r2, [r3, #116]	@ 0x74
    	Command_Blink_Status_LED(1); // report an error;
 800149c:	2001      	movs	r0, #1
 800149e:	f002 f9c9 	bl	8003834 <Command_Blink_Status_LED>
    }

    sys.temp_buf_index = 0;
 80014a2:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <MIDI_Decode_Handler+0xc8>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	669a      	str	r2, [r3, #104]	@ 0x68
    memset (sys.midi_buf, '\0', 3); // clear buffer of old data
 80014a8:	2203      	movs	r2, #3
 80014aa:	2100      	movs	r1, #0
 80014ac:	4804      	ldr	r0, [pc, #16]	@ (80014c0 <MIDI_Decode_Handler+0xcc>)
 80014ae:	f00e fe4d 	bl	801014c <memset>

    return;
 80014b2:	bf00      	nop
}
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000370 	.word	0x20000370
 80014c0:	200003d0 	.word	0x200003d0

080014c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

	sys.midi_buf[sys.temp_buf_index] = sys.temp_buf[0]; // store the received byte into midi_buf
 80014cc:	4b14      	ldr	r3, [pc, #80]	@ (8001520 <HAL_UART_RxCpltCallback+0x5c>)
 80014ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80014d0:	4a13      	ldr	r2, [pc, #76]	@ (8001520 <HAL_UART_RxCpltCallback+0x5c>)
 80014d2:	f892 1063 	ldrb.w	r1, [r2, #99]	@ 0x63
 80014d6:	4a12      	ldr	r2, [pc, #72]	@ (8001520 <HAL_UART_RxCpltCallback+0x5c>)
 80014d8:	4413      	add	r3, r2
 80014da:	460a      	mov	r2, r1
 80014dc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        // check for reset command input
		if(sys.temp_buf[0] == 'R'){
 80014e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001520 <HAL_UART_RxCpltCallback+0x5c>)
 80014e2:	f893 3063 	ldrb.w	r3, [r3, #99]	@ 0x63
 80014e6:	2b52      	cmp	r3, #82	@ 0x52
 80014e8:	d102      	bne.n	80014f0 <HAL_UART_RxCpltCallback+0x2c>
            sys.midi_data_present = 1; // set flag
 80014ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001520 <HAL_UART_RxCpltCallback+0x5c>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	671a      	str	r2, [r3, #112]	@ 0x70
		}

        // increment the buffer index
        if (++sys.temp_buf_index >= 3)
 80014f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001520 <HAL_UART_RxCpltCallback+0x5c>)
 80014f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80014f4:	3301      	adds	r3, #1
 80014f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001520 <HAL_UART_RxCpltCallback+0x5c>)
 80014f8:	6693      	str	r3, [r2, #104]	@ 0x68
 80014fa:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <HAL_UART_RxCpltCallback+0x5c>)
 80014fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80014fe:	2b02      	cmp	r3, #2
 8001500:	dd05      	ble.n	800150e <HAL_UART_RxCpltCallback+0x4a>
        {
        	sys.temp_buf_index = 0;    // reset index after storing 3 bytes (to start a new group)
 8001502:	4b07      	ldr	r3, [pc, #28]	@ (8001520 <HAL_UART_RxCpltCallback+0x5c>)
 8001504:	2200      	movs	r2, #0
 8001506:	669a      	str	r2, [r3, #104]	@ 0x68
            sys.midi_data_present = 1; // set flag to indicate a complete command has been entered
 8001508:	4b05      	ldr	r3, [pc, #20]	@ (8001520 <HAL_UART_RxCpltCallback+0x5c>)
 800150a:	2201      	movs	r2, #1
 800150c:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        // reset interrupt for next byte
        HAL_UART_Receive_IT(&huart2, sys.temp_buf, 1);
 800150e:	2201      	movs	r2, #1
 8001510:	4904      	ldr	r1, [pc, #16]	@ (8001524 <HAL_UART_RxCpltCallback+0x60>)
 8001512:	4805      	ldr	r0, [pc, #20]	@ (8001528 <HAL_UART_RxCpltCallback+0x64>)
 8001514:	f008 fd5a 	bl	8009fcc <HAL_UART_Receive_IT>

}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000370 	.word	0x20000370
 8001524:	200003d3 	.word	0x200003d3
 8001528:	20000448 	.word	0x20000448

0800152c <Calculate_Frequency>:
#include "synth.h"
#include "midi.h"
#include "system.h"

// Function to calculate the frequency of a given note
float Calculate_Frequency(float note_number) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	ed87 0a01 	vstr	s0, [r7, #4]
    return A4_FREQ * powf(2.0, (note_number - 69.0) / 12.0); // MIDI note number for A4 is 69
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7fe ffd2 	bl	80004e0 <__aeabi_f2d>
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	4b18      	ldr	r3, [pc, #96]	@ (80015a4 <Calculate_Frequency+0x78>)
 8001542:	f7fe fe6d 	bl	8000220 <__aeabi_dsub>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	4b15      	ldr	r3, [pc, #84]	@ (80015a8 <Calculate_Frequency+0x7c>)
 8001554:	f7ff f946 	bl	80007e4 <__aeabi_ddiv>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f7ff fa50 	bl	8000a04 <__aeabi_d2f>
 8001564:	4603      	mov	r3, r0
 8001566:	ee00 3a90 	vmov	s1, r3
 800156a:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800156e:	f00e fe4d 	bl	801020c <powf>
 8001572:	ee10 3a10 	vmov	r3, s0
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe ffb2 	bl	80004e0 <__aeabi_f2d>
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	4b0a      	ldr	r3, [pc, #40]	@ (80015ac <Calculate_Frequency+0x80>)
 8001582:	f7ff f805 	bl	8000590 <__aeabi_dmul>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f7ff fa39 	bl	8000a04 <__aeabi_d2f>
 8001592:	4603      	mov	r3, r0
 8001594:	ee07 3a90 	vmov	s15, r3
}
 8001598:	eeb0 0a67 	vmov.f32	s0, s15
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40514000 	.word	0x40514000
 80015a8:	40280000 	.word	0x40280000
 80015ac:	407b8000 	.word	0x407b8000

080015b0 <Synthesize_Sine_Wave>:
	sample = 32767*arm_sin_f32( (freq * TAU * t) + (fm_intensity*arm_sin_f32(freq*fm_harmonic*TAU*t)) ); // sine wave formula

	return sample;
}

int16_t Synthesize_Sine_Wave(float t, float freq){
 80015b0:	b5b0      	push	{r4, r5, r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80015ba:	edc7 0a00 	vstr	s1, [r7]

	int16_t sample;
	sample = 32767*arm_sin_f32(freq * TAU * t); // sine wave formula
 80015be:	6838      	ldr	r0, [r7, #0]
 80015c0:	f7fe ff8e 	bl	80004e0 <__aeabi_f2d>
 80015c4:	a317      	add	r3, pc, #92	@ (adr r3, 8001624 <Synthesize_Sine_Wave+0x74>)
 80015c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ca:	f7fe ffe1 	bl	8000590 <__aeabi_dmul>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4614      	mov	r4, r2
 80015d4:	461d      	mov	r5, r3
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7fe ff82 	bl	80004e0 <__aeabi_f2d>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4620      	mov	r0, r4
 80015e2:	4629      	mov	r1, r5
 80015e4:	f7fe ffd4 	bl	8000590 <__aeabi_dmul>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	f7ff fa08 	bl	8000a04 <__aeabi_d2f>
 80015f4:	4603      	mov	r3, r0
 80015f6:	ee00 3a10 	vmov	s0, r3
 80015fa:	f00e fd61 	bl	80100c0 <arm_sin_f32>
 80015fe:	eef0 7a40 	vmov.f32	s15, s0
 8001602:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001620 <Synthesize_Sine_Wave+0x70>
 8001606:	ee67 7a87 	vmul.f32	s15, s15, s14
 800160a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800160e:	ee17 3a90 	vmov	r3, s15
 8001612:	81fb      	strh	r3, [r7, #14]
	//sample = 32767*sin(freq * TAU * t); // sine wave formula

	return sample;
 8001614:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bdb0      	pop	{r4, r5, r7, pc}
 8001620:	46fffe00 	.word	0x46fffe00
 8001624:	54442d18 	.word	0x54442d18
 8001628:	401921fb 	.word	0x401921fb
 800162c:	00000000 	.word	0x00000000

08001630 <Synthesize_Pulse_Wave>:

int16_t Synthesize_Pulse_Wave(float t, float freq, float duty_cycle){
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	ed87 0a03 	vstr	s0, [r7, #12]
 800163a:	edc7 0a02 	vstr	s1, [r7, #8]
 800163e:	ed87 1a01 	vstr	s2, [r7, #4]

	int16_t sample;
	float phase = fmodf(t * freq, 1.0); // Phase of the wave
 8001642:	ed97 7a03 	vldr	s14, [r7, #12]
 8001646:	edd7 7a02 	vldr	s15, [r7, #8]
 800164a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800164e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001652:	eeb0 0a67 	vmov.f32	s0, s15
 8001656:	f00e fdb9 	bl	80101cc <fmodf>
 800165a:	ed87 0a05 	vstr	s0, [r7, #20]
	sample = 32767*((phase < duty_cycle) ? 1.0 : -1.0); // Square wave formula with adjustable duty cycle
 800165e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001662:	edd7 7a01 	vldr	s15, [r7, #4]
 8001666:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800166a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166e:	d503      	bpl.n	8001678 <Synthesize_Pulse_Wave+0x48>
 8001670:	f04f 0000 	mov.w	r0, #0
 8001674:	490e      	ldr	r1, [pc, #56]	@ (80016b0 <Synthesize_Pulse_Wave+0x80>)
 8001676:	e002      	b.n	800167e <Synthesize_Pulse_Wave+0x4e>
 8001678:	f04f 0000 	mov.w	r0, #0
 800167c:	490d      	ldr	r1, [pc, #52]	@ (80016b4 <Synthesize_Pulse_Wave+0x84>)
 800167e:	a30a      	add	r3, pc, #40	@ (adr r3, 80016a8 <Synthesize_Pulse_Wave+0x78>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	f7fe ff84 	bl	8000590 <__aeabi_dmul>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4610      	mov	r0, r2
 800168e:	4619      	mov	r1, r3
 8001690:	f7ff f990 	bl	80009b4 <__aeabi_d2iz>
 8001694:	4603      	mov	r3, r0
 8001696:	827b      	strh	r3, [r7, #18]

	return sample;
 8001698:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	f3af 8000 	nop.w
 80016a8:	00000000 	.word	0x00000000
 80016ac:	40dfffc0 	.word	0x40dfffc0
 80016b0:	3ff00000 	.word	0x3ff00000
 80016b4:	bff00000 	.word	0xbff00000

080016b8 <Synthesize_Triangle_Wave>:

int16_t Synthesize_Triangle_Wave(float t, float freq){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	ed87 0a01 	vstr	s0, [r7, #4]
 80016c2:	edc7 0a00 	vstr	s1, [r7]

	int16_t sample;
    float phase = fmodf(t * freq, 1.0); // Phase of the wave
 80016c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80016ca:	edd7 7a00 	vldr	s15, [r7]
 80016ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016d2:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	f00e fd77 	bl	80101cc <fmodf>
 80016de:	ed87 0a02 	vstr	s0, [r7, #8]

		// Triangle wave formula
		if (phase < 0.25)
 80016e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80016e6:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 80016ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f2:	d519      	bpl.n	8001728 <Synthesize_Triangle_Wave+0x70>
			sample = 32767*(phase * 4.0);
 80016f4:	68b8      	ldr	r0, [r7, #8]
 80016f6:	f7fe fef3 	bl	80004e0 <__aeabi_f2d>
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	4b36      	ldr	r3, [pc, #216]	@ (80017d8 <Synthesize_Triangle_Wave+0x120>)
 8001700:	f7fe ff46 	bl	8000590 <__aeabi_dmul>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4610      	mov	r0, r2
 800170a:	4619      	mov	r1, r3
 800170c:	a330      	add	r3, pc, #192	@ (adr r3, 80017d0 <Synthesize_Triangle_Wave+0x118>)
 800170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001712:	f7fe ff3d 	bl	8000590 <__aeabi_dmul>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4610      	mov	r0, r2
 800171c:	4619      	mov	r1, r3
 800171e:	f7ff f949 	bl	80009b4 <__aeabi_d2iz>
 8001722:	4603      	mov	r3, r0
 8001724:	81fb      	strh	r3, [r7, #14]
 8001726:	e04c      	b.n	80017c2 <Synthesize_Triangle_Wave+0x10a>
		else if (phase < 0.75)
 8001728:	edd7 7a02 	vldr	s15, [r7, #8]
 800172c:	eeb6 7a08 	vmov.f32	s14, #104	@ 0x3f400000  0.750
 8001730:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001738:	d521      	bpl.n	800177e <Synthesize_Triangle_Wave+0xc6>
			sample = 32767*(2.0 - (phase * 4.0));
 800173a:	68b8      	ldr	r0, [r7, #8]
 800173c:	f7fe fed0 	bl	80004e0 <__aeabi_f2d>
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	4b24      	ldr	r3, [pc, #144]	@ (80017d8 <Synthesize_Triangle_Wave+0x120>)
 8001746:	f7fe ff23 	bl	8000590 <__aeabi_dmul>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	f04f 0000 	mov.w	r0, #0
 8001752:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001756:	f7fe fd63 	bl	8000220 <__aeabi_dsub>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4610      	mov	r0, r2
 8001760:	4619      	mov	r1, r3
 8001762:	a31b      	add	r3, pc, #108	@ (adr r3, 80017d0 <Synthesize_Triangle_Wave+0x118>)
 8001764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001768:	f7fe ff12 	bl	8000590 <__aeabi_dmul>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4610      	mov	r0, r2
 8001772:	4619      	mov	r1, r3
 8001774:	f7ff f91e 	bl	80009b4 <__aeabi_d2iz>
 8001778:	4603      	mov	r3, r0
 800177a:	81fb      	strh	r3, [r7, #14]
 800177c:	e021      	b.n	80017c2 <Synthesize_Triangle_Wave+0x10a>
		else
			sample = 32767*((phase - 1.0) * 4.0);
 800177e:	68b8      	ldr	r0, [r7, #8]
 8001780:	f7fe feae 	bl	80004e0 <__aeabi_f2d>
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	4b14      	ldr	r3, [pc, #80]	@ (80017dc <Synthesize_Triangle_Wave+0x124>)
 800178a:	f7fe fd49 	bl	8000220 <__aeabi_dsub>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4610      	mov	r0, r2
 8001794:	4619      	mov	r1, r3
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	4b0f      	ldr	r3, [pc, #60]	@ (80017d8 <Synthesize_Triangle_Wave+0x120>)
 800179c:	f7fe fef8 	bl	8000590 <__aeabi_dmul>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	4610      	mov	r0, r2
 80017a6:	4619      	mov	r1, r3
 80017a8:	a309      	add	r3, pc, #36	@ (adr r3, 80017d0 <Synthesize_Triangle_Wave+0x118>)
 80017aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ae:	f7fe feef 	bl	8000590 <__aeabi_dmul>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	f7ff f8fb 	bl	80009b4 <__aeabi_d2iz>
 80017be:	4603      	mov	r3, r0
 80017c0:	81fb      	strh	r3, [r7, #14]

	return sample;
 80017c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	00000000 	.word	0x00000000
 80017d4:	40dfffc0 	.word	0x40dfffc0
 80017d8:	40100000 	.word	0x40100000
 80017dc:	3ff00000 	.word	0x3ff00000

080017e0 <Synthesize_Sawtooth_Wave>:

int16_t Synthesize_Sawtooth_Wave(float t, float freq){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80017ea:	edc7 0a00 	vstr	s1, [r7]

	int16_t sample;
	sample = 32767*fmodf(t * freq, 1.0) * 2.0 - 32767; // Sawtooth wave formula
 80017ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80017f2:	edd7 7a00 	vldr	s15, [r7]
 80017f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017fa:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80017fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001802:	f00e fce3 	bl	80101cc <fmodf>
 8001806:	eef0 7a40 	vmov.f32	s15, s0
 800180a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001858 <Synthesize_Sawtooth_Wave+0x78>
 800180e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001812:	ee17 0a90 	vmov	r0, s15
 8001816:	f7fe fe63 	bl	80004e0 <__aeabi_f2d>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	f7fe fd01 	bl	8000224 <__adddf3>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4610      	mov	r0, r2
 8001828:	4619      	mov	r1, r3
 800182a:	a309      	add	r3, pc, #36	@ (adr r3, 8001850 <Synthesize_Sawtooth_Wave+0x70>)
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	f7fe fcf6 	bl	8000220 <__aeabi_dsub>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4610      	mov	r0, r2
 800183a:	4619      	mov	r1, r3
 800183c:	f7ff f8ba 	bl	80009b4 <__aeabi_d2iz>
 8001840:	4603      	mov	r3, r0
 8001842:	81fb      	strh	r3, [r7, #14]

	return sample;
 8001844:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	00000000 	.word	0x00000000
 8001854:	40dfffc0 	.word	0x40dfffc0
 8001858:	46fffe00 	.word	0x46fffe00

0800185c <Waveform_Synthesis_Handler>:

int Waveform_Synthesis_Handler(int midi_note, int velocity){
 800185c:	b5b0      	push	{r4, r5, r7, lr}
 800185e:	f5ad 4dfa 	sub.w	sp, sp, #32000	@ 0x7d00
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
 8001866:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800186a:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 800186e:	6018      	str	r0, [r3, #0]
 8001870:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001874:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8001878:	6019      	str	r1, [r3, #0]

    HAL_StatusTypeDef res;
    int16_t signal[sample_rate];
    int nsamples = sample_rate;
 800187a:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 800187e:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001882:	f102 0218 	add.w	r2, r2, #24
 8001886:	6013      	str	r3, [r2, #0]

    float freq1 = Calculate_Frequency(midi_note + (SynthParameters.note_offset1 - 12));
 8001888:	4bce      	ldr	r3, [pc, #824]	@ (8001bc4 <Waveform_Synthesis_Handler+0x368>)
 800188a:	7a9b      	ldrb	r3, [r3, #10]
 800188c:	f1a3 020c 	sub.w	r2, r3, #12
 8001890:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001894:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4413      	add	r3, r2
 800189c:	ee07 3a90 	vmov	s15, r3
 80018a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a4:	eeb0 0a67 	vmov.f32	s0, s15
 80018a8:	f7ff fe40 	bl	800152c <Calculate_Frequency>
 80018ac:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80018b0:	f103 0314 	add.w	r3, r3, #20
 80018b4:	ed83 0a00 	vstr	s0, [r3]
    float freq2 = Calculate_Frequency(midi_note + (SynthParameters.note_offset2 - 12));
 80018b8:	4bc2      	ldr	r3, [pc, #776]	@ (8001bc4 <Waveform_Synthesis_Handler+0x368>)
 80018ba:	7adb      	ldrb	r3, [r3, #11]
 80018bc:	f1a3 020c 	sub.w	r2, r3, #12
 80018c0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80018c4:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	ee07 3a90 	vmov	s15, r3
 80018d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018d4:	eeb0 0a67 	vmov.f32	s0, s15
 80018d8:	f7ff fe28 	bl	800152c <Calculate_Frequency>
 80018dc:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80018e0:	f103 0310 	add.w	r3, r3, #16
 80018e4:	ed83 0a00 	vstr	s0, [r3]

    // even indices (signal[i]) represent the left channel of the DAC (Oscillator 1)
    // odd indices  (signal[i+1]) represent the right channel of the DAC (Oscillator 2)
    // this allows the production of two distinctly programmable waveforms with one audio DAC

    int i = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 80018ee:	f102 021c 	add.w	r2, r2, #28
 80018f2:	6013      	str	r3, [r2, #0]
    while(i < nsamples) {
 80018f4:	e158      	b.n	8001ba8 <Waveform_Synthesis_Handler+0x34c>
        float t = ((float)i/2.0)/((float)nsamples);
 80018f6:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80018fa:	f103 031c 	add.w	r3, r3, #28
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001908:	ee17 0a90 	vmov	r0, s15
 800190c:	f7fe fde8 	bl	80004e0 <__aeabi_f2d>
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001918:	f7fe ff64 	bl	80007e4 <__aeabi_ddiv>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4614      	mov	r4, r2
 8001922:	461d      	mov	r5, r3
 8001924:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001928:	f103 0318 	add.w	r3, r3, #24
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	ee07 3a90 	vmov	s15, r3
 8001932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001936:	ee17 0a90 	vmov	r0, s15
 800193a:	f7fe fdd1 	bl	80004e0 <__aeabi_f2d>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4620      	mov	r0, r4
 8001944:	4629      	mov	r1, r5
 8001946:	f7fe ff4d 	bl	80007e4 <__aeabi_ddiv>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4610      	mov	r0, r2
 8001950:	4619      	mov	r1, r3
 8001952:	f7ff f857 	bl	8000a04 <__aeabi_d2f>
 8001956:	4603      	mov	r3, r0
 8001958:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 800195c:	f102 0208 	add.w	r2, r2, #8
 8001960:	6013      	str	r3, [r2, #0]

        // oscillator 1 handler
        if(SynthParameters.oscillator1 == 1){
 8001962:	4b98      	ldr	r3, [pc, #608]	@ (8001bc4 <Waveform_Synthesis_Handler+0x368>)
 8001964:	7a1b      	ldrb	r3, [r3, #8]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d11b      	bne.n	80019a2 <Waveform_Synthesis_Handler+0x146>
        	signal[i] = Synthesize_Sine_Wave(t, freq1);
 800196a:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 800196e:	f103 0314 	add.w	r3, r3, #20
 8001972:	edd3 0a00 	vldr	s1, [r3]
 8001976:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 800197a:	f103 0308 	add.w	r3, r3, #8
 800197e:	ed93 0a00 	vldr	s0, [r3]
 8001982:	f7ff fe15 	bl	80015b0 <Synthesize_Sine_Wave>
 8001986:	4603      	mov	r3, r0
 8001988:	4619      	mov	r1, r3
 800198a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800198e:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001992:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001996:	f102 021c 	add.w	r2, r2, #28
 800199a:	6812      	ldr	r2, [r2, #0]
 800199c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80019a0:	e069      	b.n	8001a76 <Waveform_Synthesis_Handler+0x21a>
        	//signal[i] = Synthesize_Sine_Wave_FM(t, freq1, fm_intensity1, fm_harmonic1);
        }
        else if(SynthParameters.oscillator1 == 2){
 80019a2:	4b88      	ldr	r3, [pc, #544]	@ (8001bc4 <Waveform_Synthesis_Handler+0x368>)
 80019a4:	7a1b      	ldrb	r3, [r3, #8]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d123      	bne.n	80019f2 <Waveform_Synthesis_Handler+0x196>
        	signal[i] = Synthesize_Pulse_Wave(t, freq1, SynthParameters.duty_cycle1);
 80019aa:	4b86      	ldr	r3, [pc, #536]	@ (8001bc4 <Waveform_Synthesis_Handler+0x368>)
 80019ac:	7c9b      	ldrb	r3, [r3, #18]
 80019ae:	ee07 3a90 	vmov	s15, r3
 80019b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019b6:	eeb0 1a67 	vmov.f32	s2, s15
 80019ba:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80019be:	f103 0314 	add.w	r3, r3, #20
 80019c2:	edd3 0a00 	vldr	s1, [r3]
 80019c6:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80019ca:	f103 0308 	add.w	r3, r3, #8
 80019ce:	ed93 0a00 	vldr	s0, [r3]
 80019d2:	f7ff fe2d 	bl	8001630 <Synthesize_Pulse_Wave>
 80019d6:	4603      	mov	r3, r0
 80019d8:	4619      	mov	r1, r3
 80019da:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80019de:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 80019e2:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 80019e6:	f102 021c 	add.w	r2, r2, #28
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80019f0:	e041      	b.n	8001a76 <Waveform_Synthesis_Handler+0x21a>
        }
        else if(SynthParameters.oscillator1 == 3){
 80019f2:	4b74      	ldr	r3, [pc, #464]	@ (8001bc4 <Waveform_Synthesis_Handler+0x368>)
 80019f4:	7a1b      	ldrb	r3, [r3, #8]
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d11b      	bne.n	8001a32 <Waveform_Synthesis_Handler+0x1d6>
        	signal[i] = Synthesize_Triangle_Wave(t, freq1);
 80019fa:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80019fe:	f103 0314 	add.w	r3, r3, #20
 8001a02:	edd3 0a00 	vldr	s1, [r3]
 8001a06:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a0a:	f103 0308 	add.w	r3, r3, #8
 8001a0e:	ed93 0a00 	vldr	s0, [r3]
 8001a12:	f7ff fe51 	bl	80016b8 <Synthesize_Triangle_Wave>
 8001a16:	4603      	mov	r3, r0
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001a1e:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001a22:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001a26:	f102 021c 	add.w	r2, r2, #28
 8001a2a:	6812      	ldr	r2, [r2, #0]
 8001a2c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001a30:	e021      	b.n	8001a76 <Waveform_Synthesis_Handler+0x21a>
        }
        else if(SynthParameters.oscillator1 == 4){
 8001a32:	4b64      	ldr	r3, [pc, #400]	@ (8001bc4 <Waveform_Synthesis_Handler+0x368>)
 8001a34:	7a1b      	ldrb	r3, [r3, #8]
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	d11b      	bne.n	8001a72 <Waveform_Synthesis_Handler+0x216>
        	signal[i] = Synthesize_Sawtooth_Wave(t, freq1);
 8001a3a:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a3e:	f103 0314 	add.w	r3, r3, #20
 8001a42:	edd3 0a00 	vldr	s1, [r3]
 8001a46:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a4a:	f103 0308 	add.w	r3, r3, #8
 8001a4e:	ed93 0a00 	vldr	s0, [r3]
 8001a52:	f7ff fec5 	bl	80017e0 <Synthesize_Sawtooth_Wave>
 8001a56:	4603      	mov	r3, r0
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001a5e:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001a62:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001a66:	f102 021c 	add.w	r2, r2, #28
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001a70:	e001      	b.n	8001a76 <Waveform_Synthesis_Handler+0x21a>
        	//signal[i] = Synthesize_Sawtooth_Wave(t, 440);

        }
        else return 1;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e0d6      	b.n	8001c24 <Waveform_Synthesis_Handler+0x3c8>

        //signal[i] = signal[i]*(velocity/127); // adjust intensity per velocity

        // oscillator 2 handler
        if(SynthParameters.oscillator2 == 1){
 8001a76:	4b53      	ldr	r3, [pc, #332]	@ (8001bc4 <Waveform_Synthesis_Handler+0x368>)
 8001a78:	7a5b      	ldrb	r3, [r3, #9]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d11c      	bne.n	8001ab8 <Waveform_Synthesis_Handler+0x25c>
        	signal[i+1] = Synthesize_Sine_Wave(t, freq2);
 8001a7e:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a82:	f103 031c 	add.w	r3, r3, #28
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	1c5c      	adds	r4, r3, #1
 8001a8a:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a8e:	f103 0310 	add.w	r3, r3, #16
 8001a92:	edd3 0a00 	vldr	s1, [r3]
 8001a96:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a9a:	f103 0308 	add.w	r3, r3, #8
 8001a9e:	ed93 0a00 	vldr	s0, [r3]
 8001aa2:	f7ff fd85 	bl	80015b0 <Synthesize_Sine_Wave>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001aae:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001ab2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001ab6:	e06c      	b.n	8001b92 <Waveform_Synthesis_Handler+0x336>
        	//signal[i+1] = Synthesize_Sine_Wave_FM(t, freq2, fm_intensity2, fm_harmonic2);
        }
        else if(SynthParameters.oscillator2 == 2){
 8001ab8:	4b42      	ldr	r3, [pc, #264]	@ (8001bc4 <Waveform_Synthesis_Handler+0x368>)
 8001aba:	7a5b      	ldrb	r3, [r3, #9]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d124      	bne.n	8001b0a <Waveform_Synthesis_Handler+0x2ae>
        	signal[i+1] = Synthesize_Pulse_Wave(t, freq2, SynthParameters.duty_cycle2);
 8001ac0:	4b40      	ldr	r3, [pc, #256]	@ (8001bc4 <Waveform_Synthesis_Handler+0x368>)
 8001ac2:	7cdb      	ldrb	r3, [r3, #19]
 8001ac4:	ee07 3a90 	vmov	s15, r3
 8001ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001acc:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001ad0:	f103 031c 	add.w	r3, r3, #28
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	1c5c      	adds	r4, r3, #1
 8001ad8:	eeb0 1a67 	vmov.f32	s2, s15
 8001adc:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001ae0:	f103 0310 	add.w	r3, r3, #16
 8001ae4:	edd3 0a00 	vldr	s1, [r3]
 8001ae8:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001aec:	f103 0308 	add.w	r3, r3, #8
 8001af0:	ed93 0a00 	vldr	s0, [r3]
 8001af4:	f7ff fd9c 	bl	8001630 <Synthesize_Pulse_Wave>
 8001af8:	4603      	mov	r3, r0
 8001afa:	461a      	mov	r2, r3
 8001afc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001b00:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001b04:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001b08:	e043      	b.n	8001b92 <Waveform_Synthesis_Handler+0x336>
        }
        else if(SynthParameters.oscillator2 == 3){
 8001b0a:	4b2e      	ldr	r3, [pc, #184]	@ (8001bc4 <Waveform_Synthesis_Handler+0x368>)
 8001b0c:	7a5b      	ldrb	r3, [r3, #9]
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d11c      	bne.n	8001b4c <Waveform_Synthesis_Handler+0x2f0>
        	signal[i+1] = Synthesize_Triangle_Wave(t, freq2);
 8001b12:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b16:	f103 031c 	add.w	r3, r3, #28
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	1c5c      	adds	r4, r3, #1
 8001b1e:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b22:	f103 0310 	add.w	r3, r3, #16
 8001b26:	edd3 0a00 	vldr	s1, [r3]
 8001b2a:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b2e:	f103 0308 	add.w	r3, r3, #8
 8001b32:	ed93 0a00 	vldr	s0, [r3]
 8001b36:	f7ff fdbf 	bl	80016b8 <Synthesize_Triangle_Wave>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001b42:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001b46:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001b4a:	e022      	b.n	8001b92 <Waveform_Synthesis_Handler+0x336>
        }
        else if(SynthParameters.oscillator2 == 4){
 8001b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc4 <Waveform_Synthesis_Handler+0x368>)
 8001b4e:	7a5b      	ldrb	r3, [r3, #9]
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d11c      	bne.n	8001b8e <Waveform_Synthesis_Handler+0x332>
        	signal[i+1] = Synthesize_Sawtooth_Wave(t, freq2);
 8001b54:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b58:	f103 031c 	add.w	r3, r3, #28
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	1c5c      	adds	r4, r3, #1
 8001b60:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b64:	f103 0310 	add.w	r3, r3, #16
 8001b68:	edd3 0a00 	vldr	s1, [r3]
 8001b6c:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b70:	f103 0308 	add.w	r3, r3, #8
 8001b74:	ed93 0a00 	vldr	s0, [r3]
 8001b78:	f7ff fe32 	bl	80017e0 <Synthesize_Sawtooth_Wave>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	461a      	mov	r2, r3
 8001b80:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001b84:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001b88:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001b8c:	e001      	b.n	8001b92 <Waveform_Synthesis_Handler+0x336>
        	//signal[i+1] = Synthesize_Sawtooth_Wave(t, 440);
        }
        else return 1;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e048      	b.n	8001c24 <Waveform_Synthesis_Handler+0x3c8>

        //signal[i+1] = signal[i+1]*(velocity/127); // adjust intensity per velocity

        i += 2;
 8001b92:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b96:	f103 031c 	add.w	r3, r3, #28
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001ba2:	f102 021c 	add.w	r2, r2, #28
 8001ba6:	6013      	str	r3, [r2, #0]
    while(i < nsamples) {
 8001ba8:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001bac:	f103 031c 	add.w	r3, r3, #28
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001bb6:	f103 0318 	add.w	r3, r3, #24
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	f6ff ae9a 	blt.w	80018f6 <Waveform_Synthesis_Handler+0x9a>
    }

    while(sys.note_status_bit == 1 ) {
 8001bc2:	e02a      	b.n	8001c1a <Waveform_Synthesis_Handler+0x3be>
 8001bc4:	20000344 	.word	0x20000344
    	//while(1) {
    	res = HAL_I2S_Transmit(&hi2s2, (uint16_t*)signal, nsamples, 1000);
 8001bc8:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001bcc:	f103 0318 	add.w	r3, r3, #24
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	f107 0120 	add.w	r1, r7, #32
 8001bd8:	3918      	subs	r1, #24
 8001bda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bde:	4814      	ldr	r0, [pc, #80]	@ (8001c30 <Waveform_Synthesis_Handler+0x3d4>)
 8001be0:	f003 fe4c 	bl	800587c <HAL_I2S_Transmit>
 8001be4:	4603      	mov	r3, r0
 8001be6:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001bea:	f102 020f 	add.w	r2, r2, #15
 8001bee:	7013      	strb	r3, [r2, #0]
        if(res != HAL_OK) {
 8001bf0:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001bf4:	f103 030f 	add.w	r3, r3, #15
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d007      	beq.n	8001c0e <Waveform_Synthesis_Handler+0x3b2>
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c08:	f002 ff02 	bl	8004a10 <HAL_GPIO_WritePin>

            //UART_Printf("I2S - ERROR, res = %d!\r\n", res);
            break;
 8001c0c:	e009      	b.n	8001c22 <Waveform_Synthesis_Handler+0x3c6>
        }

        if((sys.midi_data_present == 1)){
 8001c0e:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <Waveform_Synthesis_Handler+0x3d8>)
 8001c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d101      	bne.n	8001c1a <Waveform_Synthesis_Handler+0x3be>
        	MIDI_Decode_Handler();
 8001c16:	f7ff fbed 	bl	80013f4 <MIDI_Decode_Handler>
    while(sys.note_status_bit == 1 ) {
 8001c1a:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <Waveform_Synthesis_Handler+0x3d8>)
 8001c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d0d2      	beq.n	8001bc8 <Waveform_Synthesis_Handler+0x36c>
        }
    }

    return 0;
 8001c22:	2300      	movs	r3, #0

}
 8001c24:	4618      	mov	r0, r3
 8001c26:	f507 47fa 	add.w	r7, r7, #32000	@ 0x7d00
 8001c2a:	3720      	adds	r7, #32
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c30:	20000244 	.word	0x20000244
 8001c34:	20000370 	.word	0x20000370

08001c38 <Synth_Settings_Readback>:
#include "eeprom.h"
#include "preset.h"
#include "system.h"
#include "synth.h"

int Synth_Settings_Readback(){
 8001c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c3a:	b08f      	sub	sp, #60	@ 0x3c
 8001c3c:	af00      	add	r7, sp, #0

	int error_check = 1;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	637b      	str	r3, [r7, #52]	@ 0x34

	uint8_t return_data[48];

	// copy synth parameters into buffer
    memcpy(return_data, &SynthParameters, sizeof(Synth));
 8001c42:	4b20      	ldr	r3, [pc, #128]	@ (8001cc4 <Synth_Settings_Readback+0x8c>)
 8001c44:	461c      	mov	r4, r3
 8001c46:	1d3e      	adds	r6, r7, #4
 8001c48:	f104 0c20 	add.w	ip, r4, #32
 8001c4c:	4635      	mov	r5, r6
 8001c4e:	4623      	mov	r3, r4
 8001c50:	6818      	ldr	r0, [r3, #0]
 8001c52:	6859      	ldr	r1, [r3, #4]
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c5a:	3410      	adds	r4, #16
 8001c5c:	3610      	adds	r6, #16
 8001c5e:	4564      	cmp	r4, ip
 8001c60:	d1f4      	bne.n	8001c4c <Synth_Settings_Readback+0x14>
 8001c62:	4633      	mov	r3, r6
 8001c64:	4622      	mov	r2, r4
 8001c66:	6810      	ldr	r0, [r2, #0]
 8001c68:	6851      	ldr	r1, [r2, #4]
 8001c6a:	6892      	ldr	r2, [r2, #8]
 8001c6c:	c307      	stmia	r3!, {r0, r1, r2}

    // copy remaining system settings
    return_data[44] = sys.serial_cmd_echo;
 8001c6e:	4b16      	ldr	r3, [pc, #88]	@ (8001cc8 <Synth_Settings_Readback+0x90>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    return_data[45] = sys.midi_tx_pol;
 8001c78:	4b13      	ldr	r3, [pc, #76]	@ (8001cc8 <Synth_Settings_Readback+0x90>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    return_data[46] = sys.midi_tx_en;
 8001c82:	4b11      	ldr	r3, [pc, #68]	@ (8001cc8 <Synth_Settings_Readback+0x90>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

    return_data[47] = 0xAA;
 8001c8c:	23aa      	movs	r3, #170	@ 0xaa
 8001c8e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    error_check = CDC_Transmit_FS(return_data, 48); // transmit current preset values
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	2130      	movs	r1, #48	@ 0x30
 8001c96:	4618      	mov	r0, r3
 8001c98:	f00d fdc6 	bl	800f828 <CDC_Transmit_FS>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	637b      	str	r3, [r7, #52]	@ 0x34

    if (sys.midi_tx_en == 1) { // send return message if enabled
 8001ca0:	4b09      	ldr	r3, [pc, #36]	@ (8001cc8 <Synth_Settings_Readback+0x90>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d108      	bne.n	8001cba <Synth_Settings_Readback+0x82>
        error_check = HAL_UART_Transmit(&huart2, return_data, 48, 1000);
 8001ca8:	1d39      	adds	r1, r7, #4
 8001caa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cae:	2230      	movs	r2, #48	@ 0x30
 8001cb0:	4806      	ldr	r0, [pc, #24]	@ (8001ccc <Synth_Settings_Readback+0x94>)
 8001cb2:	f008 f8fd 	bl	8009eb0 <HAL_UART_Transmit>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    return error_check;
 8001cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	373c      	adds	r7, #60	@ 0x3c
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cc4:	20000344 	.word	0x20000344
 8001cc8:	20000370 	.word	0x20000370
 8001ccc:	20000448 	.word	0x20000448

08001cd0 <Preset_Init>:

int Preset_Init(int preset_slot){
 8001cd0:	b5b0      	push	{r4, r5, r7, lr}
 8001cd2:	b094      	sub	sp, #80	@ 0x50
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

	int error_check = 1;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint8_t page_buf[8];
    uint8_t checksum;

	// default parameter array
	uint8_t init_preset[48] = {
 8001cdc:	4b27      	ldr	r3, [pc, #156]	@ (8001d7c <Preset_Init+0xac>)
 8001cde:	f107 040c 	add.w	r4, r7, #12
 8001ce2:	461d      	mov	r5, r3
 8001ce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001cf0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    MIDI_TX_EN_DEFAULT,
		0
	};


    checksum = XOR_Checksum(init_preset, 48);
 8001cf4:	f107 030c 	add.w	r3, r7, #12
 8001cf8:	2130      	movs	r1, #48	@ 0x30
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 f962 	bl	8001fc4 <XOR_Checksum>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    init_preset[47] = checksum;
 8001d06:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001d0a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

	for(int page = 0; page < 6; page++){
 8001d0e:	2300      	movs	r3, #0
 8001d10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d12:	e020      	b.n	8001d56 <Preset_Init+0x86>

		memcpy(page_buf, &init_preset[8 * page], 8); // copy one page of data from buffer
 8001d14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	f107 020c 	add.w	r2, r7, #12
 8001d1c:	441a      	add	r2, r3
 8001d1e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001d22:	6810      	ldr	r0, [r2, #0]
 8001d24:	6851      	ldr	r1, [r2, #4]
 8001d26:	c303      	stmia	r3!, {r0, r1}
		error_check = EEPROM_Write_Page(PAGE_OFFSET + (preset_slot * 6) + page, page_buf);
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4413      	add	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	1c9a      	adds	r2, r3, #2
 8001d34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d36:	4413      	add	r3, r2
 8001d38:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001d3c:	4611      	mov	r1, r2
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f001 ff9e 	bl	8003c80 <EEPROM_Write_Page>
 8001d44:	64f8      	str	r0, [r7, #76]	@ 0x4c

		if(error_check != 0){
 8001d46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <Preset_Init+0x80>
			return 1;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e011      	b.n	8001d74 <Preset_Init+0xa4>
	for(int page = 0; page < 6; page++){
 8001d50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d52:	3301      	adds	r3, #1
 8001d54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d58:	2b05      	cmp	r3, #5
 8001d5a:	dddb      	ble.n	8001d14 <Preset_Init+0x44>
		}

	}

	// read checksum for EEPROM slot used and verify output
	if(checksum == Readback_Checksum(preset_slot)){
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f001 ff6d 	bl	8003c3c <Readback_Checksum>
 8001d62:	4603      	mov	r3, r0
 8001d64:	461a      	mov	r2, r3
 8001d66:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d101      	bne.n	8001d72 <Preset_Init+0xa2>
		error_check = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	64fb      	str	r3, [r7, #76]	@ 0x4c
	}

    return error_check;
 8001d72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3750      	adds	r7, #80	@ 0x50
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d7c:	08010ac8 	.word	0x08010ac8

08001d80 <Preset_Clear>:

int Preset_Clear(){
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0

	for(int i = 0; i < 5; i++){
 8001d86:	2300      	movs	r3, #0
 8001d88:	607b      	str	r3, [r7, #4]
 8001d8a:	e00a      	b.n	8001da2 <Preset_Clear+0x22>

		if(Preset_Init(i) != 0){
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff ff9f 	bl	8001cd0 <Preset_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <Preset_Clear+0x1c>
			return 1;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e006      	b.n	8001daa <Preset_Clear+0x2a>
	for(int i = 0; i < 5; i++){
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	ddf1      	ble.n	8001d8c <Preset_Clear+0xc>
		}

	}

	return 0;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <Preset_Load>:

// load the values into their destination peripherals
void Preset_Load(){
 8001db2:	b580      	push	{r7, lr}
 8001db4:	af00      	add	r7, sp, #0

	Mixer_Digital_Pot_Control();
 8001db6:	f001 fa59 	bl	800326c <Mixer_Digital_Pot_Control>

	Filter_Mod_Source_Control();
 8001dba:	f001 fae5 	bl	8003388 <Filter_Mod_Source_Control>
	Filter_Digital_Pot_Control();
 8001dbe:	f001 fb13 	bl	80033e8 <Filter_Digital_Pot_Control>

	LFO_Output_Control();
 8001dc2:	f001 fb2d 	bl	8003420 <LFO_Output_Control>
	LFO_Digital_Pot_Control();
 8001dc6:	f001 fb5b 	bl	8003480 <LFO_Digital_Pot_Control>

	VCA_Mod_Source_Control();
 8001dca:	f001 fa63 	bl	8003294 <VCA_Mod_Source_Control>
	VCA_Bypass_Switch_Control();
 8001dce:	f001 fa93 	bl	80032f8 <VCA_Bypass_Switch_Control>
	VCA_Digital_Pot_Control();
 8001dd2:	f001 fac3 	bl	800335c <VCA_Digital_Pot_Control>

	Envelope_Mode_Control();
 8001dd6:	f001 fb61 	bl	800349c <Envelope_Mode_Control>
	Envelope_Digital_Pot_Control();
 8001dda:	f001 fba7 	bl	800352c <Envelope_Digital_Pot_Control>

	return;
 8001dde:	bf00      	nop
}
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <Preset_Write>:

int Preset_Write(int preset_slot){
 8001de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001de6:	b095      	sub	sp, #84	@ 0x54
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]

	int error_check = 1;
 8001dec:	2301      	movs	r3, #1
 8001dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint8_t page_buf[8];
	uint8_t preset_buf[48];
    uint8_t checksum;

	// copy synth parameters into buffer
    memcpy(preset_buf, &SynthParameters, sizeof(Synth));
 8001df0:	4b37      	ldr	r3, [pc, #220]	@ (8001ed0 <Preset_Write+0xec>)
 8001df2:	461c      	mov	r4, r3
 8001df4:	f107 0610 	add.w	r6, r7, #16
 8001df8:	f104 0c20 	add.w	ip, r4, #32
 8001dfc:	4635      	mov	r5, r6
 8001dfe:	4623      	mov	r3, r4
 8001e00:	6818      	ldr	r0, [r3, #0]
 8001e02:	6859      	ldr	r1, [r3, #4]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e0a:	3410      	adds	r4, #16
 8001e0c:	3610      	adds	r6, #16
 8001e0e:	4564      	cmp	r4, ip
 8001e10:	d1f4      	bne.n	8001dfc <Preset_Write+0x18>
 8001e12:	4633      	mov	r3, r6
 8001e14:	4622      	mov	r2, r4
 8001e16:	6810      	ldr	r0, [r2, #0]
 8001e18:	6851      	ldr	r1, [r2, #4]
 8001e1a:	6892      	ldr	r2, [r2, #8]
 8001e1c:	c307      	stmia	r3!, {r0, r1, r2}

    // copy remaining system settings
    preset_buf[44] = sys.serial_cmd_echo;
 8001e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ed4 <Preset_Write+0xf0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    preset_buf[45] = sys.midi_tx_pol;
 8001e28:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed4 <Preset_Write+0xf0>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    preset_buf[46] = sys.midi_tx_en;
 8001e32:	4b28      	ldr	r3, [pc, #160]	@ (8001ed4 <Preset_Write+0xf0>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

    checksum = XOR_Checksum(preset_buf, 48);
 8001e3c:	f107 0310 	add.w	r3, r7, #16
 8001e40:	2130      	movs	r1, #48	@ 0x30
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 f8be 	bl	8001fc4 <XOR_Checksum>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	73fb      	strb	r3, [r7, #15]
    preset_buf[47] = checksum;
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    error_check = EEPROM_Write_Byte(preset_slot, &checksum);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	f107 020f 	add.w	r2, r7, #15
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f001 ff5b 	bl	8003d18 <EEPROM_Write_Byte>
 8001e62:	64f8      	str	r0, [r7, #76]	@ 0x4c

	for(int page = 0; page < 6; page++){
 8001e64:	2300      	movs	r3, #0
 8001e66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e68:	e020      	b.n	8001eac <Preset_Write+0xc8>

		memcpy(page_buf, &preset_buf[8 * page], 8); // copy one page of data from buffer
 8001e6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	f107 0210 	add.w	r2, r7, #16
 8001e72:	441a      	add	r2, r3
 8001e74:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e78:	6810      	ldr	r0, [r2, #0]
 8001e7a:	6851      	ldr	r1, [r2, #4]
 8001e7c:	c303      	stmia	r3!, {r0, r1}
		error_check = EEPROM_Write_Page(PAGE_OFFSET + (preset_slot * 6) + page, page_buf);
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4413      	add	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	1c9a      	adds	r2, r3, #2
 8001e8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e8c:	4413      	add	r3, r2
 8001e8e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f001 fef3 	bl	8003c80 <EEPROM_Write_Page>
 8001e9a:	64f8      	str	r0, [r7, #76]	@ 0x4c

		if(error_check != 0){
 8001e9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <Preset_Write+0xc2>
			return 1;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e010      	b.n	8001ec8 <Preset_Write+0xe4>
	for(int page = 0; page < 6; page++){
 8001ea6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001eac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001eae:	2b05      	cmp	r3, #5
 8001eb0:	dddb      	ble.n	8001e6a <Preset_Write+0x86>
		}

	}

	// read checksum for EEPROM slot used and verify output
	if(checksum == Readback_Checksum(preset_slot)){
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f001 fec2 	bl	8003c3c <Readback_Checksum>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	461a      	mov	r2, r3
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d101      	bne.n	8001ec6 <Preset_Write+0xe2>
		error_check = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	}

    return error_check;
 8001ec6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3754      	adds	r7, #84	@ 0x54
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed0:	20000344 	.word	0x20000344
 8001ed4:	20000370 	.word	0x20000370

08001ed8 <Preset_Read>:

int Preset_Read(int preset_slot){
 8001ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eda:	b093      	sub	sp, #76	@ 0x4c
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
    uint8_t page_buf[8];
    uint8_t preset_buf[48];
    uint8_t checksum;

    // readback stored checksum
    if(EEPROM_Read_Byte(preset_slot, &checksum) != 0){
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	f107 020b 	add.w	r2, r7, #11
 8001ee8:	4611      	mov	r1, r2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f001 ff38 	bl	8003d60 <EEPROM_Read_Byte>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <Preset_Read+0x22>
    	return 1;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e05b      	b.n	8001fb2 <Preset_Read+0xda>
    }

    // read all pages back into the buffer
    for (int page = 0; page < 6; page++) {
 8001efa:	2300      	movs	r3, #0
 8001efc:	647b      	str	r3, [r7, #68]	@ 0x44
 8001efe:	e020      	b.n	8001f42 <Preset_Read+0x6a>

        if (EEPROM_Read_Page(PAGE_OFFSET + (preset_slot * 6) + page, page_buf) != 0) {
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	1c9a      	adds	r2, r3, #2
 8001f0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f0e:	4413      	add	r3, r2
 8001f10:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001f14:	4611      	mov	r1, r2
 8001f16:	4618      	mov	r0, r3
 8001f18:	f001 feda 	bl	8003cd0 <EEPROM_Read_Page>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <Preset_Read+0x4e>
            return 1; // error during EEPROM read
 8001f22:	2301      	movs	r3, #1
 8001f24:	e045      	b.n	8001fb2 <Preset_Read+0xda>
        }

        memcpy(&preset_buf[8 * page], page_buf, 8); // copy page data into buffer
 8001f26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	f107 020c 	add.w	r2, r7, #12
 8001f2e:	4413      	add	r3, r2
 8001f30:	461a      	mov	r2, r3
 8001f32:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001f36:	cb03      	ldmia	r3!, {r0, r1}
 8001f38:	6010      	str	r0, [r2, #0]
 8001f3a:	6051      	str	r1, [r2, #4]
    for (int page = 0; page < 6; page++) {
 8001f3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f3e:	3301      	adds	r3, #1
 8001f40:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f44:	2b05      	cmp	r3, #5
 8001f46:	dddb      	ble.n	8001f00 <Preset_Read+0x28>
    }

    // validate the checksum
    if (checksum != XOR_Checksum(preset_buf, 47)) {
 8001f48:	f107 030c 	add.w	r3, r7, #12
 8001f4c:	212f      	movs	r1, #47	@ 0x2f
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 f838 	bl	8001fc4 <XOR_Checksum>
 8001f54:	4603      	mov	r3, r0
 8001f56:	461a      	mov	r2, r3
 8001f58:	7afb      	ldrb	r3, [r7, #11]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d001      	beq.n	8001f62 <Preset_Read+0x8a>
        return 1; // checksum mismatch
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e027      	b.n	8001fb2 <Preset_Read+0xda>
    }

    // copy buffer data into synth parameters and system structures
    memcpy(&SynthParameters, preset_buf, sizeof(Synth));
 8001f62:	4b16      	ldr	r3, [pc, #88]	@ (8001fbc <Preset_Read+0xe4>)
 8001f64:	f107 040c 	add.w	r4, r7, #12
 8001f68:	469c      	mov	ip, r3
 8001f6a:	f104 0e20 	add.w	lr, r4, #32
 8001f6e:	4665      	mov	r5, ip
 8001f70:	4626      	mov	r6, r4
 8001f72:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001f74:	6028      	str	r0, [r5, #0]
 8001f76:	6069      	str	r1, [r5, #4]
 8001f78:	60aa      	str	r2, [r5, #8]
 8001f7a:	60eb      	str	r3, [r5, #12]
 8001f7c:	3410      	adds	r4, #16
 8001f7e:	f10c 0c10 	add.w	ip, ip, #16
 8001f82:	4574      	cmp	r4, lr
 8001f84:	d1f3      	bne.n	8001f6e <Preset_Read+0x96>
 8001f86:	4665      	mov	r5, ip
 8001f88:	4623      	mov	r3, r4
 8001f8a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001f8c:	6028      	str	r0, [r5, #0]
 8001f8e:	6069      	str	r1, [r5, #4]
 8001f90:	60aa      	str	r2, [r5, #8]
    sys.serial_cmd_echo = preset_buf[44];
 8001f92:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001f96:	461a      	mov	r2, r3
 8001f98:	4b09      	ldr	r3, [pc, #36]	@ (8001fc0 <Preset_Read+0xe8>)
 8001f9a:	601a      	str	r2, [r3, #0]
    sys.midi_tx_pol = preset_buf[45];
 8001f9c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4b07      	ldr	r3, [pc, #28]	@ (8001fc0 <Preset_Read+0xe8>)
 8001fa4:	605a      	str	r2, [r3, #4]
    sys.midi_tx_en = preset_buf[46];
 8001fa6:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001faa:	461a      	mov	r2, r3
 8001fac:	4b04      	ldr	r3, [pc, #16]	@ (8001fc0 <Preset_Read+0xe8>)
 8001fae:	609a      	str	r2, [r3, #8]

    return 0;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	374c      	adds	r7, #76	@ 0x4c
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000344 	.word	0x20000344
 8001fc0:	20000370 	.word	0x20000370

08001fc4 <XOR_Checksum>:


uint8_t XOR_Checksum(uint8_t *data, int length){
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]

    uint8_t checksum = 0x00;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	73fb      	strb	r3, [r7, #15]

    for (int i = 0; i < length; i++) {
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	e009      	b.n	8001fec <XOR_Checksum+0x28>
        checksum ^= data[i]; // XOR each byte
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	4413      	add	r3, r2
 8001fde:	781a      	ldrb	r2, [r3, #0]
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	4053      	eors	r3, r2
 8001fe4:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < length; i++) {
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	dbf1      	blt.n	8001fd8 <XOR_Checksum+0x14>
    }

    return checksum;
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002008:	f3bf 8f4f 	dsb	sy
}
 800200c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800200e:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <__NVIC_SystemReset+0x24>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002016:	4904      	ldr	r1, [pc, #16]	@ (8002028 <__NVIC_SystemReset+0x24>)
 8002018:	4b04      	ldr	r3, [pc, #16]	@ (800202c <__NVIC_SystemReset+0x28>)
 800201a:	4313      	orrs	r3, r2
 800201c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800201e:	f3bf 8f4f 	dsb	sy
}
 8002022:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002024:	bf00      	nop
 8002026:	e7fd      	b.n	8002024 <__NVIC_SystemReset+0x20>
 8002028:	e000ed00 	.word	0xe000ed00
 800202c:	05fa0004 	.word	0x05fa0004

08002030 <Serial_Command_Handler>:
#include "system.h"

//extern I2C_HandleTypeDef hi2c3;
//extern System sys;

void Serial_Command_Handler(){
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0

	int error_check = 1;
 8002036:	2301      	movs	r3, #1
 8002038:	617b      	str	r3, [r7, #20]

	int command_byte;
	int address_byte;
	int data_byte;

	sys.value_returned = 0;
 800203a:	4b61      	ldr	r3, [pc, #388]	@ (80021c0 <Serial_Command_Handler+0x190>)
 800203c:	2200      	movs	r2, #0
 800203e:	60da      	str	r2, [r3, #12]

    if(sys.usb_data_present == 1){
 8002040:	4b5f      	ldr	r3, [pc, #380]	@ (80021c0 <Serial_Command_Handler+0x190>)
 8002042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002044:	2b01      	cmp	r3, #1
 8002046:	d10e      	bne.n	8002066 <Serial_Command_Handler+0x36>
    	sys.usb_data_present = 0;
 8002048:	4b5d      	ldr	r3, [pc, #372]	@ (80021c0 <Serial_Command_Handler+0x190>)
 800204a:	2200      	movs	r2, #0
 800204c:	66da      	str	r2, [r3, #108]	@ 0x6c

        command_byte = sys.usb_vcp_buffer[0];
 800204e:	4b5c      	ldr	r3, [pc, #368]	@ (80021c0 <Serial_Command_Handler+0x190>)
 8002050:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002054:	613b      	str	r3, [r7, #16]
        address_byte = sys.usb_vcp_buffer[1];
 8002056:	4b5a      	ldr	r3, [pc, #360]	@ (80021c0 <Serial_Command_Handler+0x190>)
 8002058:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800205c:	60fb      	str	r3, [r7, #12]
        data_byte    = sys.usb_vcp_buffer[2];
 800205e:	4b58      	ldr	r3, [pc, #352]	@ (80021c0 <Serial_Command_Handler+0x190>)
 8002060:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002064:	60bb      	str	r3, [r7, #8]

    }

    if(sys.midi_data_present == 1){
 8002066:	4b56      	ldr	r3, [pc, #344]	@ (80021c0 <Serial_Command_Handler+0x190>)
 8002068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800206a:	2b01      	cmp	r3, #1
 800206c:	d10e      	bne.n	800208c <Serial_Command_Handler+0x5c>
    	sys.midi_data_present = 0;
 800206e:	4b54      	ldr	r3, [pc, #336]	@ (80021c0 <Serial_Command_Handler+0x190>)
 8002070:	2200      	movs	r2, #0
 8002072:	671a      	str	r2, [r3, #112]	@ 0x70

        command_byte = sys.midi_buf[0];
 8002074:	4b52      	ldr	r3, [pc, #328]	@ (80021c0 <Serial_Command_Handler+0x190>)
 8002076:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800207a:	613b      	str	r3, [r7, #16]
        address_byte = sys.midi_buf[1];
 800207c:	4b50      	ldr	r3, [pc, #320]	@ (80021c0 <Serial_Command_Handler+0x190>)
 800207e:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002082:	60fb      	str	r3, [r7, #12]
        data_byte    = sys.midi_buf[2];
 8002084:	4b4e      	ldr	r3, [pc, #312]	@ (80021c0 <Serial_Command_Handler+0x190>)
 8002086:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800208a:	60bb      	str	r3, [r7, #8]

    }

    switch(command_byte) {
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	3b41      	subs	r3, #65	@ 0x41
 8002090:	2b19      	cmp	r3, #25
 8002092:	d87f      	bhi.n	8002194 <Serial_Command_Handler+0x164>
 8002094:	a201      	add	r2, pc, #4	@ (adr r2, 800209c <Serial_Command_Handler+0x6c>)
 8002096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800209a:	bf00      	nop
 800209c:	08002105 	.word	0x08002105
 80020a0:	08002195 	.word	0x08002195
 80020a4:	08002111 	.word	0x08002111
 80020a8:	08002195 	.word	0x08002195
 80020ac:	0800211d 	.word	0x0800211d
 80020b0:	08002129 	.word	0x08002129
 80020b4:	08002195 	.word	0x08002195
 80020b8:	08002195 	.word	0x08002195
 80020bc:	08002135 	.word	0x08002135
 80020c0:	08002195 	.word	0x08002195
 80020c4:	08002195 	.word	0x08002195
 80020c8:	08002195 	.word	0x08002195
 80020cc:	0800213d 	.word	0x0800213d
 80020d0:	08002195 	.word	0x08002195
 80020d4:	08002149 	.word	0x08002149
 80020d8:	08002155 	.word	0x08002155
 80020dc:	08002195 	.word	0x08002195
 80020e0:	08002161 	.word	0x08002161
 80020e4:	08002195 	.word	0x08002195
 80020e8:	08002195 	.word	0x08002195
 80020ec:	08002195 	.word	0x08002195
 80020f0:	08002195 	.word	0x08002195
 80020f4:	08002195 	.word	0x08002195
 80020f8:	08002195 	.word	0x08002195
 80020fc:	08002195 	.word	0x08002195
 8002100:	08002195 	.word	0x08002195
        case 'A': // voltage controlled amplifier command

        	error_check = VCA_Command_Handler(address_byte, data_byte);
 8002104:	68b9      	ldr	r1, [r7, #8]
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 f85e 	bl	80021c8 <VCA_Command_Handler>
 800210c:	6178      	str	r0, [r7, #20]

            break;
 800210e:	e042      	b.n	8002196 <Serial_Command_Handler+0x166>
        case 'C': // communication settings command

        	error_check = Communication_Command_Handler(address_byte, data_byte);
 8002110:	68b9      	ldr	r1, [r7, #8]
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 f96e 	bl	80023f4 <Communication_Command_Handler>
 8002118:	6178      	str	r0, [r7, #20]

            break;
 800211a:	e03c      	b.n	8002196 <Serial_Command_Handler+0x166>
        case 'E': // envelope command

        	error_check = Envelope_Command_Handler(address_byte, data_byte);
 800211c:	68b9      	ldr	r1, [r7, #8]
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 f9c0 	bl	80024a4 <Envelope_Command_Handler>
 8002124:	6178      	str	r0, [r7, #20]

            break;
 8002126:	e036      	b.n	8002196 <Serial_Command_Handler+0x166>
        case 'F': // low pass filter command

        	error_check = Filter_Command_Handler(address_byte, data_byte);
 8002128:	68b9      	ldr	r1, [r7, #8]
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 fb06 	bl	800273c <Filter_Command_Handler>
 8002130:	6178      	str	r0, [r7, #20]

            break;
 8002132:	e030      	b.n	8002196 <Serial_Command_Handler+0x166>
        case 'I': // initialize preset command

        	error_check = Synth_Initialize_Preset();
 8002134:	f000 ffee 	bl	8003114 <Synth_Initialize_Preset>
 8002138:	6178      	str	r0, [r7, #20]

            break;
 800213a:	e02c      	b.n	8002196 <Serial_Command_Handler+0x166>
        case 'L': // load preset command

            break;
        case 'M': // mixer command

        	error_check = Mixer_Command_Handler(address_byte, data_byte);
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 fc02 	bl	8002948 <Mixer_Command_Handler>
 8002144:	6178      	str	r0, [r7, #20]

            break;
 8002146:	e026      	b.n	8002196 <Serial_Command_Handler+0x166>
        case 'O': // LFO command

        	error_check = LFO_Command_Handler(address_byte, data_byte);
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 fcb4 	bl	8002ab8 <LFO_Command_Handler>
 8002150:	6178      	str	r0, [r7, #20]

            break;
 8002152:	e020      	b.n	8002196 <Serial_Command_Handler+0x166>
        case 'P': // preset save/load command

        	error_check = Preset_Command_Handler(address_byte, data_byte);
 8002154:	68b9      	ldr	r1, [r7, #8]
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 fd76 	bl	8002c48 <Preset_Command_Handler>
 800215c:	6178      	str	r0, [r7, #20]

            break;
 800215e:	e01a      	b.n	8002196 <Serial_Command_Handler+0x166>
        case 'R': // reset command

        	for(int i=0; i <6 ; i++){
 8002160:	2300      	movs	r3, #0
 8002162:	607b      	str	r3, [r7, #4]
 8002164:	e011      	b.n	800218a <Serial_Command_Handler+0x15a>
        	HAL_GPIO_TogglePin(GRN_LED_PORT, GRN_LED_PIN);
 8002166:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800216a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800216e:	f002 fc67 	bl	8004a40 <HAL_GPIO_TogglePin>
        	HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);
 8002172:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002176:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800217a:	f002 fc61 	bl	8004a40 <HAL_GPIO_TogglePin>
        	HAL_Delay(125);
 800217e:	207d      	movs	r0, #125	@ 0x7d
 8002180:	f001 ff18 	bl	8003fb4 <HAL_Delay>
        	for(int i=0; i <6 ; i++){
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3301      	adds	r3, #1
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b05      	cmp	r3, #5
 800218e:	ddea      	ble.n	8002166 <Serial_Command_Handler+0x136>
        	}

			NVIC_SystemReset();
 8002190:	f7ff ff38 	bl	8002004 <__NVIC_SystemReset>

            break;
        default:
            // do nothing on invalid command

            break;
 8002194:	bf00      	nop
    }

    Command_Blink_Status_LED(error_check);
 8002196:	6978      	ldr	r0, [r7, #20]
 8002198:	f001 fb4c 	bl	8003834 <Command_Blink_Status_LED>

    Command_Response_Handler(error_check, command_byte, address_byte, data_byte);
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	b2d9      	uxtb	r1, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	6978      	ldr	r0, [r7, #20]
 80021aa:	f001 fa9f 	bl	80036ec <Command_Response_Handler>

    memset (sys.usb_vcp_buffer, '\0', 64); // clear buffer of old data
 80021ae:	2240      	movs	r2, #64	@ 0x40
 80021b0:	2100      	movs	r1, #0
 80021b2:	4804      	ldr	r0, [pc, #16]	@ (80021c4 <Serial_Command_Handler+0x194>)
 80021b4:	f00d ffca 	bl	801014c <memset>

}
 80021b8:	bf00      	nop
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000370 	.word	0x20000370
 80021c4:	20000390 	.word	0x20000390

080021c8 <VCA_Command_Handler>:

// ===========================================================================================================
// A - VCA functions

int VCA_Command_Handler(int address, int data){
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 80021d2:	2301      	movs	r3, #1
 80021d4:	60fb      	str	r3, [r7, #12]

    switch(address) {
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3b31      	subs	r3, #49	@ 0x31
 80021da:	2b04      	cmp	r3, #4
 80021dc:	f200 8083 	bhi.w	80022e6 <VCA_Command_Handler+0x11e>
 80021e0:	a201      	add	r2, pc, #4	@ (adr r2, 80021e8 <VCA_Command_Handler+0x20>)
 80021e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e6:	bf00      	nop
 80021e8:	080021fd 	.word	0x080021fd
 80021ec:	08002229 	.word	0x08002229
 80021f0:	08002255 	.word	0x08002255
 80021f4:	08002289 	.word	0x08002289
 80021f8:	080022bd 	.word	0x080022bd
        case '1': // VCA modulation offset

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 80021fc:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 80022f0 <VCA_Command_Handler+0x128>
 8002200:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 80022f0 <VCA_Command_Handler+0x128>
 8002204:	22ff      	movs	r2, #255	@ 0xff
 8002206:	6839      	ldr	r1, [r7, #0]
 8002208:	2000      	movs	r0, #0
 800220a:	f001 fac3 	bl	8003794 <Command_Error_Check>
 800220e:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d106      	bne.n	8002224 <VCA_Command_Handler+0x5c>
                SynthParameters.vca_offset = data;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	b2da      	uxtb	r2, r3
 800221a:	4b36      	ldr	r3, [pc, #216]	@ (80022f4 <VCA_Command_Handler+0x12c>)
 800221c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                VCA_Digital_Pot_Control();
 8002220:	f001 f89c 	bl	800335c <VCA_Digital_Pot_Control>
            }

        	return error_check;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	e05f      	b.n	80022e8 <VCA_Command_Handler+0x120>
        case '2': // VCA modulation intensity

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 8002228:	eddf 0a31 	vldr	s1, [pc, #196]	@ 80022f0 <VCA_Command_Handler+0x128>
 800222c:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 80022f0 <VCA_Command_Handler+0x128>
 8002230:	22ff      	movs	r2, #255	@ 0xff
 8002232:	6839      	ldr	r1, [r7, #0]
 8002234:	2000      	movs	r0, #0
 8002236:	f001 faad 	bl	8003794 <Command_Error_Check>
 800223a:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d106      	bne.n	8002250 <VCA_Command_Handler+0x88>
                SynthParameters.vca_cv_intensity = data;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	b2da      	uxtb	r2, r3
 8002246:	4b2b      	ldr	r3, [pc, #172]	@ (80022f4 <VCA_Command_Handler+0x12c>)
 8002248:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                VCA_Digital_Pot_Control();
 800224c:	f001 f886 	bl	800335c <VCA_Digital_Pot_Control>
            }

        	return error_check;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	e049      	b.n	80022e8 <VCA_Command_Handler+0x120>
        case '3': // VCA modulation control

        	error_check = Command_Error_Check(OPTION_BOX_CHECK, data, 3, 0, 0);
 8002254:	eddf 0a26 	vldr	s1, [pc, #152]	@ 80022f0 <VCA_Command_Handler+0x128>
 8002258:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 80022f0 <VCA_Command_Handler+0x128>
 800225c:	2203      	movs	r2, #3
 800225e:	6839      	ldr	r1, [r7, #0]
 8002260:	2001      	movs	r0, #1
 8002262:	f001 fa97 	bl	8003794 <Command_Error_Check>
 8002266:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10a      	bne.n	8002284 <VCA_Command_Handler+0xbc>
                SynthParameters.vca_mod_source = data;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	b2da      	uxtb	r2, r3
 8002272:	4b20      	ldr	r3, [pc, #128]	@ (80022f4 <VCA_Command_Handler+0x12c>)
 8002274:	701a      	strb	r2, [r3, #0]
                VCA_Mod_Source_Decode(SynthParameters.vca_mod_source);
 8002276:	4b1f      	ldr	r3, [pc, #124]	@ (80022f4 <VCA_Command_Handler+0x12c>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f000 f83e 	bl	80022fc <VCA_Mod_Source_Decode>
                VCA_Mod_Source_Control();
 8002280:	f001 f808 	bl	8003294 <VCA_Mod_Source_Control>
            }

        	return error_check;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	e02f      	b.n	80022e8 <VCA_Command_Handler+0x120>
        case '4': // VCA signal bypass control

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 8002288:	eddf 0a19 	vldr	s1, [pc, #100]	@ 80022f0 <VCA_Command_Handler+0x128>
 800228c:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 80022f0 <VCA_Command_Handler+0x128>
 8002290:	2201      	movs	r2, #1
 8002292:	6839      	ldr	r1, [r7, #0]
 8002294:	2000      	movs	r0, #0
 8002296:	f001 fa7d 	bl	8003794 <Command_Error_Check>
 800229a:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10a      	bne.n	80022b8 <VCA_Command_Handler+0xf0>
                SynthParameters.vca_bypass = data;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4b13      	ldr	r3, [pc, #76]	@ (80022f4 <VCA_Command_Handler+0x12c>)
 80022a8:	705a      	strb	r2, [r3, #1]
                VCA_Mod_Source_Decode(SynthParameters.vca_bypass);
 80022aa:	4b12      	ldr	r3, [pc, #72]	@ (80022f4 <VCA_Command_Handler+0x12c>)
 80022ac:	785b      	ldrb	r3, [r3, #1]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 f824 	bl	80022fc <VCA_Mod_Source_Decode>
                VCA_Bypass_Switch_Control();
 80022b4:	f001 f820 	bl	80032f8 <VCA_Bypass_Switch_Control>
            }

        	return error_check;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	e015      	b.n	80022e8 <VCA_Command_Handler+0x120>
        case '5': // read back setting value

        	error_check = Command_Error_Check(NUMBER_CHECK, data, 4, 0, 0);
 80022bc:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 80022f0 <VCA_Command_Handler+0x128>
 80022c0:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 80022f0 <VCA_Command_Handler+0x128>
 80022c4:	2204      	movs	r2, #4
 80022c6:	6839      	ldr	r1, [r7, #0]
 80022c8:	2002      	movs	r0, #2
 80022ca:	f001 fa63 	bl	8003794 <Command_Error_Check>
 80022ce:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d105      	bne.n	80022e2 <VCA_Command_Handler+0x11a>
            	VCA_Value_Query(data);
 80022d6:	6838      	ldr	r0, [r7, #0]
 80022d8:	f000 f842 	bl	8002360 <VCA_Value_Query>
                sys.value_returned = 1; // tell the serial handler a response has been sent
 80022dc:	4b06      	ldr	r3, [pc, #24]	@ (80022f8 <VCA_Command_Handler+0x130>)
 80022de:	2201      	movs	r2, #1
 80022e0:	60da      	str	r2, [r3, #12]
            }

        	return error_check;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	e000      	b.n	80022e8 <VCA_Command_Handler+0x120>
        default:
            // do nothing on invalid command

        	return error_check;
 80022e6:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	00000000 	.word	0x00000000
 80022f4:	20000344 	.word	0x20000344
 80022f8:	20000370 	.word	0x20000370

080022fc <VCA_Mod_Source_Decode>:

void VCA_Mod_Source_Decode(int data){
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

    switch(data) {
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b03      	cmp	r3, #3
 8002308:	d017      	beq.n	800233a <VCA_Mod_Source_Decode+0x3e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b03      	cmp	r3, #3
 800230e:	dc1d      	bgt.n	800234c <VCA_Mod_Source_Decode+0x50>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d003      	beq.n	800231e <VCA_Mod_Source_Decode+0x22>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d005      	beq.n	8002328 <VCA_Mod_Source_Decode+0x2c>
        	SynthParameters.vca_cv_en = 1;
        	SynthParameters.vca_cv_sel = 0;
            break;
        default:
            // do nothing on invalid command
            break;
 800231c:	e016      	b.n	800234c <VCA_Mod_Source_Decode+0x50>
        	SynthParameters.vca_cv_en = 0;
 800231e:	4b0f      	ldr	r3, [pc, #60]	@ (800235c <VCA_Mod_Source_Decode+0x60>)
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2020 	strb.w	r2, [r3, #32]
            break;
 8002326:	e012      	b.n	800234e <VCA_Mod_Source_Decode+0x52>
        	SynthParameters.vca_cv_en = 1;
 8002328:	4b0c      	ldr	r3, [pc, #48]	@ (800235c <VCA_Mod_Source_Decode+0x60>)
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2020 	strb.w	r2, [r3, #32]
        	SynthParameters.vca_cv_sel = 1;
 8002330:	4b0a      	ldr	r3, [pc, #40]	@ (800235c <VCA_Mod_Source_Decode+0x60>)
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            break;
 8002338:	e009      	b.n	800234e <VCA_Mod_Source_Decode+0x52>
        	SynthParameters.vca_cv_en = 1;
 800233a:	4b08      	ldr	r3, [pc, #32]	@ (800235c <VCA_Mod_Source_Decode+0x60>)
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2020 	strb.w	r2, [r3, #32]
        	SynthParameters.vca_cv_sel = 0;
 8002342:	4b06      	ldr	r3, [pc, #24]	@ (800235c <VCA_Mod_Source_Decode+0x60>)
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            break;
 800234a:	e000      	b.n	800234e <VCA_Mod_Source_Decode+0x52>
            break;
 800234c:	bf00      	nop
    }

	return;
 800234e:	bf00      	nop
}
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20000344 	.word	0x20000344

08002360 <VCA_Value_Query>:
    }

	return;
}

void VCA_Value_Query(int data){
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]

	uint8_t return_data[3] = {'A', data , 0};
 8002368:	2341      	movs	r3, #65	@ 0x41
 800236a:	733b      	strb	r3, [r7, #12]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	b2db      	uxtb	r3, r3
 8002370:	737b      	strb	r3, [r7, #13]
 8002372:	2300      	movs	r3, #0
 8002374:	73bb      	strb	r3, [r7, #14]

    switch(data) {
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3b31      	subs	r3, #49	@ 0x31
 800237a:	2b03      	cmp	r3, #3
 800237c:	d81c      	bhi.n	80023b8 <VCA_Value_Query+0x58>
 800237e:	a201      	add	r2, pc, #4	@ (adr r2, 8002384 <VCA_Value_Query+0x24>)
 8002380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002384:	08002395 	.word	0x08002395
 8002388:	0800239f 	.word	0x0800239f
 800238c:	080023a9 	.word	0x080023a9
 8002390:	080023b1 	.word	0x080023b1
        case '1': // VCA modulation offset
        	return_data[2] = SynthParameters.vca_offset;
 8002394:	4b14      	ldr	r3, [pc, #80]	@ (80023e8 <VCA_Value_Query+0x88>)
 8002396:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800239a:	73bb      	strb	r3, [r7, #14]
            break;
 800239c:	e00d      	b.n	80023ba <VCA_Value_Query+0x5a>
        case '2': // VCA modulation intensity
        	return_data[2] = SynthParameters.vca_cv_intensity;
 800239e:	4b12      	ldr	r3, [pc, #72]	@ (80023e8 <VCA_Value_Query+0x88>)
 80023a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023a4:	73bb      	strb	r3, [r7, #14]
            break;
 80023a6:	e008      	b.n	80023ba <VCA_Value_Query+0x5a>
        case '3': // VCA modulation control
        	return_data[2] = SynthParameters.vca_mod_source;
 80023a8:	4b0f      	ldr	r3, [pc, #60]	@ (80023e8 <VCA_Value_Query+0x88>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	73bb      	strb	r3, [r7, #14]
            break;
 80023ae:	e004      	b.n	80023ba <VCA_Value_Query+0x5a>
        case '4': // VCA signal bypass control
        	return_data[2] = SynthParameters.vca_bypass;
 80023b0:	4b0d      	ldr	r3, [pc, #52]	@ (80023e8 <VCA_Value_Query+0x88>)
 80023b2:	785b      	ldrb	r3, [r3, #1]
 80023b4:	73bb      	strb	r3, [r7, #14]
            break;
 80023b6:	e000      	b.n	80023ba <VCA_Value_Query+0x5a>
        default:  // do nothing on invalid command

            break;
 80023b8:	bf00      	nop
    }

    CDC_Transmit_FS(return_data, 3); // transmit return message
 80023ba:	f107 030c 	add.w	r3, r7, #12
 80023be:	2103      	movs	r1, #3
 80023c0:	4618      	mov	r0, r3
 80023c2:	f00d fa31 	bl	800f828 <CDC_Transmit_FS>

    if (sys.midi_tx_en == 1) { // send return message if enabled
 80023c6:	4b09      	ldr	r3, [pc, #36]	@ (80023ec <VCA_Value_Query+0x8c>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d108      	bne.n	80023e0 <VCA_Value_Query+0x80>
        HAL_UART_Transmit(&huart2, return_data, 3, 1000);
 80023ce:	f107 010c 	add.w	r1, r7, #12
 80023d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023d6:	2203      	movs	r2, #3
 80023d8:	4805      	ldr	r0, [pc, #20]	@ (80023f0 <VCA_Value_Query+0x90>)
 80023da:	f007 fd69 	bl	8009eb0 <HAL_UART_Transmit>
    }

	return;
 80023de:	bf00      	nop
 80023e0:	bf00      	nop
}
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20000344 	.word	0x20000344
 80023ec:	20000370 	.word	0x20000370
 80023f0:	20000448 	.word	0x20000448

080023f4 <Communication_Command_Handler>:

// ===========================================================================================================
// C - communication settings function

int Communication_Command_Handler(int address, int data){
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 80023fe:	2301      	movs	r3, #1
 8002400:	60fb      	str	r3, [r7, #12]

    switch(address) {
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b33      	cmp	r3, #51	@ 0x33
 8002406:	d02f      	beq.n	8002468 <Communication_Command_Handler+0x74>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b33      	cmp	r3, #51	@ 0x33
 800240c:	dc40      	bgt.n	8002490 <Communication_Command_Handler+0x9c>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b31      	cmp	r3, #49	@ 0x31
 8002412:	d003      	beq.n	800241c <Communication_Command_Handler+0x28>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b32      	cmp	r3, #50	@ 0x32
 8002418:	d012      	beq.n	8002440 <Communication_Command_Handler+0x4c>
 800241a:	e039      	b.n	8002490 <Communication_Command_Handler+0x9c>
        case '1': // echo command/acknowledge response setting; true = echo, false = acknowledge

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 800241c:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 800249c <Communication_Command_Handler+0xa8>
 8002420:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 800249c <Communication_Command_Handler+0xa8>
 8002424:	2201      	movs	r2, #1
 8002426:	6839      	ldr	r1, [r7, #0]
 8002428:	2000      	movs	r0, #0
 800242a:	f001 f9b3 	bl	8003794 <Command_Error_Check>
 800242e:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d102      	bne.n	800243c <Communication_Command_Handler+0x48>
            	sys.serial_cmd_echo = data;
 8002436:	4a1a      	ldr	r2, [pc, #104]	@ (80024a0 <Communication_Command_Handler+0xac>)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	6013      	str	r3, [r2, #0]
            }

        	return error_check;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	e028      	b.n	8002492 <Communication_Command_Handler+0x9e>
        case '2': // MIDI transmit enable setting; true = enabled, false = disabled

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 8002440:	eddf 0a16 	vldr	s1, [pc, #88]	@ 800249c <Communication_Command_Handler+0xa8>
 8002444:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800249c <Communication_Command_Handler+0xa8>
 8002448:	2201      	movs	r2, #1
 800244a:	6839      	ldr	r1, [r7, #0]
 800244c:	2000      	movs	r0, #0
 800244e:	f001 f9a1 	bl	8003794 <Command_Error_Check>
 8002452:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d104      	bne.n	8002464 <Communication_Command_Handler+0x70>
            	sys.midi_tx_en = data;
 800245a:	4a11      	ldr	r2, [pc, #68]	@ (80024a0 <Communication_Command_Handler+0xac>)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	6093      	str	r3, [r2, #8]
            	MIDI_Port_Control();
 8002460:	f001 f904 	bl	800366c <MIDI_Port_Control>
            }

        	return error_check;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	e014      	b.n	8002492 <Communication_Command_Handler+0x9e>
        case '3': // MIDI transmit output polarity setting; true = inverted, false = non-inverted

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 8002468:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 800249c <Communication_Command_Handler+0xa8>
 800246c:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 800249c <Communication_Command_Handler+0xa8>
 8002470:	2201      	movs	r2, #1
 8002472:	6839      	ldr	r1, [r7, #0]
 8002474:	2000      	movs	r0, #0
 8002476:	f001 f98d 	bl	8003794 <Command_Error_Check>
 800247a:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d104      	bne.n	800248c <Communication_Command_Handler+0x98>
            	sys.midi_tx_pol = data;
 8002482:	4a07      	ldr	r2, [pc, #28]	@ (80024a0 <Communication_Command_Handler+0xac>)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	6053      	str	r3, [r2, #4]
            	MIDI_Port_Control();
 8002488:	f001 f8f0 	bl	800366c <MIDI_Port_Control>
            }

        	return error_check;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	e000      	b.n	8002492 <Communication_Command_Handler+0x9e>
        default:
            // do nothing on invalid command

        	return error_check;
 8002490:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	00000000 	.word	0x00000000
 80024a0:	20000370 	.word	0x20000370

080024a4 <Envelope_Command_Handler>:

// ===========================================================================================================
// E - envelope functions

int Envelope_Command_Handler(int address, int data){
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 80024ae:	2301      	movs	r3, #1
 80024b0:	60fb      	str	r3, [r7, #12]

    switch(address) {
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3b31      	subs	r3, #49	@ 0x31
 80024b6:	2b05      	cmp	r3, #5
 80024b8:	f200 809b 	bhi.w	80025f2 <Envelope_Command_Handler+0x14e>
 80024bc:	a201      	add	r2, pc, #4	@ (adr r2, 80024c4 <Envelope_Command_Handler+0x20>)
 80024be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c2:	bf00      	nop
 80024c4:	080024dd 	.word	0x080024dd
 80024c8:	08002509 	.word	0x08002509
 80024cc:	08002535 	.word	0x08002535
 80024d0:	08002561 	.word	0x08002561
 80024d4:	08002595 	.word	0x08002595
 80024d8:	080025c9 	.word	0x080025c9
        case '1': // envelope attack rate

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 80024dc:	eddf 0a47 	vldr	s1, [pc, #284]	@ 80025fc <Envelope_Command_Handler+0x158>
 80024e0:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 80025fc <Envelope_Command_Handler+0x158>
 80024e4:	22ff      	movs	r2, #255	@ 0xff
 80024e6:	6839      	ldr	r1, [r7, #0]
 80024e8:	2000      	movs	r0, #0
 80024ea:	f001 f953 	bl	8003794 <Command_Error_Check>
 80024ee:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d106      	bne.n	8002504 <Envelope_Command_Handler+0x60>
                SynthParameters.env_attack_rate = data;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4b41      	ldr	r3, [pc, #260]	@ (8002600 <Envelope_Command_Handler+0x15c>)
 80024fc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
                Envelope_Digital_Pot_Control();
 8002500:	f001 f814 	bl	800352c <Envelope_Digital_Pot_Control>
            }

        	return error_check;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	e075      	b.n	80025f4 <Envelope_Command_Handler+0x150>
        case '2': // envelope sustain level/decay rate

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 8002508:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 80025fc <Envelope_Command_Handler+0x158>
 800250c:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 80025fc <Envelope_Command_Handler+0x158>
 8002510:	22ff      	movs	r2, #255	@ 0xff
 8002512:	6839      	ldr	r1, [r7, #0]
 8002514:	2000      	movs	r0, #0
 8002516:	f001 f93d 	bl	8003794 <Command_Error_Check>
 800251a:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d106      	bne.n	8002530 <Envelope_Command_Handler+0x8c>
                SynthParameters.env_decay_rate = data;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	b2da      	uxtb	r2, r3
 8002526:	4b36      	ldr	r3, [pc, #216]	@ (8002600 <Envelope_Command_Handler+0x15c>)
 8002528:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
                Envelope_Digital_Pot_Control();
 800252c:	f000 fffe 	bl	800352c <Envelope_Digital_Pot_Control>
            }

        	return error_check;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	e05f      	b.n	80025f4 <Envelope_Command_Handler+0x150>
        case '3': // envelope release rate

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 8002534:	eddf 0a31 	vldr	s1, [pc, #196]	@ 80025fc <Envelope_Command_Handler+0x158>
 8002538:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 80025fc <Envelope_Command_Handler+0x158>
 800253c:	22ff      	movs	r2, #255	@ 0xff
 800253e:	6839      	ldr	r1, [r7, #0]
 8002540:	2000      	movs	r0, #0
 8002542:	f001 f927 	bl	8003794 <Command_Error_Check>
 8002546:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d106      	bne.n	800255c <Envelope_Command_Handler+0xb8>
                SynthParameters.env_release_rate = data;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	b2da      	uxtb	r2, r3
 8002552:	4b2b      	ldr	r3, [pc, #172]	@ (8002600 <Envelope_Command_Handler+0x15c>)
 8002554:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
                Envelope_Digital_Pot_Control();
 8002558:	f000 ffe8 	bl	800352c <Envelope_Digital_Pot_Control>
            }

        	return error_check;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	e049      	b.n	80025f4 <Envelope_Command_Handler+0x150>
        case '4': // envelope output polarity

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 8002560:	eddf 0a26 	vldr	s1, [pc, #152]	@ 80025fc <Envelope_Command_Handler+0x158>
 8002564:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 80025fc <Envelope_Command_Handler+0x158>
 8002568:	2201      	movs	r2, #1
 800256a:	6839      	ldr	r1, [r7, #0]
 800256c:	2000      	movs	r0, #0
 800256e:	f001 f911 	bl	8003794 <Command_Error_Check>
 8002572:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10a      	bne.n	8002590 <Envelope_Command_Handler+0xec>
                SynthParameters.env_invert_mode = data;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4b20      	ldr	r3, [pc, #128]	@ (8002600 <Envelope_Command_Handler+0x15c>)
 8002580:	715a      	strb	r2, [r3, #5]
                Envelope_Output_Polarity_Decode(SynthParameters.env_invert_mode);
 8002582:	4b1f      	ldr	r3, [pc, #124]	@ (8002600 <Envelope_Command_Handler+0x15c>)
 8002584:	795b      	ldrb	r3, [r3, #5]
 8002586:	4618      	mov	r0, r3
 8002588:	f000 f83e 	bl	8002608 <Envelope_Output_Polarity_Decode>
                Envelope_Mode_Control();
 800258c:	f000 ff86 	bl	800349c <Envelope_Mode_Control>
            }

        	return error_check;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	e02f      	b.n	80025f4 <Envelope_Command_Handler+0x150>
        case '5': // envelope loop mode control

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 8002594:	eddf 0a19 	vldr	s1, [pc, #100]	@ 80025fc <Envelope_Command_Handler+0x158>
 8002598:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 80025fc <Envelope_Command_Handler+0x158>
 800259c:	2201      	movs	r2, #1
 800259e:	6839      	ldr	r1, [r7, #0]
 80025a0:	2000      	movs	r0, #0
 80025a2:	f001 f8f7 	bl	8003794 <Command_Error_Check>
 80025a6:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10a      	bne.n	80025c4 <Envelope_Command_Handler+0x120>
                SynthParameters.env_loop_mode = data;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	4b13      	ldr	r3, [pc, #76]	@ (8002600 <Envelope_Command_Handler+0x15c>)
 80025b4:	719a      	strb	r2, [r3, #6]
                Envelope_Loop_Mode_Decode(SynthParameters.env_loop_mode);
 80025b6:	4b12      	ldr	r3, [pc, #72]	@ (8002600 <Envelope_Command_Handler+0x15c>)
 80025b8:	799b      	ldrb	r3, [r3, #6]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 f848 	bl	8002650 <Envelope_Loop_Mode_Decode>
                Envelope_Mode_Control();
 80025c0:	f000 ff6c 	bl	800349c <Envelope_Mode_Control>
            }

        	return error_check;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	e015      	b.n	80025f4 <Envelope_Command_Handler+0x150>
        case '6': // read back setting value

        	error_check = Command_Error_Check(NUMBER_CHECK, data, 5, 0, 0);
 80025c8:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 80025fc <Envelope_Command_Handler+0x158>
 80025cc:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 80025fc <Envelope_Command_Handler+0x158>
 80025d0:	2205      	movs	r2, #5
 80025d2:	6839      	ldr	r1, [r7, #0]
 80025d4:	2002      	movs	r0, #2
 80025d6:	f001 f8dd 	bl	8003794 <Command_Error_Check>
 80025da:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d105      	bne.n	80025ee <Envelope_Command_Handler+0x14a>
            	Envelope_Value_Query(data);
 80025e2:	6838      	ldr	r0, [r7, #0]
 80025e4:	f000 f858 	bl	8002698 <Envelope_Value_Query>
                sys.value_returned = 1; // tell the serial handler a response has been sent
 80025e8:	4b06      	ldr	r3, [pc, #24]	@ (8002604 <Envelope_Command_Handler+0x160>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	60da      	str	r2, [r3, #12]
            }

        	return error_check;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	e000      	b.n	80025f4 <Envelope_Command_Handler+0x150>
        default:
            // do nothing on invalid command

        	return error_check;
 80025f2:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	00000000 	.word	0x00000000
 8002600:	20000344 	.word	0x20000344
 8002604:	20000370 	.word	0x20000370

08002608 <Envelope_Output_Polarity_Decode>:

void Envelope_Output_Polarity_Decode(int data){
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]

    if(data == 0){ // non-inverted envelope output
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d108      	bne.n	8002628 <Envelope_Output_Polarity_Decode+0x20>
    	SynthParameters.env_en = 1;
 8002616:	4b0d      	ldr	r3, [pc, #52]	@ (800264c <Envelope_Output_Polarity_Decode+0x44>)
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    	SynthParameters.env_invert = 1;
 800261e:	4b0b      	ldr	r3, [pc, #44]	@ (800264c <Envelope_Output_Polarity_Decode+0x44>)
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    else if(data == 1){ // inverted envelope output
    	SynthParameters.env_en = 1;
    	SynthParameters.env_invert = 0;
    }

	return;
 8002626:	e00b      	b.n	8002640 <Envelope_Output_Polarity_Decode+0x38>
    else if(data == 1){ // inverted envelope output
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d108      	bne.n	8002640 <Envelope_Output_Polarity_Decode+0x38>
    	SynthParameters.env_en = 1;
 800262e:	4b07      	ldr	r3, [pc, #28]	@ (800264c <Envelope_Output_Polarity_Decode+0x44>)
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    	SynthParameters.env_invert = 0;
 8002636:	4b05      	ldr	r3, [pc, #20]	@ (800264c <Envelope_Output_Polarity_Decode+0x44>)
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	return;
 800263e:	bf00      	nop
 8002640:	bf00      	nop
}
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	20000344 	.word	0x20000344

08002650 <Envelope_Loop_Mode_Decode>:

void Envelope_Loop_Mode_Decode(int data){
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]

    if(data == 0){ // disable loop mode
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d108      	bne.n	8002670 <Envelope_Loop_Mode_Decode+0x20>
    	SynthParameters.env_en = 1;
 800265e:	4b0d      	ldr	r3, [pc, #52]	@ (8002694 <Envelope_Loop_Mode_Decode+0x44>)
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    	SynthParameters.env_loop = 1;
 8002666:	4b0b      	ldr	r3, [pc, #44]	@ (8002694 <Envelope_Loop_Mode_Decode+0x44>)
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    else if(data == 1){ // enable loop mode
    	SynthParameters.env_en = 1;
    	SynthParameters.env_loop = 0;
    }

	return;
 800266e:	e00b      	b.n	8002688 <Envelope_Loop_Mode_Decode+0x38>
    else if(data == 1){ // enable loop mode
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d108      	bne.n	8002688 <Envelope_Loop_Mode_Decode+0x38>
    	SynthParameters.env_en = 1;
 8002676:	4b07      	ldr	r3, [pc, #28]	@ (8002694 <Envelope_Loop_Mode_Decode+0x44>)
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    	SynthParameters.env_loop = 0;
 800267e:	4b05      	ldr	r3, [pc, #20]	@ (8002694 <Envelope_Loop_Mode_Decode+0x44>)
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	return;
 8002686:	bf00      	nop
 8002688:	bf00      	nop
}
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	20000344 	.word	0x20000344

08002698 <Envelope_Value_Query>:

void Envelope_Value_Query(int data){
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]

	uint8_t return_data[3] = {'E', data , 0};
 80026a0:	2345      	movs	r3, #69	@ 0x45
 80026a2:	733b      	strb	r3, [r7, #12]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	737b      	strb	r3, [r7, #13]
 80026aa:	2300      	movs	r3, #0
 80026ac:	73bb      	strb	r3, [r7, #14]

    switch(data) {
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3b31      	subs	r3, #49	@ 0x31
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d823      	bhi.n	80026fe <Envelope_Value_Query+0x66>
 80026b6:	a201      	add	r2, pc, #4	@ (adr r2, 80026bc <Envelope_Value_Query+0x24>)
 80026b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026bc:	080026d1 	.word	0x080026d1
 80026c0:	080026db 	.word	0x080026db
 80026c4:	080026e5 	.word	0x080026e5
 80026c8:	080026ef 	.word	0x080026ef
 80026cc:	080026f7 	.word	0x080026f7
        case '1': // envelope attack rate
        	return_data[2] = SynthParameters.env_attack_rate;
 80026d0:	4b17      	ldr	r3, [pc, #92]	@ (8002730 <Envelope_Value_Query+0x98>)
 80026d2:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80026d6:	73bb      	strb	r3, [r7, #14]
            break;
 80026d8:	e012      	b.n	8002700 <Envelope_Value_Query+0x68>
        case '2': // envelope sustain level/decay rate
        	return_data[2] = SynthParameters.env_decay_rate;
 80026da:	4b15      	ldr	r3, [pc, #84]	@ (8002730 <Envelope_Value_Query+0x98>)
 80026dc:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80026e0:	73bb      	strb	r3, [r7, #14]
            break;
 80026e2:	e00d      	b.n	8002700 <Envelope_Value_Query+0x68>
        case '3': // envelope release rate
        	return_data[2] = SynthParameters.env_release_rate;
 80026e4:	4b12      	ldr	r3, [pc, #72]	@ (8002730 <Envelope_Value_Query+0x98>)
 80026e6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80026ea:	73bb      	strb	r3, [r7, #14]
            break;
 80026ec:	e008      	b.n	8002700 <Envelope_Value_Query+0x68>
        case '4': // envelope output polarity
        	return_data[2] = SynthParameters.env_invert_mode;
 80026ee:	4b10      	ldr	r3, [pc, #64]	@ (8002730 <Envelope_Value_Query+0x98>)
 80026f0:	795b      	ldrb	r3, [r3, #5]
 80026f2:	73bb      	strb	r3, [r7, #14]
            break;
 80026f4:	e004      	b.n	8002700 <Envelope_Value_Query+0x68>
        case '5': // envelope loop mode control
        	return_data[2] = SynthParameters.env_loop_mode;
 80026f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002730 <Envelope_Value_Query+0x98>)
 80026f8:	799b      	ldrb	r3, [r3, #6]
 80026fa:	73bb      	strb	r3, [r7, #14]
            break;
 80026fc:	e000      	b.n	8002700 <Envelope_Value_Query+0x68>
        default:  // do nothing on invalid command

            break;
 80026fe:	bf00      	nop
    }

    CDC_Transmit_FS(return_data, 3); // transmit return message
 8002700:	f107 030c 	add.w	r3, r7, #12
 8002704:	2103      	movs	r1, #3
 8002706:	4618      	mov	r0, r3
 8002708:	f00d f88e 	bl	800f828 <CDC_Transmit_FS>

    if (sys.midi_tx_en == 1) { // send return message if enabled
 800270c:	4b09      	ldr	r3, [pc, #36]	@ (8002734 <Envelope_Value_Query+0x9c>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d108      	bne.n	8002726 <Envelope_Value_Query+0x8e>
        HAL_UART_Transmit(&huart2, return_data, 3, 1000);
 8002714:	f107 010c 	add.w	r1, r7, #12
 8002718:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800271c:	2203      	movs	r2, #3
 800271e:	4806      	ldr	r0, [pc, #24]	@ (8002738 <Envelope_Value_Query+0xa0>)
 8002720:	f007 fbc6 	bl	8009eb0 <HAL_UART_Transmit>
    }

	return;
 8002724:	bf00      	nop
 8002726:	bf00      	nop
}
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20000344 	.word	0x20000344
 8002734:	20000370 	.word	0x20000370
 8002738:	20000448 	.word	0x20000448

0800273c <Filter_Command_Handler>:

// ===========================================================================================================
// F - filter functions

int Filter_Command_Handler(int address, int data){
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 8002746:	2301      	movs	r3, #1
 8002748:	60fb      	str	r3, [r7, #12]

    switch(address) {
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3b31      	subs	r3, #49	@ 0x31
 800274e:	2b04      	cmp	r3, #4
 8002750:	d87a      	bhi.n	8002848 <Filter_Command_Handler+0x10c>
 8002752:	a201      	add	r2, pc, #4	@ (adr r2, 8002758 <Filter_Command_Handler+0x1c>)
 8002754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002758:	0800276d 	.word	0x0800276d
 800275c:	08002797 	.word	0x08002797
 8002760:	080027c1 	.word	0x080027c1
 8002764:	080027eb 	.word	0x080027eb
 8002768:	0800281f 	.word	0x0800281f
        case '1': // filter cutoff

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 800276c:	eddf 0a39 	vldr	s1, [pc, #228]	@ 8002854 <Filter_Command_Handler+0x118>
 8002770:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 8002854 <Filter_Command_Handler+0x118>
 8002774:	22ff      	movs	r2, #255	@ 0xff
 8002776:	6839      	ldr	r1, [r7, #0]
 8002778:	2000      	movs	r0, #0
 800277a:	f001 f80b 	bl	8003794 <Command_Error_Check>
 800277e:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d105      	bne.n	8002792 <Filter_Command_Handler+0x56>
                SynthParameters.vcf_cutoff = data;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	b2da      	uxtb	r2, r3
 800278a:	4b33      	ldr	r3, [pc, #204]	@ (8002858 <Filter_Command_Handler+0x11c>)
 800278c:	76da      	strb	r2, [r3, #27]
                Filter_Digital_Pot_Control();
 800278e:	f000 fe2b 	bl	80033e8 <Filter_Digital_Pot_Control>
            }

        	return error_check;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	e059      	b.n	800284a <Filter_Command_Handler+0x10e>
        case '2': // filter resonance intensity

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 8002796:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8002854 <Filter_Command_Handler+0x118>
 800279a:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8002854 <Filter_Command_Handler+0x118>
 800279e:	22ff      	movs	r2, #255	@ 0xff
 80027a0:	6839      	ldr	r1, [r7, #0]
 80027a2:	2000      	movs	r0, #0
 80027a4:	f000 fff6 	bl	8003794 <Command_Error_Check>
 80027a8:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d105      	bne.n	80027bc <Filter_Command_Handler+0x80>
                SynthParameters.vcf_resonance = data;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	4b28      	ldr	r3, [pc, #160]	@ (8002858 <Filter_Command_Handler+0x11c>)
 80027b6:	771a      	strb	r2, [r3, #28]
                Filter_Digital_Pot_Control();
 80027b8:	f000 fe16 	bl	80033e8 <Filter_Digital_Pot_Control>
            }

        	return error_check;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	e044      	b.n	800284a <Filter_Command_Handler+0x10e>
        case '3': // filter modulation intensity

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 80027c0:	eddf 0a24 	vldr	s1, [pc, #144]	@ 8002854 <Filter_Command_Handler+0x118>
 80027c4:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8002854 <Filter_Command_Handler+0x118>
 80027c8:	22ff      	movs	r2, #255	@ 0xff
 80027ca:	6839      	ldr	r1, [r7, #0]
 80027cc:	2000      	movs	r0, #0
 80027ce:	f000 ffe1 	bl	8003794 <Command_Error_Check>
 80027d2:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d105      	bne.n	80027e6 <Filter_Command_Handler+0xaa>
                SynthParameters.vcf_cv_intensity = data;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	4b1e      	ldr	r3, [pc, #120]	@ (8002858 <Filter_Command_Handler+0x11c>)
 80027e0:	769a      	strb	r2, [r3, #26]
                Filter_Digital_Pot_Control();
 80027e2:	f000 fe01 	bl	80033e8 <Filter_Digital_Pot_Control>
            }

        	return error_check;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	e02f      	b.n	800284a <Filter_Command_Handler+0x10e>
        case '4': // filter modulation control

        	error_check = Command_Error_Check(OPTION_BOX_CHECK, data, 3, 0, 0);
 80027ea:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 8002854 <Filter_Command_Handler+0x118>
 80027ee:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8002854 <Filter_Command_Handler+0x118>
 80027f2:	2203      	movs	r2, #3
 80027f4:	6839      	ldr	r1, [r7, #0]
 80027f6:	2001      	movs	r0, #1
 80027f8:	f000 ffcc 	bl	8003794 <Command_Error_Check>
 80027fc:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10a      	bne.n	800281a <Filter_Command_Handler+0xde>
                SynthParameters.vcf_mod_source = data;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	b2da      	uxtb	r2, r3
 8002808:	4b13      	ldr	r3, [pc, #76]	@ (8002858 <Filter_Command_Handler+0x11c>)
 800280a:	709a      	strb	r2, [r3, #2]
                Filter_Mod_Source_Decode(SynthParameters.vcf_mod_source);
 800280c:	4b12      	ldr	r3, [pc, #72]	@ (8002858 <Filter_Command_Handler+0x11c>)
 800280e:	789b      	ldrb	r3, [r3, #2]
 8002810:	4618      	mov	r0, r3
 8002812:	f000 f825 	bl	8002860 <Filter_Mod_Source_Decode>
                Filter_Mod_Source_Control();
 8002816:	f000 fdb7 	bl	8003388 <Filter_Mod_Source_Control>
            }

        	return error_check;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	e015      	b.n	800284a <Filter_Command_Handler+0x10e>
        case '5': // read back setting value

        	error_check = Command_Error_Check(NUMBER_CHECK, data, 4, 0, 0);
 800281e:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8002854 <Filter_Command_Handler+0x118>
 8002822:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8002854 <Filter_Command_Handler+0x118>
 8002826:	2204      	movs	r2, #4
 8002828:	6839      	ldr	r1, [r7, #0]
 800282a:	2002      	movs	r0, #2
 800282c:	f000 ffb2 	bl	8003794 <Command_Error_Check>
 8002830:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d105      	bne.n	8002844 <Filter_Command_Handler+0x108>
            	Filter_Value_Query(data);
 8002838:	6838      	ldr	r0, [r7, #0]
 800283a:	f000 f83d 	bl	80028b8 <Filter_Value_Query>
                sys.value_returned = 1; // tell the serial handler a response has been sent
 800283e:	4b07      	ldr	r3, [pc, #28]	@ (800285c <Filter_Command_Handler+0x120>)
 8002840:	2201      	movs	r2, #1
 8002842:	60da      	str	r2, [r3, #12]
            }

        	return error_check;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	e000      	b.n	800284a <Filter_Command_Handler+0x10e>
        default:
            // do nothing on invalid command

        	return error_check;
 8002848:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	00000000 	.word	0x00000000
 8002858:	20000344 	.word	0x20000344
 800285c:	20000370 	.word	0x20000370

08002860 <Filter_Mod_Source_Decode>:

void Filter_Mod_Source_Decode(int data){
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]

    switch(data) {
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b03      	cmp	r3, #3
 800286c:	d014      	beq.n	8002898 <Filter_Mod_Source_Decode+0x38>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b03      	cmp	r3, #3
 8002872:	dc18      	bgt.n	80028a6 <Filter_Mod_Source_Decode+0x46>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d003      	beq.n	8002882 <Filter_Mod_Source_Decode+0x22>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d004      	beq.n	800288a <Filter_Mod_Source_Decode+0x2a>
        	SynthParameters.vcf_cv_sel = 0;
            break;
        default:
            // do nothing on invalid command

            break;
 8002880:	e011      	b.n	80028a6 <Filter_Mod_Source_Decode+0x46>
        	SynthParameters.vcf_cv_en = 0;
 8002882:	4b0c      	ldr	r3, [pc, #48]	@ (80028b4 <Filter_Mod_Source_Decode+0x54>)
 8002884:	2200      	movs	r2, #0
 8002886:	761a      	strb	r2, [r3, #24]
            break;
 8002888:	e00e      	b.n	80028a8 <Filter_Mod_Source_Decode+0x48>
        	SynthParameters.vcf_cv_en = 1;
 800288a:	4b0a      	ldr	r3, [pc, #40]	@ (80028b4 <Filter_Mod_Source_Decode+0x54>)
 800288c:	2201      	movs	r2, #1
 800288e:	761a      	strb	r2, [r3, #24]
        	SynthParameters.vcf_cv_sel = 1;
 8002890:	4b08      	ldr	r3, [pc, #32]	@ (80028b4 <Filter_Mod_Source_Decode+0x54>)
 8002892:	2201      	movs	r2, #1
 8002894:	765a      	strb	r2, [r3, #25]
            break;
 8002896:	e007      	b.n	80028a8 <Filter_Mod_Source_Decode+0x48>
        	SynthParameters.vcf_cv_en = 1;
 8002898:	4b06      	ldr	r3, [pc, #24]	@ (80028b4 <Filter_Mod_Source_Decode+0x54>)
 800289a:	2201      	movs	r2, #1
 800289c:	761a      	strb	r2, [r3, #24]
        	SynthParameters.vcf_cv_sel = 0;
 800289e:	4b05      	ldr	r3, [pc, #20]	@ (80028b4 <Filter_Mod_Source_Decode+0x54>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	765a      	strb	r2, [r3, #25]
            break;
 80028a4:	e000      	b.n	80028a8 <Filter_Mod_Source_Decode+0x48>
            break;
 80028a6:	bf00      	nop
    }

	return;
 80028a8:	bf00      	nop
}
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	20000344 	.word	0x20000344

080028b8 <Filter_Value_Query>:

void Filter_Value_Query(int data){
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]

	uint8_t return_data[3] = {'F', data , 0};
 80028c0:	2346      	movs	r3, #70	@ 0x46
 80028c2:	733b      	strb	r3, [r7, #12]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	737b      	strb	r3, [r7, #13]
 80028ca:	2300      	movs	r3, #0
 80028cc:	73bb      	strb	r3, [r7, #14]

    switch(data) {
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3b31      	subs	r3, #49	@ 0x31
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d81a      	bhi.n	800290c <Filter_Value_Query+0x54>
 80028d6:	a201      	add	r2, pc, #4	@ (adr r2, 80028dc <Filter_Value_Query+0x24>)
 80028d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028dc:	080028ed 	.word	0x080028ed
 80028e0:	080028f5 	.word	0x080028f5
 80028e4:	080028fd 	.word	0x080028fd
 80028e8:	08002905 	.word	0x08002905
        case '1': // filter cutoff
        	return_data[2] = SynthParameters.vcf_cutoff;
 80028ec:	4b13      	ldr	r3, [pc, #76]	@ (800293c <Filter_Value_Query+0x84>)
 80028ee:	7edb      	ldrb	r3, [r3, #27]
 80028f0:	73bb      	strb	r3, [r7, #14]
            break;
 80028f2:	e00c      	b.n	800290e <Filter_Value_Query+0x56>
        case '2': // filter resonance intensity
        	return_data[2] = SynthParameters.vcf_resonance;
 80028f4:	4b11      	ldr	r3, [pc, #68]	@ (800293c <Filter_Value_Query+0x84>)
 80028f6:	7f1b      	ldrb	r3, [r3, #28]
 80028f8:	73bb      	strb	r3, [r7, #14]
            break;
 80028fa:	e008      	b.n	800290e <Filter_Value_Query+0x56>
        case '3': // filter modulation intensity
        	return_data[2] = SynthParameters.vcf_cv_intensity;
 80028fc:	4b0f      	ldr	r3, [pc, #60]	@ (800293c <Filter_Value_Query+0x84>)
 80028fe:	7e9b      	ldrb	r3, [r3, #26]
 8002900:	73bb      	strb	r3, [r7, #14]
            break;
 8002902:	e004      	b.n	800290e <Filter_Value_Query+0x56>
        case '4': // filter modulation control
        	return_data[2] = SynthParameters.vcf_mod_source;
 8002904:	4b0d      	ldr	r3, [pc, #52]	@ (800293c <Filter_Value_Query+0x84>)
 8002906:	789b      	ldrb	r3, [r3, #2]
 8002908:	73bb      	strb	r3, [r7, #14]
            break;
 800290a:	e000      	b.n	800290e <Filter_Value_Query+0x56>
        default:  // do nothing on invalid command

            break;
 800290c:	bf00      	nop
    }

    CDC_Transmit_FS(return_data, 3); // transmit return message
 800290e:	f107 030c 	add.w	r3, r7, #12
 8002912:	2103      	movs	r1, #3
 8002914:	4618      	mov	r0, r3
 8002916:	f00c ff87 	bl	800f828 <CDC_Transmit_FS>

    if (sys.midi_tx_en == 1) { // send return message if enabled
 800291a:	4b09      	ldr	r3, [pc, #36]	@ (8002940 <Filter_Value_Query+0x88>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d108      	bne.n	8002934 <Filter_Value_Query+0x7c>
        HAL_UART_Transmit(&huart2, return_data, 3, 1000);
 8002922:	f107 010c 	add.w	r1, r7, #12
 8002926:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800292a:	2203      	movs	r2, #3
 800292c:	4805      	ldr	r0, [pc, #20]	@ (8002944 <Filter_Value_Query+0x8c>)
 800292e:	f007 fabf 	bl	8009eb0 <HAL_UART_Transmit>
    }

	return;
 8002932:	bf00      	nop
 8002934:	bf00      	nop
}
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	20000344 	.word	0x20000344
 8002940:	20000370 	.word	0x20000370
 8002944:	20000448 	.word	0x20000448

08002948 <Mixer_Command_Handler>:

// ===========================================================================================================
// M - mixer function

int Mixer_Command_Handler(int address, int data){
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 8002952:	2301      	movs	r3, #1
 8002954:	60fb      	str	r3, [r7, #12]

    switch(address) {
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3b31      	subs	r3, #49	@ 0x31
 800295a:	2b03      	cmp	r3, #3
 800295c:	d85c      	bhi.n	8002a18 <Mixer_Command_Handler+0xd0>
 800295e:	a201      	add	r2, pc, #4	@ (adr r2, 8002964 <Mixer_Command_Handler+0x1c>)
 8002960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002964:	08002975 	.word	0x08002975
 8002968:	0800299f 	.word	0x0800299f
 800296c:	080029c9 	.word	0x080029c9
 8002970:	080029ef 	.word	0x080029ef
        case '1': // DAC output level

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 8002974:	eddf 0a2b 	vldr	s1, [pc, #172]	@ 8002a24 <Mixer_Command_Handler+0xdc>
 8002978:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8002a24 <Mixer_Command_Handler+0xdc>
 800297c:	22ff      	movs	r2, #255	@ 0xff
 800297e:	6839      	ldr	r1, [r7, #0]
 8002980:	2000      	movs	r0, #0
 8002982:	f000 ff07 	bl	8003794 <Command_Error_Check>
 8002986:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d105      	bne.n	800299a <Mixer_Command_Handler+0x52>
                SynthParameters.dac_mixer_level = data;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	b2da      	uxtb	r2, r3
 8002992:	4b25      	ldr	r3, [pc, #148]	@ (8002a28 <Mixer_Command_Handler+0xe0>)
 8002994:	759a      	strb	r2, [r3, #22]
                Mixer_Digital_Pot_Control();
 8002996:	f000 fc69 	bl	800326c <Mixer_Digital_Pot_Control>
            }

        	return error_check;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	e03d      	b.n	8002a1a <Mixer_Command_Handler+0xd2>
        case '2': // filter output level

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 800299e:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8002a24 <Mixer_Command_Handler+0xdc>
 80029a2:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8002a24 <Mixer_Command_Handler+0xdc>
 80029a6:	22ff      	movs	r2, #255	@ 0xff
 80029a8:	6839      	ldr	r1, [r7, #0]
 80029aa:	2000      	movs	r0, #0
 80029ac:	f000 fef2 	bl	8003794 <Command_Error_Check>
 80029b0:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d105      	bne.n	80029c4 <Mixer_Command_Handler+0x7c>
                SynthParameters.filter_out_level = data;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002a28 <Mixer_Command_Handler+0xe0>)
 80029be:	75da      	strb	r2, [r3, #23]
                Mixer_Digital_Pot_Control();
 80029c0:	f000 fc54 	bl	800326c <Mixer_Digital_Pot_Control>
            }

        	return error_check;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	e028      	b.n	8002a1a <Mixer_Command_Handler+0xd2>
        case '3': // enable/disable MIDI velocity

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 80029c8:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8002a24 <Mixer_Command_Handler+0xdc>
 80029cc:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8002a24 <Mixer_Command_Handler+0xdc>
 80029d0:	2201      	movs	r2, #1
 80029d2:	6839      	ldr	r1, [r7, #0]
 80029d4:	2000      	movs	r0, #0
 80029d6:	f000 fedd 	bl	8003794 <Command_Error_Check>
 80029da:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d103      	bne.n	80029ea <Mixer_Command_Handler+0xa2>
            	sys.velocity_enable = data;
 80029e2:	4a12      	ldr	r2, [pc, #72]	@ (8002a2c <Mixer_Command_Handler+0xe4>)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            }

        	return error_check;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	e015      	b.n	8002a1a <Mixer_Command_Handler+0xd2>
        case '4': // read back setting value

        	error_check = Command_Error_Check(NUMBER_CHECK, data, 3, 0, 0);
 80029ee:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8002a24 <Mixer_Command_Handler+0xdc>
 80029f2:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8002a24 <Mixer_Command_Handler+0xdc>
 80029f6:	2203      	movs	r2, #3
 80029f8:	6839      	ldr	r1, [r7, #0]
 80029fa:	2002      	movs	r0, #2
 80029fc:	f000 feca 	bl	8003794 <Command_Error_Check>
 8002a00:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d105      	bne.n	8002a14 <Mixer_Command_Handler+0xcc>
            	Mixer_Value_Query(data);
 8002a08:	6838      	ldr	r0, [r7, #0]
 8002a0a:	f000 f811 	bl	8002a30 <Mixer_Value_Query>
                sys.value_returned = 1; // tell the serial handler a response has been sent
 8002a0e:	4b07      	ldr	r3, [pc, #28]	@ (8002a2c <Mixer_Command_Handler+0xe4>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	60da      	str	r2, [r3, #12]
            }

        	return error_check;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	e000      	b.n	8002a1a <Mixer_Command_Handler+0xd2>
        default:
            // do nothing on invalid command

        	return error_check;
 8002a18:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	00000000 	.word	0x00000000
 8002a28:	20000344 	.word	0x20000344
 8002a2c:	20000370 	.word	0x20000370

08002a30 <Mixer_Value_Query>:

void Mixer_Value_Query(int data){
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]

	uint8_t return_data[3] = {'M', data , 0};
 8002a38:	234d      	movs	r3, #77	@ 0x4d
 8002a3a:	733b      	strb	r3, [r7, #12]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	737b      	strb	r3, [r7, #13]
 8002a42:	2300      	movs	r3, #0
 8002a44:	73bb      	strb	r3, [r7, #14]

    switch(data) {
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b33      	cmp	r3, #51	@ 0x33
 8002a4a:	d011      	beq.n	8002a70 <Mixer_Value_Query+0x40>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b33      	cmp	r3, #51	@ 0x33
 8002a50:	dc14      	bgt.n	8002a7c <Mixer_Value_Query+0x4c>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b31      	cmp	r3, #49	@ 0x31
 8002a56:	d003      	beq.n	8002a60 <Mixer_Value_Query+0x30>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b32      	cmp	r3, #50	@ 0x32
 8002a5c:	d004      	beq.n	8002a68 <Mixer_Value_Query+0x38>
        case '3': // enable/disable MIDI velocity
        	return_data[2] = sys.velocity_enable;
            break;
        default:  // do nothing on invalid command

            break;
 8002a5e:	e00d      	b.n	8002a7c <Mixer_Value_Query+0x4c>
        	return_data[2] = SynthParameters.dac_mixer_level;
 8002a60:	4b12      	ldr	r3, [pc, #72]	@ (8002aac <Mixer_Value_Query+0x7c>)
 8002a62:	7d9b      	ldrb	r3, [r3, #22]
 8002a64:	73bb      	strb	r3, [r7, #14]
            break;
 8002a66:	e00a      	b.n	8002a7e <Mixer_Value_Query+0x4e>
        	return_data[2] = SynthParameters.filter_out_level;
 8002a68:	4b10      	ldr	r3, [pc, #64]	@ (8002aac <Mixer_Value_Query+0x7c>)
 8002a6a:	7ddb      	ldrb	r3, [r3, #23]
 8002a6c:	73bb      	strb	r3, [r7, #14]
            break;
 8002a6e:	e006      	b.n	8002a7e <Mixer_Value_Query+0x4e>
        	return_data[2] = sys.velocity_enable;
 8002a70:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab0 <Mixer_Value_Query+0x80>)
 8002a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	73bb      	strb	r3, [r7, #14]
            break;
 8002a7a:	e000      	b.n	8002a7e <Mixer_Value_Query+0x4e>
            break;
 8002a7c:	bf00      	nop
    }

    CDC_Transmit_FS(return_data, 3); // transmit return message
 8002a7e:	f107 030c 	add.w	r3, r7, #12
 8002a82:	2103      	movs	r1, #3
 8002a84:	4618      	mov	r0, r3
 8002a86:	f00c fecf 	bl	800f828 <CDC_Transmit_FS>

    if (sys.midi_tx_en == 1) { // send return message if enabled
 8002a8a:	4b09      	ldr	r3, [pc, #36]	@ (8002ab0 <Mixer_Value_Query+0x80>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d108      	bne.n	8002aa4 <Mixer_Value_Query+0x74>
        HAL_UART_Transmit(&huart2, return_data, 3, 1000);
 8002a92:	f107 010c 	add.w	r1, r7, #12
 8002a96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	4805      	ldr	r0, [pc, #20]	@ (8002ab4 <Mixer_Value_Query+0x84>)
 8002a9e:	f007 fa07 	bl	8009eb0 <HAL_UART_Transmit>
    }

	return;
 8002aa2:	bf00      	nop
 8002aa4:	bf00      	nop
}
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20000344 	.word	0x20000344
 8002ab0:	20000370 	.word	0x20000370
 8002ab4:	20000448 	.word	0x20000448

08002ab8 <LFO_Command_Handler>:

// ===========================================================================================================
// O - LFO functions

int LFO_Command_Handler(int address, int data){
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	60fb      	str	r3, [r7, #12]

    switch(address) {
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b33      	cmp	r3, #51	@ 0x33
 8002aca:	d038      	beq.n	8002b3e <LFO_Command_Handler+0x86>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b33      	cmp	r3, #51	@ 0x33
 8002ad0:	dc4a      	bgt.n	8002b68 <LFO_Command_Handler+0xb0>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b31      	cmp	r3, #49	@ 0x31
 8002ad6:	d003      	beq.n	8002ae0 <LFO_Command_Handler+0x28>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b32      	cmp	r3, #50	@ 0x32
 8002adc:	d015      	beq.n	8002b0a <LFO_Command_Handler+0x52>
 8002ade:	e043      	b.n	8002b68 <LFO_Command_Handler+0xb0>
        case '1': // LFO frequency/rate

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 8002ae0:	eddf 0a24 	vldr	s1, [pc, #144]	@ 8002b74 <LFO_Command_Handler+0xbc>
 8002ae4:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8002b74 <LFO_Command_Handler+0xbc>
 8002ae8:	22ff      	movs	r2, #255	@ 0xff
 8002aea:	6839      	ldr	r1, [r7, #0]
 8002aec:	2000      	movs	r0, #0
 8002aee:	f000 fe51 	bl	8003794 <Command_Error_Check>
 8002af2:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d105      	bne.n	8002b06 <LFO_Command_Handler+0x4e>
                SynthParameters.lfo_frequency = data;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	4b1e      	ldr	r3, [pc, #120]	@ (8002b78 <LFO_Command_Handler+0xc0>)
 8002b00:	77da      	strb	r2, [r3, #31]
                LFO_Digital_Pot_Control();
 8002b02:	f000 fcbd 	bl	8003480 <LFO_Digital_Pot_Control>
            }

        	return error_check;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	e02f      	b.n	8002b6a <LFO_Command_Handler+0xb2>
        case '2': // LFO output waveform

        	error_check = Command_Error_Check(OPTION_BOX_CHECK, data, 3, 0, 0);
 8002b0a:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 8002b74 <LFO_Command_Handler+0xbc>
 8002b0e:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8002b74 <LFO_Command_Handler+0xbc>
 8002b12:	2203      	movs	r2, #3
 8002b14:	6839      	ldr	r1, [r7, #0]
 8002b16:	2001      	movs	r0, #1
 8002b18:	f000 fe3c 	bl	8003794 <Command_Error_Check>
 8002b1c:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10a      	bne.n	8002b3a <LFO_Command_Handler+0x82>
                SynthParameters.lfo_waveform = data;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	4b13      	ldr	r3, [pc, #76]	@ (8002b78 <LFO_Command_Handler+0xc0>)
 8002b2a:	71da      	strb	r2, [r3, #7]
                LFO_Waveform_Decode(SynthParameters.lfo_waveform);
 8002b2c:	4b12      	ldr	r3, [pc, #72]	@ (8002b78 <LFO_Command_Handler+0xc0>)
 8002b2e:	79db      	ldrb	r3, [r3, #7]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f000 f825 	bl	8002b80 <LFO_Waveform_Decode>
                LFO_Output_Control();
 8002b36:	f000 fc73 	bl	8003420 <LFO_Output_Control>
            }

        	return error_check;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	e015      	b.n	8002b6a <LFO_Command_Handler+0xb2>
        case '3': // read back setting value

        	error_check = Command_Error_Check(NUMBER_CHECK, data, 2, 0, 0);
 8002b3e:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8002b74 <LFO_Command_Handler+0xbc>
 8002b42:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8002b74 <LFO_Command_Handler+0xbc>
 8002b46:	2202      	movs	r2, #2
 8002b48:	6839      	ldr	r1, [r7, #0]
 8002b4a:	2002      	movs	r0, #2
 8002b4c:	f000 fe22 	bl	8003794 <Command_Error_Check>
 8002b50:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d105      	bne.n	8002b64 <LFO_Command_Handler+0xac>
            	LFO_Value_Query(data);
 8002b58:	6838      	ldr	r0, [r7, #0]
 8002b5a:	f000 f83d 	bl	8002bd8 <LFO_Value_Query>
                sys.value_returned = 1; // tell the serial handler a response has been sent
 8002b5e:	4b07      	ldr	r3, [pc, #28]	@ (8002b7c <LFO_Command_Handler+0xc4>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	60da      	str	r2, [r3, #12]
            }

        	return error_check;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	e000      	b.n	8002b6a <LFO_Command_Handler+0xb2>
        default:
            // do nothing on invalid command

        	return error_check;
 8002b68:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	00000000 	.word	0x00000000
 8002b78:	20000344 	.word	0x20000344
 8002b7c:	20000370 	.word	0x20000370

08002b80 <LFO_Waveform_Decode>:

void LFO_Waveform_Decode(int data){
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]

    switch(data) {
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	d014      	beq.n	8002bb8 <LFO_Waveform_Decode+0x38>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b03      	cmp	r3, #3
 8002b92:	dc18      	bgt.n	8002bc6 <LFO_Waveform_Decode+0x46>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d003      	beq.n	8002ba2 <LFO_Waveform_Decode+0x22>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d004      	beq.n	8002baa <LFO_Waveform_Decode+0x2a>
        	SynthParameters.lfo_output_waveform = 0;
            break;
        default:
            // do nothing on invalid command

            break;
 8002ba0:	e011      	b.n	8002bc6 <LFO_Waveform_Decode+0x46>
        	SynthParameters.lfo_output_en = 0;
 8002ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd4 <LFO_Waveform_Decode+0x54>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	775a      	strb	r2, [r3, #29]
            break;
 8002ba8:	e00e      	b.n	8002bc8 <LFO_Waveform_Decode+0x48>
        	SynthParameters.lfo_output_en = 1;
 8002baa:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd4 <LFO_Waveform_Decode+0x54>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	775a      	strb	r2, [r3, #29]
        	SynthParameters.lfo_output_waveform = 1;
 8002bb0:	4b08      	ldr	r3, [pc, #32]	@ (8002bd4 <LFO_Waveform_Decode+0x54>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	779a      	strb	r2, [r3, #30]
            break;
 8002bb6:	e007      	b.n	8002bc8 <LFO_Waveform_Decode+0x48>
        	SynthParameters.lfo_output_en = 1;
 8002bb8:	4b06      	ldr	r3, [pc, #24]	@ (8002bd4 <LFO_Waveform_Decode+0x54>)
 8002bba:	2201      	movs	r2, #1
 8002bbc:	775a      	strb	r2, [r3, #29]
        	SynthParameters.lfo_output_waveform = 0;
 8002bbe:	4b05      	ldr	r3, [pc, #20]	@ (8002bd4 <LFO_Waveform_Decode+0x54>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	779a      	strb	r2, [r3, #30]
            break;
 8002bc4:	e000      	b.n	8002bc8 <LFO_Waveform_Decode+0x48>
            break;
 8002bc6:	bf00      	nop
    }

	return;
 8002bc8:	bf00      	nop
}
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	20000344 	.word	0x20000344

08002bd8 <LFO_Value_Query>:

void LFO_Value_Query(int data){
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]

	uint8_t return_data[3] = {'O', data , 0};
 8002be0:	234f      	movs	r3, #79	@ 0x4f
 8002be2:	733b      	strb	r3, [r7, #12]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	737b      	strb	r3, [r7, #13]
 8002bea:	2300      	movs	r3, #0
 8002bec:	73bb      	strb	r3, [r7, #14]

    switch(data) {
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b31      	cmp	r3, #49	@ 0x31
 8002bf2:	d003      	beq.n	8002bfc <LFO_Value_Query+0x24>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b32      	cmp	r3, #50	@ 0x32
 8002bf8:	d004      	beq.n	8002c04 <LFO_Value_Query+0x2c>
        case '2': // LFO output waveform
        	return_data[2] = SynthParameters.lfo_waveform;
            break;
        default:  // do nothing on invalid command

            break;
 8002bfa:	e007      	b.n	8002c0c <LFO_Value_Query+0x34>
        	return_data[2] = SynthParameters.lfo_frequency;
 8002bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8002c3c <LFO_Value_Query+0x64>)
 8002bfe:	7fdb      	ldrb	r3, [r3, #31]
 8002c00:	73bb      	strb	r3, [r7, #14]
            break;
 8002c02:	e003      	b.n	8002c0c <LFO_Value_Query+0x34>
        	return_data[2] = SynthParameters.lfo_waveform;
 8002c04:	4b0d      	ldr	r3, [pc, #52]	@ (8002c3c <LFO_Value_Query+0x64>)
 8002c06:	79db      	ldrb	r3, [r3, #7]
 8002c08:	73bb      	strb	r3, [r7, #14]
            break;
 8002c0a:	bf00      	nop
    }

    CDC_Transmit_FS(return_data, 3); // transmit return message
 8002c0c:	f107 030c 	add.w	r3, r7, #12
 8002c10:	2103      	movs	r1, #3
 8002c12:	4618      	mov	r0, r3
 8002c14:	f00c fe08 	bl	800f828 <CDC_Transmit_FS>

    if (sys.midi_tx_en == 1) { // send return message if enabled
 8002c18:	4b09      	ldr	r3, [pc, #36]	@ (8002c40 <LFO_Value_Query+0x68>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d108      	bne.n	8002c32 <LFO_Value_Query+0x5a>
        HAL_UART_Transmit(&huart2, return_data, 3, 1000);
 8002c20:	f107 010c 	add.w	r1, r7, #12
 8002c24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c28:	2203      	movs	r2, #3
 8002c2a:	4806      	ldr	r0, [pc, #24]	@ (8002c44 <LFO_Value_Query+0x6c>)
 8002c2c:	f007 f940 	bl	8009eb0 <HAL_UART_Transmit>
    }

	return;
 8002c30:	bf00      	nop
 8002c32:	bf00      	nop
}
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20000344 	.word	0x20000344
 8002c40:	20000370 	.word	0x20000370
 8002c44:	20000448 	.word	0x20000448

08002c48 <Preset_Command_Handler>:

// ===========================================================================================================
// P - preset function

int Preset_Command_Handler(int address, int data){
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 8002c52:	2301      	movs	r3, #1
 8002c54:	60fb      	str	r3, [r7, #12]

    switch(address) {
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3b31      	subs	r3, #49	@ 0x31
 8002c5a:	2b05      	cmp	r3, #5
 8002c5c:	d87c      	bhi.n	8002d58 <Preset_Command_Handler+0x110>
 8002c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c64 <Preset_Command_Handler+0x1c>)
 8002c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c64:	08002c7d 	.word	0x08002c7d
 8002c68:	08002ca5 	.word	0x08002ca5
 8002c6c:	08002cd3 	.word	0x08002cd3
 8002c70:	08002cfd 	.word	0x08002cfd
 8002c74:	08002d2b 	.word	0x08002d2b
 8002c78:	08002d43 	.word	0x08002d43
        case '1': // write protect enable/disable

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 8002c7c:	eddf 0a39 	vldr	s1, [pc, #228]	@ 8002d64 <Preset_Command_Handler+0x11c>
 8002c80:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 8002d64 <Preset_Command_Handler+0x11c>
 8002c84:	2201      	movs	r2, #1
 8002c86:	6839      	ldr	r1, [r7, #0]
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f000 fd83 	bl	8003794 <Command_Error_Check>
 8002c8e:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d104      	bne.n	8002ca0 <Preset_Command_Handler+0x58>
            	sys.write_protect = data;
 8002c96:	4a34      	ldr	r2, [pc, #208]	@ (8002d68 <Preset_Command_Handler+0x120>)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	61d3      	str	r3, [r2, #28]
                Write_Protect_Control();
 8002c9c:	f000 fcd6 	bl	800364c <Write_Protect_Control>
            }

        	return error_check;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	e05a      	b.n	8002d5a <Preset_Command_Handler+0x112>
        case '2': // save current settings to specified preset slot

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 4, 0, 0);
 8002ca4:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8002d64 <Preset_Command_Handler+0x11c>
 8002ca8:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8002d64 <Preset_Command_Handler+0x11c>
 8002cac:	2204      	movs	r2, #4
 8002cae:	6839      	ldr	r1, [r7, #0]
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	f000 fd6f 	bl	8003794 <Command_Error_Check>
 8002cb6:	60f8      	str	r0, [r7, #12]

        	if (sys.write_protect == 1) {
 8002cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8002d68 <Preset_Command_Handler+0x120>)
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d102      	bne.n	8002cc6 <Preset_Command_Handler+0x7e>
        	    error_check = 1;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	e003      	b.n	8002cce <Preset_Command_Handler+0x86>
        	}
        	else {
        		error_check = Preset_Write(data);
 8002cc6:	6838      	ldr	r0, [r7, #0]
 8002cc8:	f7ff f88c 	bl	8001de4 <Preset_Write>
 8002ccc:	60f8      	str	r0, [r7, #12]
        	}

        	return error_check;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	e043      	b.n	8002d5a <Preset_Command_Handler+0x112>
        case '3': // read and load specified preset slot

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 4, 0, 0);
 8002cd2:	eddf 0a24 	vldr	s1, [pc, #144]	@ 8002d64 <Preset_Command_Handler+0x11c>
 8002cd6:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8002d64 <Preset_Command_Handler+0x11c>
 8002cda:	2204      	movs	r2, #4
 8002cdc:	6839      	ldr	r1, [r7, #0]
 8002cde:	2000      	movs	r0, #0
 8002ce0:	f000 fd58 	bl	8003794 <Command_Error_Check>
 8002ce4:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d105      	bne.n	8002cf8 <Preset_Command_Handler+0xb0>
            	error_check = Preset_Read(data);
 8002cec:	6838      	ldr	r0, [r7, #0]
 8002cee:	f7ff f8f3 	bl	8001ed8 <Preset_Read>
 8002cf2:	60f8      	str	r0, [r7, #12]
            	Preset_Load();
 8002cf4:	f7ff f85d 	bl	8001db2 <Preset_Load>
            }

        	return error_check;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	e02e      	b.n	8002d5a <Preset_Command_Handler+0x112>
        case '4': // initialize specified preset slot

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 4, 0, 0);
 8002cfc:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8002d64 <Preset_Command_Handler+0x11c>
 8002d00:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8002d64 <Preset_Command_Handler+0x11c>
 8002d04:	2204      	movs	r2, #4
 8002d06:	6839      	ldr	r1, [r7, #0]
 8002d08:	2000      	movs	r0, #0
 8002d0a:	f000 fd43 	bl	8003794 <Command_Error_Check>
 8002d0e:	60f8      	str	r0, [r7, #12]

        	if (sys.write_protect == 1) {
 8002d10:	4b15      	ldr	r3, [pc, #84]	@ (8002d68 <Preset_Command_Handler+0x120>)
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d102      	bne.n	8002d1e <Preset_Command_Handler+0xd6>
        	    error_check = 1;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	e003      	b.n	8002d26 <Preset_Command_Handler+0xde>
        	}
        	else{
        		error_check = Preset_Init(data);
 8002d1e:	6838      	ldr	r0, [r7, #0]
 8002d20:	f7fe ffd6 	bl	8001cd0 <Preset_Init>
 8002d24:	60f8      	str	r0, [r7, #12]
        	}

        	return error_check;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	e017      	b.n	8002d5a <Preset_Command_Handler+0x112>
        case '5': // clear (initialize) all stored presets

        	if (sys.write_protect == 1) {
 8002d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8002d68 <Preset_Command_Handler+0x120>)
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d102      	bne.n	8002d38 <Preset_Command_Handler+0xf0>
        	    error_check = 1;
 8002d32:	2301      	movs	r3, #1
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	e002      	b.n	8002d3e <Preset_Command_Handler+0xf6>
        	}
        	else{
        		error_check = Preset_Clear();
 8002d38:	f7ff f822 	bl	8001d80 <Preset_Clear>
 8002d3c:	60f8      	str	r0, [r7, #12]
        	}

        	return error_check;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	e00b      	b.n	8002d5a <Preset_Command_Handler+0x112>
        case '6': // readback current synth and system settings

        	error_check = Synth_Settings_Readback();
 8002d42:	f7fe ff79 	bl	8001c38 <Synth_Settings_Readback>
 8002d46:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d102      	bne.n	8002d54 <Preset_Command_Handler+0x10c>
                sys.value_returned = 1; // tell the serial handler a response has been sent
 8002d4e:	4b06      	ldr	r3, [pc, #24]	@ (8002d68 <Preset_Command_Handler+0x120>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	60da      	str	r2, [r3, #12]
            }

        	return error_check;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	e000      	b.n	8002d5a <Preset_Command_Handler+0x112>
        default:
            // do nothing on invalid command

        	//Command_Error();

        	return error_check;
 8002d58:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	00000000 	.word	0x00000000
 8002d68:	20000370 	.word	0x20000370

08002d6c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002d70:	4b1b      	ldr	r3, [pc, #108]	@ (8002de0 <MX_SPI3_Init+0x74>)
 8002d72:	4a1c      	ldr	r2, [pc, #112]	@ (8002de4 <MX_SPI3_Init+0x78>)
 8002d74:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002d76:	4b1a      	ldr	r3, [pc, #104]	@ (8002de0 <MX_SPI3_Init+0x74>)
 8002d78:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002d7c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002d7e:	4b18      	ldr	r3, [pc, #96]	@ (8002de0 <MX_SPI3_Init+0x74>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d84:	4b16      	ldr	r3, [pc, #88]	@ (8002de0 <MX_SPI3_Init+0x74>)
 8002d86:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002d8a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d8c:	4b14      	ldr	r3, [pc, #80]	@ (8002de0 <MX_SPI3_Init+0x74>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d92:	4b13      	ldr	r3, [pc, #76]	@ (8002de0 <MX_SPI3_Init+0x74>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002d98:	4b11      	ldr	r3, [pc, #68]	@ (8002de0 <MX_SPI3_Init+0x74>)
 8002d9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d9e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002da0:	4b0f      	ldr	r3, [pc, #60]	@ (8002de0 <MX_SPI3_Init+0x74>)
 8002da2:	2228      	movs	r2, #40	@ 0x28
 8002da4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002da6:	4b0e      	ldr	r3, [pc, #56]	@ (8002de0 <MX_SPI3_Init+0x74>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002dac:	4b0c      	ldr	r3, [pc, #48]	@ (8002de0 <MX_SPI3_Init+0x74>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002db2:	4b0b      	ldr	r3, [pc, #44]	@ (8002de0 <MX_SPI3_Init+0x74>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002db8:	4b09      	ldr	r3, [pc, #36]	@ (8002de0 <MX_SPI3_Init+0x74>)
 8002dba:	2207      	movs	r2, #7
 8002dbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002dbe:	4b08      	ldr	r3, [pc, #32]	@ (8002de0 <MX_SPI3_Init+0x74>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002dc4:	4b06      	ldr	r3, [pc, #24]	@ (8002de0 <MX_SPI3_Init+0x74>)
 8002dc6:	2208      	movs	r2, #8
 8002dc8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002dca:	4805      	ldr	r0, [pc, #20]	@ (8002de0 <MX_SPI3_Init+0x74>)
 8002dcc:	f006 f8ae 	bl	8008f2c <HAL_SPI_Init>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002dd6:	f7fe fb06 	bl	80013e6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002dda:	bf00      	nop
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	200002e0 	.word	0x200002e0
 8002de4:	40003c00 	.word	0x40003c00

08002de8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08a      	sub	sp, #40	@ 0x28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df0:	f107 0314 	add.w	r3, r7, #20
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a17      	ldr	r2, [pc, #92]	@ (8002e64 <HAL_SPI_MspInit+0x7c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d128      	bne.n	8002e5c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002e0a:	4b17      	ldr	r3, [pc, #92]	@ (8002e68 <HAL_SPI_MspInit+0x80>)
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0e:	4a16      	ldr	r2, [pc, #88]	@ (8002e68 <HAL_SPI_MspInit+0x80>)
 8002e10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e14:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e16:	4b14      	ldr	r3, [pc, #80]	@ (8002e68 <HAL_SPI_MspInit+0x80>)
 8002e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e22:	4b11      	ldr	r3, [pc, #68]	@ (8002e68 <HAL_SPI_MspInit+0x80>)
 8002e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e26:	4a10      	ldr	r2, [pc, #64]	@ (8002e68 <HAL_SPI_MspInit+0x80>)
 8002e28:	f043 0304 	orr.w	r3, r3, #4
 8002e2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e68 <HAL_SPI_MspInit+0x80>)
 8002e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002e3a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e40:	2302      	movs	r3, #2
 8002e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002e4c:	2306      	movs	r3, #6
 8002e4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e50:	f107 0314 	add.w	r3, r7, #20
 8002e54:	4619      	mov	r1, r3
 8002e56:	4805      	ldr	r0, [pc, #20]	@ (8002e6c <HAL_SPI_MspInit+0x84>)
 8002e58:	f001 fc58 	bl	800470c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	3728      	adds	r7, #40	@ 0x28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40003c00 	.word	0x40003c00
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	48000800 	.word	0x48000800

08002e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e76:	4b0f      	ldr	r3, [pc, #60]	@ (8002eb4 <HAL_MspInit+0x44>)
 8002e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e7a:	4a0e      	ldr	r2, [pc, #56]	@ (8002eb4 <HAL_MspInit+0x44>)
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e82:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb4 <HAL_MspInit+0x44>)
 8002e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	607b      	str	r3, [r7, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e8e:	4b09      	ldr	r3, [pc, #36]	@ (8002eb4 <HAL_MspInit+0x44>)
 8002e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e92:	4a08      	ldr	r2, [pc, #32]	@ (8002eb4 <HAL_MspInit+0x44>)
 8002e94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e98:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e9a:	4b06      	ldr	r3, [pc, #24]	@ (8002eb4 <HAL_MspInit+0x44>)
 8002e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea2:	603b      	str	r3, [r7, #0]
 8002ea4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002ea6:	f004 fbb5 	bl	8007614 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40021000 	.word	0x40021000

08002eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ebc:	bf00      	nop
 8002ebe:	e7fd      	b.n	8002ebc <NMI_Handler+0x4>

08002ec0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ec4:	bf00      	nop
 8002ec6:	e7fd      	b.n	8002ec4 <HardFault_Handler+0x4>

08002ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ecc:	bf00      	nop
 8002ece:	e7fd      	b.n	8002ecc <MemManage_Handler+0x4>

08002ed0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ed4:	bf00      	nop
 8002ed6:	e7fd      	b.n	8002ed4 <BusFault_Handler+0x4>

08002ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002edc:	bf00      	nop
 8002ede:	e7fd      	b.n	8002edc <UsageFault_Handler+0x4>

08002ee0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ee4:	bf00      	nop
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f00:	bf00      	nop
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f0e:	f001 f833 	bl	8003f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f12:	bf00      	nop
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002f1c:	4802      	ldr	r0, [pc, #8]	@ (8002f28 <DMA1_Channel1_IRQHandler+0x10>)
 8002f1e:	f001 fae3 	bl	80044e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002f22:	bf00      	nop
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20000280 	.word	0x20000280

08002f2c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002f30:	4802      	ldr	r0, [pc, #8]	@ (8002f3c <USB_LP_IRQHandler+0x10>)
 8002f32:	f002 feb9 	bl	8005ca8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002f36:	bf00      	nop
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	200019b4 	.word	0x200019b4

08002f40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f44:	4802      	ldr	r0, [pc, #8]	@ (8002f50 <USART2_IRQHandler+0x10>)
 8002f46:	f007 f88d 	bl	800a064 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f4a:	bf00      	nop
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	20000448 	.word	0x20000448

08002f54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f58:	4802      	ldr	r0, [pc, #8]	@ (8002f64 <TIM6_DAC_IRQHandler+0x10>)
 8002f5a:	f006 fc64 	bl	8009826 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	200003fc 	.word	0x200003fc

08002f68 <Digital_Pot_Wiper_Set>:

extern System sys;

Synth SynthParameters;

void Digital_Pot_Wiper_Set(int pot_address, int wiper_code, int invert){
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
	uint8_t spi_buf[1];
	GPIO_TypeDef* CSn_PORT;
	uint16_t CSn_PIN;

	//if invert bit is set, the command value is inverted
	spi_buf[0] = invert ? ~(wiper_code) : wiper_code;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d004      	beq.n	8002f84 <Digital_Pot_Wiper_Set+0x1c>
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	e001      	b.n	8002f88 <Digital_Pot_Wiper_Set+0x20>
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	743b      	strb	r3, [r7, #16]

    switch(pot_address) {
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2b0a      	cmp	r3, #10
 8002f8e:	d854      	bhi.n	800303a <Digital_Pot_Wiper_Set+0xd2>
 8002f90:	a201      	add	r2, pc, #4	@ (adr r2, 8002f98 <Digital_Pot_Wiper_Set+0x30>)
 8002f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f96:	bf00      	nop
 8002f98:	08002fc5 	.word	0x08002fc5
 8002f9c:	08002fd1 	.word	0x08002fd1
 8002fa0:	08002fdb 	.word	0x08002fdb
 8002fa4:	08002fe5 	.word	0x08002fe5
 8002fa8:	08002ff1 	.word	0x08002ff1
 8002fac:	08002ffb 	.word	0x08002ffb
 8002fb0:	08003005 	.word	0x08003005
 8002fb4:	0800300f 	.word	0x0800300f
 8002fb8:	0800301b 	.word	0x0800301b
 8002fbc:	08003027 	.word	0x08003027
 8002fc0:	08003031 	.word	0x08003031
        case 0:
            CSn_PORT = CS0_PORT;
 8002fc4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002fc8:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS0_PIN;
 8002fca:	2320      	movs	r3, #32
 8002fcc:	827b      	strh	r3, [r7, #18]
            break;
 8002fce:	e035      	b.n	800303c <Digital_Pot_Wiper_Set+0xd4>
        case 1:
            CSn_PORT = CS1_PORT;
 8002fd0:	4b26      	ldr	r3, [pc, #152]	@ (800306c <Digital_Pot_Wiper_Set+0x104>)
 8002fd2:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS1_PIN;
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	827b      	strh	r3, [r7, #18]
            break;
 8002fd8:	e030      	b.n	800303c <Digital_Pot_Wiper_Set+0xd4>
        case 2:
            CSn_PORT = CS2_PORT;
 8002fda:	4b25      	ldr	r3, [pc, #148]	@ (8003070 <Digital_Pot_Wiper_Set+0x108>)
 8002fdc:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS2_PIN;
 8002fde:	2304      	movs	r3, #4
 8002fe0:	827b      	strh	r3, [r7, #18]
            break;
 8002fe2:	e02b      	b.n	800303c <Digital_Pot_Wiper_Set+0xd4>
        case 3:
            CSn_PORT = CS3_PORT;
 8002fe4:	4b21      	ldr	r3, [pc, #132]	@ (800306c <Digital_Pot_Wiper_Set+0x104>)
 8002fe6:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS3_PIN;
 8002fe8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fec:	827b      	strh	r3, [r7, #18]
            break;
 8002fee:	e025      	b.n	800303c <Digital_Pot_Wiper_Set+0xd4>
        case 4:
            CSn_PORT = CS4_PORT;
 8002ff0:	4b1e      	ldr	r3, [pc, #120]	@ (800306c <Digital_Pot_Wiper_Set+0x104>)
 8002ff2:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS4_PIN;
 8002ff4:	2340      	movs	r3, #64	@ 0x40
 8002ff6:	827b      	strh	r3, [r7, #18]
            break;
 8002ff8:	e020      	b.n	800303c <Digital_Pot_Wiper_Set+0xd4>
        case 5:
            CSn_PORT = CS5_PORT;
 8002ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8003074 <Digital_Pot_Wiper_Set+0x10c>)
 8002ffc:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS5_PIN;
 8002ffe:	2320      	movs	r3, #32
 8003000:	827b      	strh	r3, [r7, #18]
            break;
 8003002:	e01b      	b.n	800303c <Digital_Pot_Wiper_Set+0xd4>
        case 6:
            CSn_PORT = CS6_PORT;
 8003004:	4b19      	ldr	r3, [pc, #100]	@ (800306c <Digital_Pot_Wiper_Set+0x104>)
 8003006:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS6_PIN;
 8003008:	2380      	movs	r3, #128	@ 0x80
 800300a:	827b      	strh	r3, [r7, #18]
            break;
 800300c:	e016      	b.n	800303c <Digital_Pot_Wiper_Set+0xd4>
        case 7:
            CSn_PORT = CS7_PORT;
 800300e:	4b19      	ldr	r3, [pc, #100]	@ (8003074 <Digital_Pot_Wiper_Set+0x10c>)
 8003010:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS7_PIN;
 8003012:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003016:	827b      	strh	r3, [r7, #18]
            break;
 8003018:	e010      	b.n	800303c <Digital_Pot_Wiper_Set+0xd4>
        case 8:
            CSn_PORT = CS8_PORT;
 800301a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800301e:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS8_PIN;
 8003020:	2380      	movs	r3, #128	@ 0x80
 8003022:	827b      	strh	r3, [r7, #18]
            break;
 8003024:	e00a      	b.n	800303c <Digital_Pot_Wiper_Set+0xd4>
        case 9:
            CSn_PORT = CS9_PORT;
 8003026:	4b13      	ldr	r3, [pc, #76]	@ (8003074 <Digital_Pot_Wiper_Set+0x10c>)
 8003028:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS9_PIN;
 800302a:	2310      	movs	r3, #16
 800302c:	827b      	strh	r3, [r7, #18]
            break;
 800302e:	e005      	b.n	800303c <Digital_Pot_Wiper_Set+0xd4>
        case 10:
            CSn_PORT = CS10_PORT;
 8003030:	4b0e      	ldr	r3, [pc, #56]	@ (800306c <Digital_Pot_Wiper_Set+0x104>)
 8003032:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS10_PIN;
 8003034:	2301      	movs	r3, #1
 8003036:	827b      	strh	r3, [r7, #18]
            break;
 8003038:	e000      	b.n	800303c <Digital_Pot_Wiper_Set+0xd4>
        default:
            // do nothing
            break;
 800303a:	bf00      	nop
    }

	//HAL_GPIO_WritePin(TP0_PORT, TP0_PIN, RESET); // test point
	HAL_GPIO_WritePin(CSn_PORT, CSn_PIN, RESET);
 800303c:	8a7b      	ldrh	r3, [r7, #18]
 800303e:	2200      	movs	r2, #0
 8003040:	4619      	mov	r1, r3
 8003042:	6978      	ldr	r0, [r7, #20]
 8003044:	f001 fce4 	bl	8004a10 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, (uint8_t*)spi_buf, 1, 10);
 8003048:	f107 0110 	add.w	r1, r7, #16
 800304c:	230a      	movs	r3, #10
 800304e:	2201      	movs	r2, #1
 8003050:	4809      	ldr	r0, [pc, #36]	@ (8003078 <Digital_Pot_Wiper_Set+0x110>)
 8003052:	f006 f816 	bl	8009082 <HAL_SPI_Transmit>

	//HAL_GPIO_WritePin(TP0_PORT, TP0_PIN, SET); // test point
	HAL_GPIO_WritePin(CSn_PORT, CSn_PIN, SET);
 8003056:	8a7b      	ldrh	r3, [r7, #18]
 8003058:	2201      	movs	r2, #1
 800305a:	4619      	mov	r1, r3
 800305c:	6978      	ldr	r0, [r7, #20]
 800305e:	f001 fcd7 	bl	8004a10 <HAL_GPIO_WritePin>

	return;
 8003062:	bf00      	nop
}
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	48000400 	.word	0x48000400
 8003070:	48000c00 	.word	0x48000c00
 8003074:	48000800 	.word	0x48000800
 8003078:	200002e0 	.word	0x200002e0

0800307c <Synth_Reset_Initialize>:

void Synth_Reset_Initialize(){
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TP0_PORT, TP0_PIN, SET); // test point
 8003080:	2201      	movs	r2, #1
 8003082:	2120      	movs	r1, #32
 8003084:	4820      	ldr	r0, [pc, #128]	@ (8003108 <Synth_Reset_Initialize+0x8c>)
 8003086:	f001 fcc3 	bl	8004a10 <HAL_GPIO_WritePin>

	// initialize all chip select lines
	HAL_GPIO_WritePin(CS0_PORT,  CS0_PIN,  SET);
 800308a:	2201      	movs	r2, #1
 800308c:	2120      	movs	r1, #32
 800308e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003092:	f001 fcbd 	bl	8004a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS1_PORT,  CS1_PIN,  SET);
 8003096:	2201      	movs	r2, #1
 8003098:	2102      	movs	r1, #2
 800309a:	481b      	ldr	r0, [pc, #108]	@ (8003108 <Synth_Reset_Initialize+0x8c>)
 800309c:	f001 fcb8 	bl	8004a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS2_PORT,  CS2_PIN,  SET);
 80030a0:	2201      	movs	r2, #1
 80030a2:	2104      	movs	r1, #4
 80030a4:	4819      	ldr	r0, [pc, #100]	@ (800310c <Synth_Reset_Initialize+0x90>)
 80030a6:	f001 fcb3 	bl	8004a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS3_PORT,  CS3_PIN,  SET);
 80030aa:	2201      	movs	r2, #1
 80030ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80030b0:	4815      	ldr	r0, [pc, #84]	@ (8003108 <Synth_Reset_Initialize+0x8c>)
 80030b2:	f001 fcad 	bl	8004a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS4_PORT,  CS4_PIN,  SET);
 80030b6:	2201      	movs	r2, #1
 80030b8:	2140      	movs	r1, #64	@ 0x40
 80030ba:	4813      	ldr	r0, [pc, #76]	@ (8003108 <Synth_Reset_Initialize+0x8c>)
 80030bc:	f001 fca8 	bl	8004a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS5_PORT,  CS5_PIN,  SET);
 80030c0:	2201      	movs	r2, #1
 80030c2:	2120      	movs	r1, #32
 80030c4:	4812      	ldr	r0, [pc, #72]	@ (8003110 <Synth_Reset_Initialize+0x94>)
 80030c6:	f001 fca3 	bl	8004a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS6_PORT,  CS6_PIN,  SET);
 80030ca:	2201      	movs	r2, #1
 80030cc:	2180      	movs	r1, #128	@ 0x80
 80030ce:	480e      	ldr	r0, [pc, #56]	@ (8003108 <Synth_Reset_Initialize+0x8c>)
 80030d0:	f001 fc9e 	bl	8004a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS7_PORT,  CS7_PIN,  SET);
 80030d4:	2201      	movs	r2, #1
 80030d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80030da:	480d      	ldr	r0, [pc, #52]	@ (8003110 <Synth_Reset_Initialize+0x94>)
 80030dc:	f001 fc98 	bl	8004a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS8_PORT,  CS8_PIN,  SET);
 80030e0:	2201      	movs	r2, #1
 80030e2:	2180      	movs	r1, #128	@ 0x80
 80030e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030e8:	f001 fc92 	bl	8004a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS9_PORT,  CS9_PIN,  SET);
 80030ec:	2201      	movs	r2, #1
 80030ee:	2110      	movs	r1, #16
 80030f0:	4807      	ldr	r0, [pc, #28]	@ (8003110 <Synth_Reset_Initialize+0x94>)
 80030f2:	f001 fc8d 	bl	8004a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS10_PORT, CS10_PIN, SET);
 80030f6:	2201      	movs	r2, #1
 80030f8:	2101      	movs	r1, #1
 80030fa:	4803      	ldr	r0, [pc, #12]	@ (8003108 <Synth_Reset_Initialize+0x8c>)
 80030fc:	f001 fc88 	bl	8004a10 <HAL_GPIO_WritePin>

	Synth_Initialize_Preset();
 8003100:	f000 f808 	bl	8003114 <Synth_Initialize_Preset>

	return;
 8003104:	bf00      	nop
}
 8003106:	bd80      	pop	{r7, pc}
 8003108:	48000400 	.word	0x48000400
 800310c:	48000c00 	.word	0x48000c00
 8003110:	48000800 	.word	0x48000800

08003114 <Synth_Initialize_Preset>:

int Synth_Initialize_Preset(){
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0

	// system settings
	SynthParameters.vca_mod_source      = VCA_MOD_SOURCE_DEFAULT;
 8003118:	4b53      	ldr	r3, [pc, #332]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 800311a:	2201      	movs	r2, #1
 800311c:	701a      	strb	r2, [r3, #0]
	SynthParameters.vca_bypass          = VCA_BYPASS_DEFAULT;
 800311e:	4b52      	ldr	r3, [pc, #328]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 8003120:	2201      	movs	r2, #1
 8003122:	705a      	strb	r2, [r3, #1]
	SynthParameters.vcf_mod_source      = VCF_MOD_SOURCE_DEFAULT;
 8003124:	4b50      	ldr	r3, [pc, #320]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 8003126:	2201      	movs	r2, #1
 8003128:	709a      	strb	r2, [r3, #2]
	SynthParameters.fm1_enable          = FM1_ENABLE_DEFAULT;
 800312a:	4b4f      	ldr	r3, [pc, #316]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 800312c:	2200      	movs	r2, #0
 800312e:	70da      	strb	r2, [r3, #3]
	SynthParameters.fm2_enable          = FM2_ENABLE_DEFAULT;
 8003130:	4b4d      	ldr	r3, [pc, #308]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 8003132:	2200      	movs	r2, #0
 8003134:	711a      	strb	r2, [r3, #4]
	SynthParameters.env_invert_mode     = ENV_INVERT_MODE_DEFAULT;
 8003136:	4b4c      	ldr	r3, [pc, #304]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 8003138:	2200      	movs	r2, #0
 800313a:	715a      	strb	r2, [r3, #5]
	SynthParameters.env_loop_mode       = ENV_LOOP_MODE_DEFAULT;
 800313c:	4b4a      	ldr	r3, [pc, #296]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 800313e:	2200      	movs	r2, #0
 8003140:	719a      	strb	r2, [r3, #6]
	SynthParameters.lfo_waveform        = LFO_WAVEFORM_DEFAULT;
 8003142:	4b49      	ldr	r3, [pc, #292]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 8003144:	2201      	movs	r2, #1
 8003146:	71da      	strb	r2, [r3, #7]

	// waveform synthesis settings
	SynthParameters.oscillator1         = OSCILLATOR1_DEFAULT;
 8003148:	4b47      	ldr	r3, [pc, #284]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 800314a:	2204      	movs	r2, #4
 800314c:	721a      	strb	r2, [r3, #8]
	SynthParameters.oscillator2         = OSCILLATOR2_DEFAULT;
 800314e:	4b46      	ldr	r3, [pc, #280]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 8003150:	2204      	movs	r2, #4
 8003152:	725a      	strb	r2, [r3, #9]
	SynthParameters.note_offset1        = NOTE_OFFSET1_DEFAULT;
 8003154:	4b44      	ldr	r3, [pc, #272]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 8003156:	220c      	movs	r2, #12
 8003158:	729a      	strb	r2, [r3, #10]
	SynthParameters.note_offset2        = NOTE_OFFSET2_DEFAULT;
 800315a:	4b43      	ldr	r3, [pc, #268]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 800315c:	220c      	movs	r2, #12
 800315e:	72da      	strb	r2, [r3, #11]
	SynthParameters.detune_osc1         = DETUNE_OSC1_DEFAULT;
 8003160:	4b41      	ldr	r3, [pc, #260]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 8003162:	2264      	movs	r2, #100	@ 0x64
 8003164:	731a      	strb	r2, [r3, #12]
	SynthParameters.detune_osc2         = DETUNE_OSC2_DEFAULT;
 8003166:	4b40      	ldr	r3, [pc, #256]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 8003168:	2264      	movs	r2, #100	@ 0x64
 800316a:	735a      	strb	r2, [r3, #13]
	SynthParameters.fm_intensity1       = FM_INTENSITY1_DEFAULT;
 800316c:	4b3e      	ldr	r3, [pc, #248]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 800316e:	227f      	movs	r2, #127	@ 0x7f
 8003170:	739a      	strb	r2, [r3, #14]
	SynthParameters.fm_intensity2       = FM_INTENSITY2_DEFAULT;
 8003172:	4b3d      	ldr	r3, [pc, #244]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 8003174:	227f      	movs	r2, #127	@ 0x7f
 8003176:	73da      	strb	r2, [r3, #15]
	SynthParameters.fm_harmonic1        = FM_HARMONIC1_DEFAULT;
 8003178:	4b3b      	ldr	r3, [pc, #236]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 800317a:	227f      	movs	r2, #127	@ 0x7f
 800317c:	741a      	strb	r2, [r3, #16]
	SynthParameters.fm_harmonic2        = FM_HARMONIC2_DEFAULT;
 800317e:	4b3a      	ldr	r3, [pc, #232]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 8003180:	227f      	movs	r2, #127	@ 0x7f
 8003182:	745a      	strb	r2, [r3, #17]
	SynthParameters.duty_cycle1         = DUTY_CYCLE1_DEFAULT;
 8003184:	4b38      	ldr	r3, [pc, #224]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 8003186:	227f      	movs	r2, #127	@ 0x7f
 8003188:	749a      	strb	r2, [r3, #18]
	SynthParameters.duty_cycle2         = DUTY_CYCLE2_DEFAULT;
 800318a:	4b37      	ldr	r3, [pc, #220]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 800318c:	227f      	movs	r2, #127	@ 0x7f
 800318e:	74da      	strb	r2, [r3, #19]
	SynthParameters.volume_osc1         = VOLUME_OSC1_DEFAULT;
 8003190:	4b35      	ldr	r3, [pc, #212]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 8003192:	2264      	movs	r2, #100	@ 0x64
 8003194:	751a      	strb	r2, [r3, #20]
	SynthParameters.volume_osc2         = VOLUME_OSC2_DEFAULT;
 8003196:	4b34      	ldr	r3, [pc, #208]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 8003198:	2264      	movs	r2, #100	@ 0x64
 800319a:	755a      	strb	r2, [r3, #21]

	// mixer output level settings
	SynthParameters.dac_mixer_level     = DAC_MIXER_LEVEL_DEFAULT;
 800319c:	4b32      	ldr	r3, [pc, #200]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 800319e:	227f      	movs	r2, #127	@ 0x7f
 80031a0:	759a      	strb	r2, [r3, #22]
	SynthParameters.filter_out_level    = FILTER_OUT_LEVEL_DEFAULT;
 80031a2:	4b31      	ldr	r3, [pc, #196]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 80031a4:	227f      	movs	r2, #127	@ 0x7f
 80031a6:	75da      	strb	r2, [r3, #23]

	// filter modulation source settings
	SynthParameters.vcf_cv_en           = VCF_CV_EN_DEFAULT;
 80031a8:	4b2f      	ldr	r3, [pc, #188]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	761a      	strb	r2, [r3, #24]
	SynthParameters.vcf_cv_sel          = VCF_CV_SEL_DEFAULT;
 80031ae:	4b2e      	ldr	r3, [pc, #184]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	765a      	strb	r2, [r3, #25]

	// filter digital pot settings
	SynthParameters.vcf_cv_intensity    = VCF_CV_INTENSITY_DEFAULT;
 80031b4:	4b2c      	ldr	r3, [pc, #176]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 80031b6:	227f      	movs	r2, #127	@ 0x7f
 80031b8:	769a      	strb	r2, [r3, #26]
	SynthParameters.vcf_cutoff          = VCF_CUTOFF_DEFAULT;
 80031ba:	4b2b      	ldr	r3, [pc, #172]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 80031bc:	227f      	movs	r2, #127	@ 0x7f
 80031be:	76da      	strb	r2, [r3, #27]
	SynthParameters.vcf_resonance       = VCF_RESONANCE_DEFAULT;
 80031c0:	4b29      	ldr	r3, [pc, #164]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 80031c2:	227f      	movs	r2, #127	@ 0x7f
 80031c4:	771a      	strb	r2, [r3, #28]

	// LFO output settings
	SynthParameters.lfo_output_en       = LFO_OUTPUT_EN_DEFAULT;
 80031c6:	4b28      	ldr	r3, [pc, #160]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	775a      	strb	r2, [r3, #29]
	SynthParameters.lfo_output_waveform = LFO_OUTPUT_WAVEFORM_DEFAULT;
 80031cc:	4b26      	ldr	r3, [pc, #152]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	779a      	strb	r2, [r3, #30]

	// LFO output frequency setting
	SynthParameters.lfo_frequency       = LFO_FREQUENCY_DEFAULT;
 80031d2:	4b25      	ldr	r3, [pc, #148]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 80031d4:	227f      	movs	r2, #127	@ 0x7f
 80031d6:	77da      	strb	r2, [r3, #31]

	// VCA modulation source settings
	SynthParameters.vca_cv_en           = VCA_CV_EN_DEFAULT;
 80031d8:	4b23      	ldr	r3, [pc, #140]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2020 	strb.w	r2, [r3, #32]
	SynthParameters.vca_cv_sel          = VCA_CV_SEL_DEFAULT;
 80031e0:	4b21      	ldr	r3, [pc, #132]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	// VCA output enable/bypass settings
	SynthParameters.vca_output_en       = VCA_OUTPUT_EN_DEFAULT;
 80031e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	SynthParameters.vca_output_sel      = VCA_OUTPUT_SEL_DEFAULT;
 80031f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	// VCA modulation source intensity and offset settings
	SynthParameters.vca_cv_intensity    = VCA_CV_INTENSITY_DEFAULT;
 80031f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 80031fa:	227f      	movs	r2, #127	@ 0x7f
 80031fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	SynthParameters.vca_offset          = VCA_OFFSET_DEFAULT;
 8003200:	4b19      	ldr	r3, [pc, #100]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 8003202:	227f      	movs	r2, #127	@ 0x7f
 8003204:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

	// envelope output settings
	SynthParameters.env_en              = ENV_EN_DEFAULT;
 8003208:	4b17      	ldr	r3, [pc, #92]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	SynthParameters.env_loop            = ENV_LOOP_DEFAULT;
 8003210:	4b15      	ldr	r3, [pc, #84]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	SynthParameters.env_invert          = ENV_INVERT_DEFAULT;
 8003218:	4b13      	ldr	r3, [pc, #76]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

	// envelope timing settings
	SynthParameters.env_attack_rate     = ENV_ATTACK_RATE_DEFAULT;
 8003220:	4b11      	ldr	r3, [pc, #68]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 8003222:	227f      	movs	r2, #127	@ 0x7f
 8003224:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	SynthParameters.env_release_rate    = ENV_RELEASE_RATE_DEFAULT;
 8003228:	4b0f      	ldr	r3, [pc, #60]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 800322a:	227f      	movs	r2, #127	@ 0x7f
 800322c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	SynthParameters.env_decay_rate      = ENV_DECAY_RATE_DEFAULT;
 8003230:	4b0d      	ldr	r3, [pc, #52]	@ (8003268 <Synth_Initialize_Preset+0x154>)
 8003232:	227f      	movs	r2, #127	@ 0x7f
 8003234:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b


	Mixer_Digital_Pot_Control();
 8003238:	f000 f818 	bl	800326c <Mixer_Digital_Pot_Control>

	Filter_Mod_Source_Control();
 800323c:	f000 f8a4 	bl	8003388 <Filter_Mod_Source_Control>
	Filter_Digital_Pot_Control();
 8003240:	f000 f8d2 	bl	80033e8 <Filter_Digital_Pot_Control>

	LFO_Output_Control();
 8003244:	f000 f8ec 	bl	8003420 <LFO_Output_Control>
	LFO_Digital_Pot_Control();
 8003248:	f000 f91a 	bl	8003480 <LFO_Digital_Pot_Control>

	VCA_Mod_Source_Control();
 800324c:	f000 f822 	bl	8003294 <VCA_Mod_Source_Control>
	VCA_Bypass_Switch_Control();
 8003250:	f000 f852 	bl	80032f8 <VCA_Bypass_Switch_Control>
	VCA_Digital_Pot_Control();
 8003254:	f000 f882 	bl	800335c <VCA_Digital_Pot_Control>

	Envelope_Mode_Control();
 8003258:	f000 f920 	bl	800349c <Envelope_Mode_Control>
	Envelope_Digital_Pot_Control();
 800325c:	f000 f966 	bl	800352c <Envelope_Digital_Pot_Control>

	return 0;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000344 	.word	0x20000344

0800326c <Mixer_Digital_Pot_Control>:

void Mixer_Digital_Pot_Control(){
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(0, SynthParameters.dac_mixer_level, 0);  // set DAC mixer output level
 8003270:	4b07      	ldr	r3, [pc, #28]	@ (8003290 <Mixer_Digital_Pot_Control+0x24>)
 8003272:	7d9b      	ldrb	r3, [r3, #22]
 8003274:	2200      	movs	r2, #0
 8003276:	4619      	mov	r1, r3
 8003278:	2000      	movs	r0, #0
 800327a:	f7ff fe75 	bl	8002f68 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(1, SynthParameters.filter_out_level, 0); // set filter output level
 800327e:	4b04      	ldr	r3, [pc, #16]	@ (8003290 <Mixer_Digital_Pot_Control+0x24>)
 8003280:	7ddb      	ldrb	r3, [r3, #23]
 8003282:	2200      	movs	r2, #0
 8003284:	4619      	mov	r1, r3
 8003286:	2001      	movs	r0, #1
 8003288:	f7ff fe6e 	bl	8002f68 <Digital_Pot_Wiper_Set>

    return;
 800328c:	bf00      	nop
}
 800328e:	bd80      	pop	{r7, pc}
 8003290:	20000344 	.word	0x20000344

08003294 <VCA_Mod_Source_Control>:

void VCA_Mod_Source_Control() {
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0

    // control CV enable/disable (active low)
    sys.gpio_reg = GPIO_State_Change(VCA_CV_SW_PORT, sys.gpio_reg, VCA_CV_SW_PIN, SynthParameters.vca_cv_en == 0);
 8003298:	4b15      	ldr	r3, [pc, #84]	@ (80032f0 <VCA_Mod_Source_Control+0x5c>)
 800329a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800329e:	4619      	mov	r1, r3
 80032a0:	4b14      	ldr	r3, [pc, #80]	@ (80032f4 <VCA_Mod_Source_Control+0x60>)
 80032a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	bf0c      	ite	eq
 80032aa:	2301      	moveq	r3, #1
 80032ac:	2300      	movne	r3, #0
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2207      	movs	r2, #7
 80032b2:	2000      	movs	r0, #0
 80032b4:	f000 fda8 	bl	8003e08 <GPIO_State_Change>
 80032b8:	4603      	mov	r3, r0
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	4b0c      	ldr	r3, [pc, #48]	@ (80032f0 <VCA_Mod_Source_Control+0x5c>)
 80032be:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88

    // select modulation source
    sys.gpio_reg = GPIO_State_Change(VCA_SEL_PORT, sys.gpio_reg, VCA_SEL_PIN, SynthParameters.vca_cv_sel == 1);
 80032c2:	4b0b      	ldr	r3, [pc, #44]	@ (80032f0 <VCA_Mod_Source_Control+0x5c>)
 80032c4:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 80032c8:	4619      	mov	r1, r3
 80032ca:	4b0a      	ldr	r3, [pc, #40]	@ (80032f4 <VCA_Mod_Source_Control+0x60>)
 80032cc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	bf0c      	ite	eq
 80032d4:	2301      	moveq	r3, #1
 80032d6:	2300      	movne	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2200      	movs	r2, #0
 80032dc:	2001      	movs	r0, #1
 80032de:	f000 fd93 	bl	8003e08 <GPIO_State_Change>
 80032e2:	4603      	mov	r3, r0
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	4b02      	ldr	r3, [pc, #8]	@ (80032f0 <VCA_Mod_Source_Control+0x5c>)
 80032e8:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88

    return;
 80032ec:	bf00      	nop
}
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	20000370 	.word	0x20000370
 80032f4:	20000344 	.word	0x20000344

080032f8 <VCA_Bypass_Switch_Control>:

void VCA_Bypass_Switch_Control() {
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0

    // control VCA bypass switch enable/disable (active low)
    sys.gpio_reg = GPIO_State_Change(VCA_BYP_SW_PORT, sys.gpio_reg, VCA_BYP_SW_PIN, SynthParameters.vca_output_en == 0);
 80032fc:	4b15      	ldr	r3, [pc, #84]	@ (8003354 <VCA_Bypass_Switch_Control+0x5c>)
 80032fe:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8003302:	4619      	mov	r1, r3
 8003304:	4b14      	ldr	r3, [pc, #80]	@ (8003358 <VCA_Bypass_Switch_Control+0x60>)
 8003306:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800330a:	2b00      	cmp	r3, #0
 800330c:	bf0c      	ite	eq
 800330e:	2301      	moveq	r3, #1
 8003310:	2300      	movne	r3, #0
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2206      	movs	r2, #6
 8003316:	2000      	movs	r0, #0
 8003318:	f000 fd76 	bl	8003e08 <GPIO_State_Change>
 800331c:	4603      	mov	r3, r0
 800331e:	b29a      	uxth	r2, r3
 8003320:	4b0c      	ldr	r3, [pc, #48]	@ (8003354 <VCA_Bypass_Switch_Control+0x5c>)
 8003322:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88

    // update output source selection; true = bypass VCA, false = output through VCA
    sys.gpio_reg = GPIO_State_Change(VCA_BYP_PORT, sys.gpio_reg, VCA_BYP_PIN, SynthParameters.vca_output_sel == 1);
 8003326:	4b0b      	ldr	r3, [pc, #44]	@ (8003354 <VCA_Bypass_Switch_Control+0x5c>)
 8003328:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800332c:	4619      	mov	r1, r3
 800332e:	4b0a      	ldr	r3, [pc, #40]	@ (8003358 <VCA_Bypass_Switch_Control+0x60>)
 8003330:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8003334:	2b01      	cmp	r3, #1
 8003336:	bf0c      	ite	eq
 8003338:	2301      	moveq	r3, #1
 800333a:	2300      	movne	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2205      	movs	r2, #5
 8003340:	2000      	movs	r0, #0
 8003342:	f000 fd61 	bl	8003e08 <GPIO_State_Change>
 8003346:	4603      	mov	r3, r0
 8003348:	b29a      	uxth	r2, r3
 800334a:	4b02      	ldr	r3, [pc, #8]	@ (8003354 <VCA_Bypass_Switch_Control+0x5c>)
 800334c:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88

    return;
 8003350:	bf00      	nop
}
 8003352:	bd80      	pop	{r7, pc}
 8003354:	20000370 	.word	0x20000370
 8003358:	20000344 	.word	0x20000344

0800335c <VCA_Digital_Pot_Control>:

void VCA_Digital_Pot_Control(){
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(6, SynthParameters.vca_cv_intensity, 0); // set intensity of mod source
 8003360:	4b08      	ldr	r3, [pc, #32]	@ (8003384 <VCA_Digital_Pot_Control+0x28>)
 8003362:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003366:	2200      	movs	r2, #0
 8003368:	4619      	mov	r1, r3
 800336a:	2006      	movs	r0, #6
 800336c:	f7ff fdfc 	bl	8002f68 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(7, SynthParameters.vca_offset, 0);       // set VCA offset
 8003370:	4b04      	ldr	r3, [pc, #16]	@ (8003384 <VCA_Digital_Pot_Control+0x28>)
 8003372:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003376:	2200      	movs	r2, #0
 8003378:	4619      	mov	r1, r3
 800337a:	2007      	movs	r0, #7
 800337c:	f7ff fdf4 	bl	8002f68 <Digital_Pot_Wiper_Set>

    return;
 8003380:	bf00      	nop
}
 8003382:	bd80      	pop	{r7, pc}
 8003384:	20000344 	.word	0x20000344

08003388 <Filter_Mod_Source_Control>:

void Filter_Mod_Source_Control() {
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0

    // control CV enable/disable (active low)
    sys.gpio_reg = GPIO_State_Change(VCF_CV_SW_PORT, sys.gpio_reg, VCF_CV_SW_PIN, SynthParameters.vcf_cv_en == 0);
 800338c:	4b14      	ldr	r3, [pc, #80]	@ (80033e0 <Filter_Mod_Source_Control+0x58>)
 800338e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8003392:	4619      	mov	r1, r3
 8003394:	4b13      	ldr	r3, [pc, #76]	@ (80033e4 <Filter_Mod_Source_Control+0x5c>)
 8003396:	7e1b      	ldrb	r3, [r3, #24]
 8003398:	2b00      	cmp	r3, #0
 800339a:	bf0c      	ite	eq
 800339c:	2301      	moveq	r3, #1
 800339e:	2300      	movne	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2202      	movs	r2, #2
 80033a4:	2001      	movs	r0, #1
 80033a6:	f000 fd2f 	bl	8003e08 <GPIO_State_Change>
 80033aa:	4603      	mov	r3, r0
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	4b0c      	ldr	r3, [pc, #48]	@ (80033e0 <Filter_Mod_Source_Control+0x58>)
 80033b0:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88

    // select modulation source; true = LFO, false = envelope
    sys.gpio_reg = GPIO_State_Change(VCF_SEL_PORT, sys.gpio_reg, VCF_SEL_PIN, SynthParameters.vcf_cv_sel == 1);
 80033b4:	4b0a      	ldr	r3, [pc, #40]	@ (80033e0 <Filter_Mod_Source_Control+0x58>)
 80033b6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 80033ba:	4619      	mov	r1, r3
 80033bc:	4b09      	ldr	r3, [pc, #36]	@ (80033e4 <Filter_Mod_Source_Control+0x5c>)
 80033be:	7e5b      	ldrb	r3, [r3, #25]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	bf0c      	ite	eq
 80033c4:	2301      	moveq	r3, #1
 80033c6:	2300      	movne	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2201      	movs	r2, #1
 80033cc:	2001      	movs	r0, #1
 80033ce:	f000 fd1b 	bl	8003e08 <GPIO_State_Change>
 80033d2:	4603      	mov	r3, r0
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	4b02      	ldr	r3, [pc, #8]	@ (80033e0 <Filter_Mod_Source_Control+0x58>)
 80033d8:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88

    return;
 80033dc:	bf00      	nop
}
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	20000370 	.word	0x20000370
 80033e4:	20000344 	.word	0x20000344

080033e8 <Filter_Digital_Pot_Control>:


void Filter_Digital_Pot_Control(){
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(4, SynthParameters.vcf_cv_intensity, 0); // set intensity of mod source
 80033ec:	4b0b      	ldr	r3, [pc, #44]	@ (800341c <Filter_Digital_Pot_Control+0x34>)
 80033ee:	7e9b      	ldrb	r3, [r3, #26]
 80033f0:	2200      	movs	r2, #0
 80033f2:	4619      	mov	r1, r3
 80033f4:	2004      	movs	r0, #4
 80033f6:	f7ff fdb7 	bl	8002f68 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(3, SynthParameters.vcf_cutoff, 0);       // set filter cutoff
 80033fa:	4b08      	ldr	r3, [pc, #32]	@ (800341c <Filter_Digital_Pot_Control+0x34>)
 80033fc:	7edb      	ldrb	r3, [r3, #27]
 80033fe:	2200      	movs	r2, #0
 8003400:	4619      	mov	r1, r3
 8003402:	2003      	movs	r0, #3
 8003404:	f7ff fdb0 	bl	8002f68 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(2, SynthParameters.vcf_resonance, 0);    // set resonance intensity
 8003408:	4b04      	ldr	r3, [pc, #16]	@ (800341c <Filter_Digital_Pot_Control+0x34>)
 800340a:	7f1b      	ldrb	r3, [r3, #28]
 800340c:	2200      	movs	r2, #0
 800340e:	4619      	mov	r1, r3
 8003410:	2002      	movs	r0, #2
 8003412:	f7ff fda9 	bl	8002f68 <Digital_Pot_Wiper_Set>

    return;
 8003416:	bf00      	nop
}
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20000344 	.word	0x20000344

08003420 <LFO_Output_Control>:

void LFO_Output_Control() {
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0

    // control LFO output enable/disable (active low)
    sys.gpio_reg = GPIO_State_Change(LFO_EN_PORT, sys.gpio_reg, LFO_EN_PIN, SynthParameters.lfo_output_en == 0);
 8003424:	4b14      	ldr	r3, [pc, #80]	@ (8003478 <LFO_Output_Control+0x58>)
 8003426:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800342a:	4619      	mov	r1, r3
 800342c:	4b13      	ldr	r3, [pc, #76]	@ (800347c <LFO_Output_Control+0x5c>)
 800342e:	7f5b      	ldrb	r3, [r3, #29]
 8003430:	2b00      	cmp	r3, #0
 8003432:	bf0c      	ite	eq
 8003434:	2301      	moveq	r3, #1
 8003436:	2300      	movne	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2207      	movs	r2, #7
 800343c:	2001      	movs	r0, #1
 800343e:	f000 fce3 	bl	8003e08 <GPIO_State_Change>
 8003442:	4603      	mov	r3, r0
 8003444:	b29a      	uxth	r2, r3
 8003446:	4b0c      	ldr	r3, [pc, #48]	@ (8003478 <LFO_Output_Control+0x58>)
 8003448:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88

    // select LFO output waveform; true = square wave, false = triangle wave
    sys.gpio_reg = GPIO_State_Change(LFO_SEL_PORT, sys.gpio_reg, LFO_SEL_PIN, SynthParameters.lfo_output_waveform == 1);
 800344c:	4b0a      	ldr	r3, [pc, #40]	@ (8003478 <LFO_Output_Control+0x58>)
 800344e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8003452:	4619      	mov	r1, r3
 8003454:	4b09      	ldr	r3, [pc, #36]	@ (800347c <LFO_Output_Control+0x5c>)
 8003456:	7f9b      	ldrb	r3, [r3, #30]
 8003458:	2b01      	cmp	r3, #1
 800345a:	bf0c      	ite	eq
 800345c:	2301      	moveq	r3, #1
 800345e:	2300      	movne	r3, #0
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2206      	movs	r2, #6
 8003464:	2001      	movs	r0, #1
 8003466:	f000 fccf 	bl	8003e08 <GPIO_State_Change>
 800346a:	4603      	mov	r3, r0
 800346c:	b29a      	uxth	r2, r3
 800346e:	4b02      	ldr	r3, [pc, #8]	@ (8003478 <LFO_Output_Control+0x58>)
 8003470:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88

    return;
 8003474:	bf00      	nop
}
 8003476:	bd80      	pop	{r7, pc}
 8003478:	20000370 	.word	0x20000370
 800347c:	20000344 	.word	0x20000344

08003480 <LFO_Digital_Pot_Control>:

void LFO_Digital_Pot_Control(){
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(5, SynthParameters.lfo_frequency, 0); // set LFO frequency
 8003484:	4b04      	ldr	r3, [pc, #16]	@ (8003498 <LFO_Digital_Pot_Control+0x18>)
 8003486:	7fdb      	ldrb	r3, [r3, #31]
 8003488:	2200      	movs	r2, #0
 800348a:	4619      	mov	r1, r3
 800348c:	2005      	movs	r0, #5
 800348e:	f7ff fd6b 	bl	8002f68 <Digital_Pot_Wiper_Set>

    return;
 8003492:	bf00      	nop
}
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20000344 	.word	0x20000344

0800349c <Envelope_Mode_Control>:

void Envelope_Mode_Control() {
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0

    // control envelope enable/disable (active low)
    sys.gpio_reg = GPIO_State_Change(ENV_EN_PORT, sys.gpio_reg, ENV_EN_PIN, SynthParameters.env_en == 0);
 80034a0:	4b20      	ldr	r3, [pc, #128]	@ (8003524 <Envelope_Mode_Control+0x88>)
 80034a2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 80034a6:	4619      	mov	r1, r3
 80034a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003528 <Envelope_Mode_Control+0x8c>)
 80034aa:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	bf0c      	ite	eq
 80034b2:	2301      	moveq	r3, #1
 80034b4:	2300      	movne	r3, #0
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2205      	movs	r2, #5
 80034ba:	2001      	movs	r0, #1
 80034bc:	f000 fca4 	bl	8003e08 <GPIO_State_Change>
 80034c0:	4603      	mov	r3, r0
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	4b17      	ldr	r3, [pc, #92]	@ (8003524 <Envelope_Mode_Control+0x88>)
 80034c6:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88

    // select envelope loop/trigger mode; true = trigger mode, false = loop mode
    sys.gpio_reg = GPIO_State_Change(ENV_LP_PORT, sys.gpio_reg, ENV_LP_PIN, SynthParameters.env_loop == 0);
 80034ca:	4b16      	ldr	r3, [pc, #88]	@ (8003524 <Envelope_Mode_Control+0x88>)
 80034cc:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 80034d0:	4619      	mov	r1, r3
 80034d2:	4b15      	ldr	r3, [pc, #84]	@ (8003528 <Envelope_Mode_Control+0x8c>)
 80034d4:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80034d8:	2b00      	cmp	r3, #0
 80034da:	bf0c      	ite	eq
 80034dc:	2301      	moveq	r3, #1
 80034de:	2300      	movne	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2204      	movs	r2, #4
 80034e4:	2001      	movs	r0, #1
 80034e6:	f000 fc8f 	bl	8003e08 <GPIO_State_Change>
 80034ea:	4603      	mov	r3, r0
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003524 <Envelope_Mode_Control+0x88>)
 80034f0:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88

    // select envelope inversion mode; true = inverter output, false = non-inverted output
    sys.gpio_reg = GPIO_State_Change(ENV_POL_PORT, sys.gpio_reg, ENV_POL_PIN, SynthParameters.env_invert == 0);
 80034f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003524 <Envelope_Mode_Control+0x88>)
 80034f6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 80034fa:	4619      	mov	r1, r3
 80034fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003528 <Envelope_Mode_Control+0x8c>)
 80034fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003502:	2b00      	cmp	r3, #0
 8003504:	bf0c      	ite	eq
 8003506:	2301      	moveq	r3, #1
 8003508:	2300      	movne	r3, #0
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2203      	movs	r2, #3
 800350e:	2001      	movs	r0, #1
 8003510:	f000 fc7a 	bl	8003e08 <GPIO_State_Change>
 8003514:	4603      	mov	r3, r0
 8003516:	b29a      	uxth	r2, r3
 8003518:	4b02      	ldr	r3, [pc, #8]	@ (8003524 <Envelope_Mode_Control+0x88>)
 800351a:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88

    return;
 800351e:	bf00      	nop
}
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	20000370 	.word	0x20000370
 8003528:	20000344 	.word	0x20000344

0800352c <Envelope_Digital_Pot_Control>:

void Envelope_Digital_Pot_Control(){
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(8, SynthParameters.env_attack_rate, 0);    // set envelope attack rate
 8003530:	4b0c      	ldr	r3, [pc, #48]	@ (8003564 <Envelope_Digital_Pot_Control+0x38>)
 8003532:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003536:	2200      	movs	r2, #0
 8003538:	4619      	mov	r1, r3
 800353a:	2008      	movs	r0, #8
 800353c:	f7ff fd14 	bl	8002f68 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(9, SynthParameters.env_release_rate, 0);   // set envelop release rate
 8003540:	4b08      	ldr	r3, [pc, #32]	@ (8003564 <Envelope_Digital_Pot_Control+0x38>)
 8003542:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8003546:	2200      	movs	r2, #0
 8003548:	4619      	mov	r1, r3
 800354a:	2009      	movs	r0, #9
 800354c:	f7ff fd0c 	bl	8002f68 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(10, SynthParameters.env_decay_rate, 0);    // set decay rate and sustain level
 8003550:	4b04      	ldr	r3, [pc, #16]	@ (8003564 <Envelope_Digital_Pot_Control+0x38>)
 8003552:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8003556:	2200      	movs	r2, #0
 8003558:	4619      	mov	r1, r3
 800355a:	200a      	movs	r0, #10
 800355c:	f7ff fd04 	bl	8002f68 <Digital_Pot_Wiper_Set>

    return;
 8003560:	bf00      	nop
}
 8003562:	bd80      	pop	{r7, pc}
 8003564:	20000344 	.word	0x20000344

08003568 <System_Reset_Initialize>:
#include "audiodac.h"
#include "gpioxpndr.h"

System sys;

void System_Reset_Initialize(){
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0

	// system controls
	sys.serial_cmd_echo = 0;
 800356c:	4b35      	ldr	r3, [pc, #212]	@ (8003644 <System_Reset_Initialize+0xdc>)
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
	sys.midi_tx_pol = 0;
 8003572:	4b34      	ldr	r3, [pc, #208]	@ (8003644 <System_Reset_Initialize+0xdc>)
 8003574:	2200      	movs	r2, #0
 8003576:	605a      	str	r2, [r3, #4]
	sys.midi_tx_en = 0;
 8003578:	4b32      	ldr	r3, [pc, #200]	@ (8003644 <System_Reset_Initialize+0xdc>)
 800357a:	2200      	movs	r2, #0
 800357c:	609a      	str	r2, [r3, #8]
	sys.value_returned = 0;
 800357e:	4b31      	ldr	r3, [pc, #196]	@ (8003644 <System_Reset_Initialize+0xdc>)
 8003580:	2200      	movs	r2, #0
 8003582:	60da      	str	r2, [r3, #12]
	sys.green_led_state = 0;
 8003584:	4b2f      	ldr	r3, [pc, #188]	@ (8003644 <System_Reset_Initialize+0xdc>)
 8003586:	2200      	movs	r2, #0
 8003588:	611a      	str	r2, [r3, #16]
	sys.red_led_state = 0;
 800358a:	4b2e      	ldr	r3, [pc, #184]	@ (8003644 <System_Reset_Initialize+0xdc>)
 800358c:	2200      	movs	r2, #0
 800358e:	615a      	str	r2, [r3, #20]
	sys.blink_counter = 0;
 8003590:	4b2c      	ldr	r3, [pc, #176]	@ (8003644 <System_Reset_Initialize+0xdc>)
 8003592:	2200      	movs	r2, #0
 8003594:	619a      	str	r2, [r3, #24]
	sys.write_protect = 0;
 8003596:	4b2b      	ldr	r3, [pc, #172]	@ (8003644 <System_Reset_Initialize+0xdc>)
 8003598:	2200      	movs	r2, #0
 800359a:	61da      	str	r2, [r3, #28]

	// communication buffers
	sys.usb_vcp_buffer[64] = 0;
 800359c:	4b29      	ldr	r3, [pc, #164]	@ (8003644 <System_Reset_Initialize+0xdc>)
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
	sys.midi_buf[3] = 0;
 80035a4:	4b27      	ldr	r3, [pc, #156]	@ (8003644 <System_Reset_Initialize+0xdc>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
	sys.temp_buf[3] = 0;
 80035ac:	4b25      	ldr	r3, [pc, #148]	@ (8003644 <System_Reset_Initialize+0xdc>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
	sys.temp_buf_index = 0;
 80035b4:	4b23      	ldr	r3, [pc, #140]	@ (8003644 <System_Reset_Initialize+0xdc>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	669a      	str	r2, [r3, #104]	@ 0x68

	// communication status flags
	sys.usb_data_present = 0;
 80035ba:	4b22      	ldr	r3, [pc, #136]	@ (8003644 <System_Reset_Initialize+0xdc>)
 80035bc:	2200      	movs	r2, #0
 80035be:	66da      	str	r2, [r3, #108]	@ 0x6c
	sys.midi_data_present = 0;
 80035c0:	4b20      	ldr	r3, [pc, #128]	@ (8003644 <System_Reset_Initialize+0xdc>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	671a      	str	r2, [r3, #112]	@ 0x70

	// midi variables
	sys.note_status_bit = 0;
 80035c6:	4b1f      	ldr	r3, [pc, #124]	@ (8003644 <System_Reset_Initialize+0xdc>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	675a      	str	r2, [r3, #116]	@ 0x74
	sys.midi_note_input = 0;
 80035cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003644 <System_Reset_Initialize+0xdc>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	679a      	str	r2, [r3, #120]	@ 0x78
	sys.midi_note_velocity = 0;
 80035d2:	4b1c      	ldr	r3, [pc, #112]	@ (8003644 <System_Reset_Initialize+0xdc>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	67da      	str	r2, [r3, #124]	@ 0x7c

	sys.gate = 0;
 80035d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003644 <System_Reset_Initialize+0xdc>)
 80035da:	2200      	movs	r2, #0
 80035dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	sys.velocity_enable = 0;
 80035e0:	4b18      	ldr	r3, [pc, #96]	@ (8003644 <System_Reset_Initialize+0xdc>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	sys.gpio_reg = 0;
 80035e8:	4b16      	ldr	r3, [pc, #88]	@ (8003644 <System_Reset_Initialize+0xdc>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88

	HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, SET); // red
 80035f0:	2201      	movs	r2, #1
 80035f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80035f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035fa:	f001 fa09 	bl	8004a10 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET); // enable analog power supply
 80035fe:	2201      	movs	r2, #1
 8003600:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003604:	4810      	ldr	r0, [pc, #64]	@ (8003648 <System_Reset_Initialize+0xe0>)
 8003606:	f001 fa03 	bl	8004a10 <HAL_GPIO_WritePin>

	DAC_Register_Init();
 800360a:	f000 fadf 	bl	8003bcc <DAC_Register_Init>

	DAC_Register_Write(0x40, 0x3F);
 800360e:	213f      	movs	r1, #63	@ 0x3f
 8003610:	2040      	movs	r0, #64	@ 0x40
 8003612:	f000 fabd 	bl	8003b90 <DAC_Register_Write>
	DAC_Register_Write(0x44, 0x3F);
 8003616:	213f      	movs	r1, #63	@ 0x3f
 8003618:	2044      	movs	r0, #68	@ 0x44
 800361a:	f000 fab9 	bl	8003b90 <DAC_Register_Write>

	DAC_Register_Write(0x41, 0x3F);
 800361e:	213f      	movs	r1, #63	@ 0x3f
 8003620:	2041      	movs	r0, #65	@ 0x41
 8003622:	f000 fab5 	bl	8003b90 <DAC_Register_Write>
	DAC_Register_Write(0x45, 0x3F);
 8003626:	213f      	movs	r1, #63	@ 0x3f
 8003628:	2045      	movs	r0, #69	@ 0x45
 800362a:	f000 fab1 	bl	8003b90 <DAC_Register_Write>

	GPIO_Register_Init();
 800362e:	f000 fbd7 	bl	8003de0 <GPIO_Register_Init>

	Write_Protect_Control();
 8003632:	f000 f80b 	bl	800364c <Write_Protect_Control>
	MIDI_Port_Control();
 8003636:	f000 f819 	bl	800366c <MIDI_Port_Control>
	Gate_Control();
 800363a:	f000 f841 	bl	80036c0 <Gate_Control>

	return;
 800363e:	bf00      	nop
}
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	20000370 	.word	0x20000370
 8003648:	48000400 	.word	0x48000400

0800364c <Write_Protect_Control>:

// ===========================================================================================================
// system functions

void Write_Protect_Control(){
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0

	// enable or disable write protection for EEPROM (presets)
	HAL_GPIO_WritePin(WRITE_PROTECT_PORT, WRITE_PROTECT_PIN, sys.write_protect);
 8003650:	4b04      	ldr	r3, [pc, #16]	@ (8003664 <Write_Protect_Control+0x18>)
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	b2db      	uxtb	r3, r3
 8003656:	461a      	mov	r2, r3
 8003658:	2180      	movs	r1, #128	@ 0x80
 800365a:	4803      	ldr	r0, [pc, #12]	@ (8003668 <Write_Protect_Control+0x1c>)
 800365c:	f001 f9d8 	bl	8004a10 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, sys.write_protect);

	return;
 8003660:	bf00      	nop
}
 8003662:	bd80      	pop	{r7, pc}
 8003664:	20000370 	.word	0x20000370
 8003668:	48000800 	.word	0x48000800

0800366c <MIDI_Port_Control>:

void MIDI_Port_Control(){
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0

	// enable or disable transmit through MIDI port
	sys.gpio_reg = GPIO_State_Change(MIDI_TX_EN_PORT, sys.gpio_reg, MIDI_TX_EN_PIN, sys.midi_tx_en == 0);
 8003670:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <MIDI_Port_Control+0x50>)
 8003672:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8003676:	4619      	mov	r1, r3
 8003678:	4b10      	ldr	r3, [pc, #64]	@ (80036bc <MIDI_Port_Control+0x50>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	bf0c      	ite	eq
 8003680:	2301      	moveq	r3, #1
 8003682:	2300      	movne	r3, #0
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2200      	movs	r2, #0
 8003688:	2000      	movs	r0, #0
 800368a:	f000 fbbd 	bl	8003e08 <GPIO_State_Change>
 800368e:	4603      	mov	r3, r0
 8003690:	b29a      	uxth	r2, r3
 8003692:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <MIDI_Port_Control+0x50>)
 8003694:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88

	// toggle polarity of MIDI UART output
	sys.gpio_reg = GPIO_State_Change(MIDI_TX_POL_PORT, sys.gpio_reg, MIDI_TX_POL_PIN, sys.midi_tx_pol);
 8003698:	4b08      	ldr	r3, [pc, #32]	@ (80036bc <MIDI_Port_Control+0x50>)
 800369a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800369e:	4619      	mov	r1, r3
 80036a0:	4b06      	ldr	r3, [pc, #24]	@ (80036bc <MIDI_Port_Control+0x50>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2202      	movs	r2, #2
 80036a6:	2000      	movs	r0, #0
 80036a8:	f000 fbae 	bl	8003e08 <GPIO_State_Change>
 80036ac:	4603      	mov	r3, r0
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	4b02      	ldr	r3, [pc, #8]	@ (80036bc <MIDI_Port_Control+0x50>)
 80036b2:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88

	return;
 80036b6:	bf00      	nop
}
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	20000370 	.word	0x20000370

080036c0 <Gate_Control>:

void Gate_Control(){
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0

	// gate control for envelope trigger and LED indicator
	sys.gpio_reg = GPIO_State_Change(GATE_PORT, sys.gpio_reg, GATE_PIN, sys.gate);
 80036c4:	4b08      	ldr	r3, [pc, #32]	@ (80036e8 <Gate_Control+0x28>)
 80036c6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 80036ca:	4619      	mov	r1, r3
 80036cc:	4b06      	ldr	r3, [pc, #24]	@ (80036e8 <Gate_Control+0x28>)
 80036ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036d2:	2203      	movs	r2, #3
 80036d4:	2000      	movs	r0, #0
 80036d6:	f000 fb97 	bl	8003e08 <GPIO_State_Change>
 80036da:	4603      	mov	r3, r0
 80036dc:	b29a      	uxth	r2, r3
 80036de:	4b02      	ldr	r3, [pc, #8]	@ (80036e8 <Gate_Control+0x28>)
 80036e0:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88

	return;
 80036e4:	bf00      	nop
}
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	20000370 	.word	0x20000370

080036ec <Command_Response_Handler>:

void Command_Response_Handler(int error_check, uint8_t command_byte, uint8_t address_byte, uint8_t data_byte){
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	4608      	mov	r0, r1
 80036f6:	4611      	mov	r1, r2
 80036f8:	461a      	mov	r2, r3
 80036fa:	4603      	mov	r3, r0
 80036fc:	70fb      	strb	r3, [r7, #3]
 80036fe:	460b      	mov	r3, r1
 8003700:	70bb      	strb	r3, [r7, #2]
 8003702:	4613      	mov	r3, r2
 8003704:	707b      	strb	r3, [r7, #1]

	uint8_t return_data[3];

	if(sys.value_returned == 1){ // exit early if response already returned
 8003706:	4b1f      	ldr	r3, [pc, #124]	@ (8003784 <Command_Response_Handler+0x98>)
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d033      	beq.n	8003776 <Command_Response_Handler+0x8a>
        return;
	}

    if (error_check == 1) {
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d109      	bne.n	8003728 <Command_Response_Handler+0x3c>
    	memcpy(return_data, "ERR", 3); // report error
 8003714:	4a1c      	ldr	r2, [pc, #112]	@ (8003788 <Command_Response_Handler+0x9c>)
 8003716:	f107 030c 	add.w	r3, r7, #12
 800371a:	6812      	ldr	r2, [r2, #0]
 800371c:	4611      	mov	r1, r2
 800371e:	8019      	strh	r1, [r3, #0]
 8003720:	3302      	adds	r3, #2
 8003722:	0c12      	lsrs	r2, r2, #16
 8003724:	701a      	strb	r2, [r3, #0]
 8003726:	e013      	b.n	8003750 <Command_Response_Handler+0x64>

    } else if (sys.serial_cmd_echo == 1) { // echo command
 8003728:	4b16      	ldr	r3, [pc, #88]	@ (8003784 <Command_Response_Handler+0x98>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d106      	bne.n	800373e <Command_Response_Handler+0x52>

        return_data[0] = command_byte;
 8003730:	78fb      	ldrb	r3, [r7, #3]
 8003732:	733b      	strb	r3, [r7, #12]
        return_data[1] = address_byte;
 8003734:	78bb      	ldrb	r3, [r7, #2]
 8003736:	737b      	strb	r3, [r7, #13]
        return_data[2] = data_byte;
 8003738:	787b      	ldrb	r3, [r7, #1]
 800373a:	73bb      	strb	r3, [r7, #14]
 800373c:	e008      	b.n	8003750 <Command_Response_Handler+0x64>

    } else {
    	memcpy(return_data, "ACK", 3); // acknowledge input
 800373e:	4a13      	ldr	r2, [pc, #76]	@ (800378c <Command_Response_Handler+0xa0>)
 8003740:	f107 030c 	add.w	r3, r7, #12
 8003744:	6812      	ldr	r2, [r2, #0]
 8003746:	4611      	mov	r1, r2
 8003748:	8019      	strh	r1, [r3, #0]
 800374a:	3302      	adds	r3, #2
 800374c:	0c12      	lsrs	r2, r2, #16
 800374e:	701a      	strb	r2, [r3, #0]

    }

    CDC_Transmit_FS(return_data, 3); // transmit return message
 8003750:	f107 030c 	add.w	r3, r7, #12
 8003754:	2103      	movs	r1, #3
 8003756:	4618      	mov	r0, r3
 8003758:	f00c f866 	bl	800f828 <CDC_Transmit_FS>

    if (sys.midi_tx_en == 1) { // send return message if enabled
 800375c:	4b09      	ldr	r3, [pc, #36]	@ (8003784 <Command_Response_Handler+0x98>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d10a      	bne.n	800377a <Command_Response_Handler+0x8e>
        HAL_UART_Transmit(&huart2, return_data, 3, 1000);
 8003764:	f107 010c 	add.w	r1, r7, #12
 8003768:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800376c:	2203      	movs	r2, #3
 800376e:	4808      	ldr	r0, [pc, #32]	@ (8003790 <Command_Response_Handler+0xa4>)
 8003770:	f006 fb9e 	bl	8009eb0 <HAL_UART_Transmit>
    }

	return;
 8003774:	e001      	b.n	800377a <Command_Response_Handler+0x8e>
        return;
 8003776:	bf00      	nop
 8003778:	e000      	b.n	800377c <Command_Response_Handler+0x90>
	return;
 800377a:	bf00      	nop
}
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	20000370 	.word	0x20000370
 8003788:	08010af8 	.word	0x08010af8
 800378c:	08010afc 	.word	0x08010afc
 8003790:	20000448 	.word	0x20000448

08003794 <Command_Error_Check>:

// check command argument to verify input is valid
int Command_Error_Check(ErrorCheckType checkType, int data, int max_value, float float_data, float float_max){
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	6139      	str	r1, [r7, #16]
 800379e:	60fa      	str	r2, [r7, #12]
 80037a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80037a4:	edc7 0a01 	vstr	s1, [r7, #4]
 80037a8:	75fb      	strb	r3, [r7, #23]
    switch (checkType) {
 80037aa:	7dfb      	ldrb	r3, [r7, #23]
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d83a      	bhi.n	8003826 <Command_Error_Check+0x92>
 80037b0:	a201      	add	r2, pc, #4	@ (adr r2, 80037b8 <Command_Error_Check+0x24>)
 80037b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b6:	bf00      	nop
 80037b8:	080037c9 	.word	0x080037c9
 80037bc:	080037d9 	.word	0x080037d9
 80037c0:	080037ef 	.word	0x080037ef
 80037c4:	08003807 	.word	0x08003807
        case MAX_RANGE_CHECK:

            return (data <= max_value) ? 0 : 1;
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	bfcc      	ite	gt
 80037d0:	2301      	movgt	r3, #1
 80037d2:	2300      	movle	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	e027      	b.n	8003828 <Command_Error_Check+0x94>
        case OPTION_BOX_CHECK:

            return (data <= 0 || data > max_value) ? 1 : 0;
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	dd03      	ble.n	80037e6 <Command_Error_Check+0x52>
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	dd01      	ble.n	80037ea <Command_Error_Check+0x56>
 80037e6:	2301      	movs	r3, #1
 80037e8:	e01e      	b.n	8003828 <Command_Error_Check+0x94>
 80037ea:	2300      	movs	r3, #0
 80037ec:	e01c      	b.n	8003828 <Command_Error_Check+0x94>
        case NUMBER_CHECK:

            return (data <= '0' || data > max_value + '0') ? 1 : 0;
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	2b30      	cmp	r3, #48	@ 0x30
 80037f2:	dd04      	ble.n	80037fe <Command_Error_Check+0x6a>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	3330      	adds	r3, #48	@ 0x30
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	dd01      	ble.n	8003802 <Command_Error_Check+0x6e>
 80037fe:	2301      	movs	r3, #1
 8003800:	e012      	b.n	8003828 <Command_Error_Check+0x94>
 8003802:	2300      	movs	r3, #0
 8003804:	e010      	b.n	8003828 <Command_Error_Check+0x94>
        case FLOAT_RANGE_CHECK:

            return (float_data <= float_max) ? 0 : 1;
 8003806:	ed97 7a02 	vldr	s14, [r7, #8]
 800380a:	edd7 7a01 	vldr	s15, [r7, #4]
 800380e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003816:	bf94      	ite	ls
 8003818:	2301      	movls	r3, #1
 800381a:	2300      	movhi	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	f083 0301 	eor.w	r3, r3, #1
 8003822:	b2db      	uxtb	r3, r3
 8003824:	e000      	b.n	8003828 <Command_Error_Check+0x94>
        default:
            return 1; // invalid input value
 8003826:	2301      	movs	r3, #1
    }
}
 8003828:	4618      	mov	r0, r3
 800382a:	371c      	adds	r7, #28
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <Command_Blink_Status_LED>:

// if an error is detected, blink red LED twice, blink green LED once if no error
void Command_Blink_Status_LED(int error_check){
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]

	if(error_check == 1){
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d103      	bne.n	800384a <Command_Blink_Status_LED+0x16>
		sys.red_led_state = 1;
 8003842:	4b07      	ldr	r3, [pc, #28]	@ (8003860 <Command_Blink_Status_LED+0x2c>)
 8003844:	2201      	movs	r2, #1
 8003846:	615a      	str	r2, [r3, #20]
 8003848:	e002      	b.n	8003850 <Command_Blink_Status_LED+0x1c>
	}
	else sys.green_led_state = 1;
 800384a:	4b05      	ldr	r3, [pc, #20]	@ (8003860 <Command_Blink_Status_LED+0x2c>)
 800384c:	2201      	movs	r2, #1
 800384e:	611a      	str	r2, [r3, #16]

	HAL_TIM_Base_Start_IT(&htim6); // start LED timer
 8003850:	4804      	ldr	r0, [pc, #16]	@ (8003864 <Command_Blink_Status_LED+0x30>)
 8003852:	f005 ff49 	bl	80096e8 <HAL_TIM_Base_Start_IT>

}
 8003856:	bf00      	nop
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20000370 	.word	0x20000370
 8003864:	200003fc 	.word	0x200003fc

08003868 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]

	if(htim == &htim6){
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a20      	ldr	r2, [pc, #128]	@ (80038f4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d139      	bne.n	80038ec <HAL_TIM_PeriodElapsedCallback+0x84>

		if(sys.red_led_state == 1){
 8003878:	4b1f      	ldr	r3, [pc, #124]	@ (80038f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d118      	bne.n	80038b2 <HAL_TIM_PeriodElapsedCallback+0x4a>

	        if (sys.blink_counter < 4) {
 8003880:	4b1d      	ldr	r3, [pc, #116]	@ (80038f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	2b03      	cmp	r3, #3
 8003886:	dc0b      	bgt.n	80038a0 <HAL_TIM_PeriodElapsedCallback+0x38>
	            HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);
 8003888:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800388c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003890:	f001 f8d6 	bl	8004a40 <HAL_GPIO_TogglePin>
	            sys.blink_counter++;
 8003894:	4b18      	ldr	r3, [pc, #96]	@ (80038f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	3301      	adds	r3, #1
 800389a:	4a17      	ldr	r2, [pc, #92]	@ (80038f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800389c:	6193      	str	r3, [r2, #24]
 800389e:	e008      	b.n	80038b2 <HAL_TIM_PeriodElapsedCallback+0x4a>
	        } else {
	            HAL_TIM_Base_Stop_IT(&htim6); // stop the timer
 80038a0:	4814      	ldr	r0, [pc, #80]	@ (80038f4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80038a2:	f005 ff91 	bl	80097c8 <HAL_TIM_Base_Stop_IT>
	            sys.red_led_state = 0;
 80038a6:	4b14      	ldr	r3, [pc, #80]	@ (80038f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	615a      	str	r2, [r3, #20]
	            sys.blink_counter = 0;
 80038ac:	4b12      	ldr	r3, [pc, #72]	@ (80038f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	619a      	str	r2, [r3, #24]
	        }
		}

		if(sys.green_led_state == 1){
 80038b2:	4b11      	ldr	r3, [pc, #68]	@ (80038f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d118      	bne.n	80038ec <HAL_TIM_PeriodElapsedCallback+0x84>

	        if (sys.blink_counter < 2) {
 80038ba:	4b0f      	ldr	r3, [pc, #60]	@ (80038f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	dc0b      	bgt.n	80038da <HAL_TIM_PeriodElapsedCallback+0x72>
	            HAL_GPIO_TogglePin(GRN_LED_PORT, GRN_LED_PIN);
 80038c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80038c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038ca:	f001 f8b9 	bl	8004a40 <HAL_GPIO_TogglePin>
	            sys.blink_counter++;
 80038ce:	4b0a      	ldr	r3, [pc, #40]	@ (80038f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	3301      	adds	r3, #1
 80038d4:	4a08      	ldr	r2, [pc, #32]	@ (80038f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80038d6:	6193      	str	r3, [r2, #24]
	        }
		}

	}

}
 80038d8:	e008      	b.n	80038ec <HAL_TIM_PeriodElapsedCallback+0x84>
	            HAL_TIM_Base_Stop_IT(&htim6); // stop the timer
 80038da:	4806      	ldr	r0, [pc, #24]	@ (80038f4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80038dc:	f005 ff74 	bl	80097c8 <HAL_TIM_Base_Stop_IT>
	            sys.green_led_state = 0;
 80038e0:	4b05      	ldr	r3, [pc, #20]	@ (80038f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	611a      	str	r2, [r3, #16]
	            sys.blink_counter = 0;
 80038e6:	4b04      	ldr	r3, [pc, #16]	@ (80038f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	619a      	str	r2, [r3, #24]
}
 80038ec:	bf00      	nop
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	200003fc 	.word	0x200003fc
 80038f8:	20000370 	.word	0x20000370

080038fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003900:	4b06      	ldr	r3, [pc, #24]	@ (800391c <SystemInit+0x20>)
 8003902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003906:	4a05      	ldr	r2, [pc, #20]	@ (800391c <SystemInit+0x20>)
 8003908:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800390c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003910:	bf00      	nop
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	e000ed00 	.word	0xe000ed00

08003920 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003926:	1d3b      	adds	r3, r7, #4
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	605a      	str	r2, [r3, #4]
 800392e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003930:	4b15      	ldr	r3, [pc, #84]	@ (8003988 <MX_TIM6_Init+0x68>)
 8003932:	4a16      	ldr	r2, [pc, #88]	@ (800398c <MX_TIM6_Init+0x6c>)
 8003934:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16800-1;
 8003936:	4b14      	ldr	r3, [pc, #80]	@ (8003988 <MX_TIM6_Init+0x68>)
 8003938:	f244 129f 	movw	r2, #16799	@ 0x419f
 800393c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800393e:	4b12      	ldr	r3, [pc, #72]	@ (8003988 <MX_TIM6_Init+0x68>)
 8003940:	2200      	movs	r2, #0
 8003942:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1249;
 8003944:	4b10      	ldr	r3, [pc, #64]	@ (8003988 <MX_TIM6_Init+0x68>)
 8003946:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800394a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800394c:	4b0e      	ldr	r3, [pc, #56]	@ (8003988 <MX_TIM6_Init+0x68>)
 800394e:	2200      	movs	r2, #0
 8003950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003952:	480d      	ldr	r0, [pc, #52]	@ (8003988 <MX_TIM6_Init+0x68>)
 8003954:	f005 fe70 	bl	8009638 <HAL_TIM_Base_Init>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800395e:	f7fd fd42 	bl	80013e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003962:	2300      	movs	r3, #0
 8003964:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003966:	2300      	movs	r3, #0
 8003968:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800396a:	1d3b      	adds	r3, r7, #4
 800396c:	4619      	mov	r1, r3
 800396e:	4806      	ldr	r0, [pc, #24]	@ (8003988 <MX_TIM6_Init+0x68>)
 8003970:	f006 f97a 	bl	8009c68 <HAL_TIMEx_MasterConfigSynchronization>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800397a:	f7fd fd34 	bl	80013e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800397e:	bf00      	nop
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	200003fc 	.word	0x200003fc
 800398c:	40001000 	.word	0x40001000

08003990 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a0d      	ldr	r2, [pc, #52]	@ (80039d4 <HAL_TIM_Base_MspInit+0x44>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d113      	bne.n	80039ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80039a2:	4b0d      	ldr	r3, [pc, #52]	@ (80039d8 <HAL_TIM_Base_MspInit+0x48>)
 80039a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039a6:	4a0c      	ldr	r2, [pc, #48]	@ (80039d8 <HAL_TIM_Base_MspInit+0x48>)
 80039a8:	f043 0310 	orr.w	r3, r3, #16
 80039ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80039ae:	4b0a      	ldr	r3, [pc, #40]	@ (80039d8 <HAL_TIM_Base_MspInit+0x48>)
 80039b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80039ba:	2200      	movs	r2, #0
 80039bc:	2100      	movs	r1, #0
 80039be:	2036      	movs	r0, #54	@ 0x36
 80039c0:	f000 fbf5 	bl	80041ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80039c4:	2036      	movs	r0, #54	@ 0x36
 80039c6:	f000 fc0c 	bl	80041e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80039ca:	bf00      	nop
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40001000 	.word	0x40001000
 80039d8:	40021000 	.word	0x40021000

080039dc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80039e0:	4b24      	ldr	r3, [pc, #144]	@ (8003a74 <MX_USART2_UART_Init+0x98>)
 80039e2:	4a25      	ldr	r2, [pc, #148]	@ (8003a78 <MX_USART2_UART_Init+0x9c>)
 80039e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80039e6:	4b23      	ldr	r3, [pc, #140]	@ (8003a74 <MX_USART2_UART_Init+0x98>)
 80039e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80039ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039ee:	4b21      	ldr	r3, [pc, #132]	@ (8003a74 <MX_USART2_UART_Init+0x98>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003a74 <MX_USART2_UART_Init+0x98>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003a74 <MX_USART2_UART_Init+0x98>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003a00:	4b1c      	ldr	r3, [pc, #112]	@ (8003a74 <MX_USART2_UART_Init+0x98>)
 8003a02:	220c      	movs	r2, #12
 8003a04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a06:	4b1b      	ldr	r3, [pc, #108]	@ (8003a74 <MX_USART2_UART_Init+0x98>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a0c:	4b19      	ldr	r3, [pc, #100]	@ (8003a74 <MX_USART2_UART_Init+0x98>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a12:	4b18      	ldr	r3, [pc, #96]	@ (8003a74 <MX_USART2_UART_Init+0x98>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003a18:	4b16      	ldr	r3, [pc, #88]	@ (8003a74 <MX_USART2_UART_Init+0x98>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8003a1e:	4b15      	ldr	r3, [pc, #84]	@ (8003a74 <MX_USART2_UART_Init+0x98>)
 8003a20:	2208      	movs	r2, #8
 8003a22:	629a      	str	r2, [r3, #40]	@ 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8003a24:	4b13      	ldr	r3, [pc, #76]	@ (8003a74 <MX_USART2_UART_Init+0x98>)
 8003a26:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003a2a:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a2c:	4811      	ldr	r0, [pc, #68]	@ (8003a74 <MX_USART2_UART_Init+0x98>)
 8003a2e:	f006 f9ef 	bl	8009e10 <HAL_UART_Init>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 8003a38:	f7fd fcd5 	bl	80013e6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	480d      	ldr	r0, [pc, #52]	@ (8003a74 <MX_USART2_UART_Init+0x98>)
 8003a40:	f008 fa65 	bl	800bf0e <HAL_UARTEx_SetTxFifoThreshold>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 8003a4a:	f7fd fccc 	bl	80013e6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a4e:	2100      	movs	r1, #0
 8003a50:	4808      	ldr	r0, [pc, #32]	@ (8003a74 <MX_USART2_UART_Init+0x98>)
 8003a52:	f008 fa9a 	bl	800bf8a <HAL_UARTEx_SetRxFifoThreshold>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 8003a5c:	f7fd fcc3 	bl	80013e6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003a60:	4804      	ldr	r0, [pc, #16]	@ (8003a74 <MX_USART2_UART_Init+0x98>)
 8003a62:	f008 fa1b 	bl	800be9c <HAL_UARTEx_DisableFifoMode>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 8003a6c:	f7fd fcbb 	bl	80013e6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003a70:	bf00      	nop
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	20000448 	.word	0x20000448
 8003a78:	40004400 	.word	0x40004400

08003a7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b09e      	sub	sp, #120	@ 0x78
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a84:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	609a      	str	r2, [r3, #8]
 8003a90:	60da      	str	r2, [r3, #12]
 8003a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a94:	f107 0314 	add.w	r3, r7, #20
 8003a98:	2250      	movs	r2, #80	@ 0x50
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f00c fb55 	bl	801014c <memset>
  if(uartHandle->Instance==USART2)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a22      	ldr	r2, [pc, #136]	@ (8003b30 <HAL_UART_MspInit+0xb4>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d13d      	bne.n	8003b28 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003aac:	2302      	movs	r3, #2
 8003aae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ab4:	f107 0314 	add.w	r3, r7, #20
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f004 fae9 	bl	8008090 <HAL_RCCEx_PeriphCLKConfig>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003ac4:	f7fd fc8f 	bl	80013e6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b34 <HAL_UART_MspInit+0xb8>)
 8003aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003acc:	4a19      	ldr	r2, [pc, #100]	@ (8003b34 <HAL_UART_MspInit+0xb8>)
 8003ace:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ad2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ad4:	4b17      	ldr	r3, [pc, #92]	@ (8003b34 <HAL_UART_MspInit+0xb8>)
 8003ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ae0:	4b14      	ldr	r3, [pc, #80]	@ (8003b34 <HAL_UART_MspInit+0xb8>)
 8003ae2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ae4:	4a13      	ldr	r2, [pc, #76]	@ (8003b34 <HAL_UART_MspInit+0xb8>)
 8003ae6:	f043 0302 	orr.w	r3, r3, #2
 8003aea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003aec:	4b11      	ldr	r3, [pc, #68]	@ (8003b34 <HAL_UART_MspInit+0xb8>)
 8003aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003af8:	2318      	movs	r3, #24
 8003afa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afc:	2302      	movs	r3, #2
 8003afe:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b00:	2300      	movs	r3, #0
 8003b02:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b04:	2300      	movs	r3, #0
 8003b06:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b08:	2307      	movs	r3, #7
 8003b0a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b0c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003b10:	4619      	mov	r1, r3
 8003b12:	4809      	ldr	r0, [pc, #36]	@ (8003b38 <HAL_UART_MspInit+0xbc>)
 8003b14:	f000 fdfa 	bl	800470c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	2026      	movs	r0, #38	@ 0x26
 8003b1e:	f000 fb46 	bl	80041ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b22:	2026      	movs	r0, #38	@ 0x26
 8003b24:	f000 fb5d 	bl	80041e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003b28:	bf00      	nop
 8003b2a:	3778      	adds	r7, #120	@ 0x78
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40004400 	.word	0x40004400
 8003b34:	40021000 	.word	0x40021000
 8003b38:	48000400 	.word	0x48000400

08003b3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b3c:	480d      	ldr	r0, [pc, #52]	@ (8003b74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b3e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b40:	f7ff fedc 	bl	80038fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b44:	480c      	ldr	r0, [pc, #48]	@ (8003b78 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b46:	490d      	ldr	r1, [pc, #52]	@ (8003b7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b48:	4a0d      	ldr	r2, [pc, #52]	@ (8003b80 <LoopForever+0xe>)
  movs r3, #0
 8003b4a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003b4c:	e002      	b.n	8003b54 <LoopCopyDataInit>

08003b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b52:	3304      	adds	r3, #4

08003b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b58:	d3f9      	bcc.n	8003b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b5c:	4c0a      	ldr	r4, [pc, #40]	@ (8003b88 <LoopForever+0x16>)
  movs r3, #0
 8003b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b60:	e001      	b.n	8003b66 <LoopFillZerobss>

08003b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b64:	3204      	adds	r2, #4

08003b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b68:	d3fb      	bcc.n	8003b62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b6a:	f00c fafd 	bl	8010168 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b6e:	f7fd fb9d 	bl	80012ac <main>

08003b72 <LoopForever>:

LoopForever:
    b LoopForever
 8003b72:	e7fe      	b.n	8003b72 <LoopForever>
  ldr   r0, =_estack
 8003b74:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8003b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b7c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003b80:	080113b8 	.word	0x080113b8
  ldr r2, =_sbss
 8003b84:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003b88:	20001fe8 	.word	0x20001fe8

08003b8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b8c:	e7fe      	b.n	8003b8c <ADC1_2_IRQHandler>
	...

08003b90 <DAC_Register_Write>:

#include "i2c.h"

#include "audiodac.h"

void DAC_Register_Write(uint8_t register_addr, uint8_t data){
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af04      	add	r7, sp, #16
 8003b96:	4603      	mov	r3, r0
 8003b98:	460a      	mov	r2, r1
 8003b9a:	71fb      	strb	r3, [r7, #7]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	71bb      	strb	r3, [r7, #6]
	uint8_t i2c_buf[2];

	i2c_buf[0] = data;
 8003ba0:	79bb      	ldrb	r3, [r7, #6]
 8003ba2:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Mem_Write(&hi2c3, DAC_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);
 8003ba4:	79fb      	ldrb	r3, [r7, #7]
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	230a      	movs	r3, #10
 8003baa:	9302      	str	r3, [sp, #8]
 8003bac:	2301      	movs	r3, #1
 8003bae:	9301      	str	r3, [sp, #4]
 8003bb0:	f107 030c 	add.w	r3, r7, #12
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	218e      	movs	r1, #142	@ 0x8e
 8003bba:	4803      	ldr	r0, [pc, #12]	@ (8003bc8 <DAC_Register_Write+0x38>)
 8003bbc:	f000 fff6 	bl	8004bac <HAL_I2C_Mem_Write>

	return;
 8003bc0:	bf00      	nop
}
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	200001f0 	.word	0x200001f0

08003bcc <DAC_Register_Init>:
	HAL_I2C_Mem_Read(&hi2c3, DAC_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);

	return i2c_buf[0];
}

void DAC_Register_Init(){
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0

	DAC_Register_Write(DAC_REG_RESET , 0x80); // set system reset bit (device clears after reset)
 8003bd0:	2180      	movs	r1, #128	@ 0x80
 8003bd2:	2055      	movs	r0, #85	@ 0x55
 8003bd4:	f7ff ffdc 	bl	8003b90 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_VOL_L , 0x27); // left channel volume -6dB
 8003bd8:	2127      	movs	r1, #39	@ 0x27
 8003bda:	2040      	movs	r0, #64	@ 0x40
 8003bdc:	f7ff ffd8 	bl	8003b90 <DAC_Register_Write>
	DAC_Register_Write(DAC_REG_VOL_R , 0x27); // right channel volume -6dB
 8003be0:	2127      	movs	r1, #39	@ 0x27
 8003be2:	2041      	movs	r0, #65	@ 0x41
 8003be4:	f7ff ffd4 	bl	8003b90 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ATTEN_L , 0x27); // left channel digital attenuator -24dB
 8003be8:	2127      	movs	r1, #39	@ 0x27
 8003bea:	2044      	movs	r0, #68	@ 0x44
 8003bec:	f7ff ffd0 	bl	8003b90 <DAC_Register_Write>
	DAC_Register_Write(DAC_REG_ATTEN_R , 0x27); // right channel digital attenuator -24dB
 8003bf0:	2127      	movs	r1, #39	@ 0x27
 8003bf2:	2045      	movs	r0, #69	@ 0x45
 8003bf4:	f7ff ffcc 	bl	8003b90 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_DEMP_DGC , 0x00); // de-emphasis filter off, DAC format I2S, no digital gain, over sampling enabled
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	2046      	movs	r0, #70	@ 0x46
 8003bfc:	f7ff ffc8 	bl	8003b90 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_DAC_PWR , 0xE0); // power on bias circuitry and left/right DAC and filter
 8003c00:	21e0      	movs	r1, #224	@ 0xe0
 8003c02:	2049      	movs	r0, #73	@ 0x49
 8003c04:	f7ff ffc4 	bl	8003b90 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_SAMPLE_RATE , 0x01); // zero cross detection enable
 8003c08:	2101      	movs	r1, #1
 8003c0a:	2056      	movs	r0, #86	@ 0x56
 8003c0c:	f7ff ffc0 	bl	8003b90 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_HPA_DETECT , 0x03); // analog left/right mixer power on
 8003c10:	2103      	movs	r1, #3
 8003c12:	204b      	movs	r0, #75	@ 0x4b
 8003c14:	f7ff ffbc 	bl	8003b90 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ANALOG_MIX_SW , 0x11); // analog mixer close switch 2 and 5
 8003c18:	2111      	movs	r1, #17
 8003c1a:	2058      	movs	r0, #88	@ 0x58
 8003c1c:	f7ff ffb8 	bl	8003b90 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_DAC_PWR , 0xEC); // enable headphone amplifier
 8003c20:	21ec      	movs	r1, #236	@ 0xec
 8003c22:	2049      	movs	r0, #73	@ 0x49
 8003c24:	f7ff ffb4 	bl	8003b90 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ANALOG_CONFIG , 0x01); // VCOM power up
 8003c28:	2101      	movs	r1, #1
 8003c2a:	204a      	movs	r0, #74	@ 0x4a
 8003c2c:	f7ff ffb0 	bl	8003b90 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ANALOG_GAIN , 0x30); // power up analog front end
 8003c30:	2130      	movs	r1, #48	@ 0x30
 8003c32:	2059      	movs	r0, #89	@ 0x59
 8003c34:	f7ff ffac 	bl	8003b90 <DAC_Register_Write>

	return;
 8003c38:	bf00      	nop
}
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <Readback_Checksum>:
#include "stdint.h"
#include "string.h"

#include "eeprom.h"

uint8_t Readback_Checksum(int preset_slot){
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af04      	add	r7, sp, #16
 8003c42:	6078      	str	r0, [r7, #4]

	uint8_t i2c_buf[1];
	uint8_t checksum_address = (0x3F + (0x30 * preset_slot));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	461a      	mov	r2, r3
 8003c4a:	0052      	lsls	r2, r2, #1
 8003c4c:	4413      	add	r3, r2
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	333f      	adds	r3, #63	@ 0x3f
 8003c54:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Read(&hi2c3, EEPROM_ADDR, checksum_address, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	230a      	movs	r3, #10
 8003c5c:	9302      	str	r3, [sp, #8]
 8003c5e:	2301      	movs	r3, #1
 8003c60:	9301      	str	r3, [sp, #4]
 8003c62:	f107 030c 	add.w	r3, r7, #12
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	2301      	movs	r3, #1
 8003c6a:	21a0      	movs	r1, #160	@ 0xa0
 8003c6c:	4803      	ldr	r0, [pc, #12]	@ (8003c7c <Readback_Checksum+0x40>)
 8003c6e:	f001 f8b1 	bl	8004dd4 <HAL_I2C_Mem_Read>

    return i2c_buf[0];
 8003c72:	7b3b      	ldrb	r3, [r7, #12]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	200001f0 	.word	0x200001f0

08003c80 <EEPROM_Write_Page>:

int EEPROM_Write_Page(int page_number, uint8_t *data){
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b088      	sub	sp, #32
 8003c84:	af04      	add	r7, sp, #16
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]

	// calculate page start address
    uint8_t start_address = page_number * PAGE_SIZE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	73fb      	strb	r3, [r7, #15]

    // write page data
    HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c3, EEPROM_ADDR, start_address, I2C_MEMADD_SIZE_8BIT, data, PAGE_SIZE, 10);
 8003c92:	7bfb      	ldrb	r3, [r7, #15]
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	230a      	movs	r3, #10
 8003c98:	9302      	str	r3, [sp, #8]
 8003c9a:	2308      	movs	r3, #8
 8003c9c:	9301      	str	r3, [sp, #4]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	21a0      	movs	r1, #160	@ 0xa0
 8003ca6:	4809      	ldr	r0, [pc, #36]	@ (8003ccc <EEPROM_Write_Page+0x4c>)
 8003ca8:	f000 ff80 	bl	8004bac <HAL_I2C_Mem_Write>
 8003cac:	4603      	mov	r3, r0
 8003cae:	73bb      	strb	r3, [r7, #14]

    // wait for EEPROM write cycle to complete (typically 5ms)
    HAL_Delay(5);
 8003cb0:	2005      	movs	r0, #5
 8003cb2:	f000 f97f 	bl	8003fb4 <HAL_Delay>

    return (result == HAL_OK) ? 0 : 1;
 8003cb6:	7bbb      	ldrb	r3, [r7, #14]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	bf14      	ite	ne
 8003cbc:	2301      	movne	r3, #1
 8003cbe:	2300      	moveq	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	200001f0 	.word	0x200001f0

08003cd0 <EEPROM_Read_Page>:

int EEPROM_Read_Page(int page_number, uint8_t *data){
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af04      	add	r7, sp, #16
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]

    // calculate page start address
    uint8_t start_address = page_number * PAGE_SIZE;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	73fb      	strb	r3, [r7, #15]

    // read page data
    HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c3, EEPROM_ADDR, start_address, I2C_MEMADD_SIZE_8BIT, data, PAGE_SIZE, 10);
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	230a      	movs	r3, #10
 8003ce8:	9302      	str	r3, [sp, #8]
 8003cea:	2308      	movs	r3, #8
 8003cec:	9301      	str	r3, [sp, #4]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	21a0      	movs	r1, #160	@ 0xa0
 8003cf6:	4807      	ldr	r0, [pc, #28]	@ (8003d14 <EEPROM_Read_Page+0x44>)
 8003cf8:	f001 f86c 	bl	8004dd4 <HAL_I2C_Mem_Read>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	73bb      	strb	r3, [r7, #14]

    return (result == HAL_OK) ? 0 : 1;
 8003d00:	7bbb      	ldrb	r3, [r7, #14]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	bf14      	ite	ne
 8003d06:	2301      	movne	r3, #1
 8003d08:	2300      	moveq	r3, #0
 8003d0a:	b2db      	uxtb	r3, r3
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	200001f0 	.word	0x200001f0

08003d18 <EEPROM_Write_Byte>:

int EEPROM_Write_Byte(uint8_t byte_address, uint8_t *data){
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b088      	sub	sp, #32
 8003d1c:	af04      	add	r7, sp, #16
 8003d1e:	4603      	mov	r3, r0
 8003d20:	6039      	str	r1, [r7, #0]
 8003d22:	71fb      	strb	r3, [r7, #7]

    // write byte data
    HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c3, EEPROM_ADDR, byte_address, I2C_MEMADD_SIZE_8BIT, data, 1, 10);
 8003d24:	79fb      	ldrb	r3, [r7, #7]
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	230a      	movs	r3, #10
 8003d2a:	9302      	str	r3, [sp, #8]
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	9301      	str	r3, [sp, #4]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	2301      	movs	r3, #1
 8003d36:	21a0      	movs	r1, #160	@ 0xa0
 8003d38:	4808      	ldr	r0, [pc, #32]	@ (8003d5c <EEPROM_Write_Byte+0x44>)
 8003d3a:	f000 ff37 	bl	8004bac <HAL_I2C_Mem_Write>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	73fb      	strb	r3, [r7, #15]

    // wait for EEPROM write cycle to complete (typically 5ms)
    HAL_Delay(5);
 8003d42:	2005      	movs	r0, #5
 8003d44:	f000 f936 	bl	8003fb4 <HAL_Delay>

    return (result == HAL_OK) ? 0 : 1;
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	bf14      	ite	ne
 8003d4e:	2301      	movne	r3, #1
 8003d50:	2300      	moveq	r3, #0
 8003d52:	b2db      	uxtb	r3, r3
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	200001f0 	.word	0x200001f0

08003d60 <EEPROM_Read_Byte>:

int EEPROM_Read_Byte(uint8_t byte_address, uint8_t *data){
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af04      	add	r7, sp, #16
 8003d66:	4603      	mov	r3, r0
 8003d68:	6039      	str	r1, [r7, #0]
 8003d6a:	71fb      	strb	r3, [r7, #7]

    // read byte data
    HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c3, EEPROM_ADDR, byte_address, I2C_MEMADD_SIZE_8BIT, data, 1, 10);
 8003d6c:	79fb      	ldrb	r3, [r7, #7]
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	230a      	movs	r3, #10
 8003d72:	9302      	str	r3, [sp, #8]
 8003d74:	2301      	movs	r3, #1
 8003d76:	9301      	str	r3, [sp, #4]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	21a0      	movs	r1, #160	@ 0xa0
 8003d80:	4807      	ldr	r0, [pc, #28]	@ (8003da0 <EEPROM_Read_Byte+0x40>)
 8003d82:	f001 f827 	bl	8004dd4 <HAL_I2C_Mem_Read>
 8003d86:	4603      	mov	r3, r0
 8003d88:	73fb      	strb	r3, [r7, #15]

    return (result == HAL_OK) ? 0 : 1;
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	bf14      	ite	ne
 8003d90:	2301      	movne	r3, #1
 8003d92:	2300      	moveq	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	200001f0 	.word	0x200001f0

08003da4 <GPIO_Register_Write>:
#include "stdbool.h"

#include "i2c.h"
#include "gpioxpndr.h"

void GPIO_Register_Write(uint8_t register_addr, uint8_t data){
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af04      	add	r7, sp, #16
 8003daa:	4603      	mov	r3, r0
 8003dac:	460a      	mov	r2, r1
 8003dae:	71fb      	strb	r3, [r7, #7]
 8003db0:	4613      	mov	r3, r2
 8003db2:	71bb      	strb	r3, [r7, #6]

	uint8_t i2c_buf[2];

	i2c_buf[0] = data;
 8003db4:	79bb      	ldrb	r3, [r7, #6]
 8003db6:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Mem_Write(&hi2c3, GPIO_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);
 8003db8:	79fb      	ldrb	r3, [r7, #7]
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	230a      	movs	r3, #10
 8003dbe:	9302      	str	r3, [sp, #8]
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	9301      	str	r3, [sp, #4]
 8003dc4:	f107 030c 	add.w	r3, r7, #12
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	2301      	movs	r3, #1
 8003dcc:	21ee      	movs	r1, #238	@ 0xee
 8003dce:	4803      	ldr	r0, [pc, #12]	@ (8003ddc <GPIO_Register_Write+0x38>)
 8003dd0:	f000 feec 	bl	8004bac <HAL_I2C_Mem_Write>

	return;
 8003dd4:	bf00      	nop
}
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	200001f0 	.word	0x200001f0

08003de0 <GPIO_Register_Init>:
	HAL_I2C_Mem_Read(&hi2c3, GPIO_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);

	return i2c_buf[0];
}

void GPIO_Register_Init(){
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0

	GPIO_Register_Write(GPIO_CFG_PORT0, 0x00); // configure all of port 0 as output
 8003de4:	2100      	movs	r1, #0
 8003de6:	2006      	movs	r0, #6
 8003de8:	f7ff ffdc 	bl	8003da4 <GPIO_Register_Write>
	GPIO_Register_Write(GPIO_CFG_PORT1, 0x00); // configure all of port 1 as output
 8003dec:	2100      	movs	r1, #0
 8003dee:	2007      	movs	r0, #7
 8003df0:	f7ff ffd8 	bl	8003da4 <GPIO_Register_Write>

	GPIO_Register_Write(GPIO_OUT_PORT0, 0x00); // set initial state to all low
 8003df4:	2100      	movs	r1, #0
 8003df6:	2002      	movs	r0, #2
 8003df8:	f7ff ffd4 	bl	8003da4 <GPIO_Register_Write>
	GPIO_Register_Write(GPIO_OUT_PORT1, 0x00); // set initial state to all low
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	2003      	movs	r0, #3
 8003e00:	f7ff ffd0 	bl	8003da4 <GPIO_Register_Write>

	return;
 8003e04:	bf00      	nop
}
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <GPIO_State_Change>:

uint16_t GPIO_State_Change(int reg_bank, uint16_t gpio_reg, int bit_position, bool state) {
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	607a      	str	r2, [r7, #4]
 8003e12:	461a      	mov	r2, r3
 8003e14:	460b      	mov	r3, r1
 8003e16:	817b      	strh	r3, [r7, #10]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	727b      	strb	r3, [r7, #9]
    if (bit_position > 7) {
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b07      	cmp	r3, #7
 8003e20:	dd02      	ble.n	8003e28 <GPIO_State_Change+0x20>
        return 0xFFFF; // return an error code if bit position is out of range for an 8-bit section
 8003e22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e26:	e051      	b.n	8003ecc <GPIO_State_Change+0xc4>
    }

    if (reg_bank == 0) {
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d121      	bne.n	8003e72 <GPIO_State_Change+0x6a>
        // modify the lower byte (bits 0-7)
        if (state) {
 8003e2e:	7a7b      	ldrb	r3, [r7, #9]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00a      	beq.n	8003e4a <GPIO_State_Change+0x42>
            gpio_reg |= (1 << bit_position); // set the bit in the lower byte
 8003e34:	2201      	movs	r2, #1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	b21a      	sxth	r2, r3
 8003e3e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	b21b      	sxth	r3, r3
 8003e46:	817b      	strh	r3, [r7, #10]
 8003e48:	e00b      	b.n	8003e62 <GPIO_State_Change+0x5a>
        } else {
            gpio_reg &= ~(1 << bit_position); // clear the bit in the lower byte
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e52:	b21b      	sxth	r3, r3
 8003e54:	43db      	mvns	r3, r3
 8003e56:	b21a      	sxth	r2, r3
 8003e58:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	b21b      	sxth	r3, r3
 8003e60:	817b      	strh	r3, [r7, #10]
        }

        // write the modified low byte to the corresponding GPIO register
        uint8_t gpio_reg_low = gpio_reg & 0xFF;
 8003e62:	897b      	ldrh	r3, [r7, #10]
 8003e64:	75bb      	strb	r3, [r7, #22]
        GPIO_Register_Write(GPIO_OUT_PORT0, gpio_reg_low);
 8003e66:	7dbb      	ldrb	r3, [r7, #22]
 8003e68:	4619      	mov	r1, r3
 8003e6a:	2002      	movs	r0, #2
 8003e6c:	f7ff ff9a 	bl	8003da4 <GPIO_Register_Write>
 8003e70:	e02b      	b.n	8003eca <GPIO_State_Change+0xc2>

    } else if (reg_bank == 1) {
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d125      	bne.n	8003ec4 <GPIO_State_Change+0xbc>
        // modify the higher byte (bits 8-15)
        if (state) {
 8003e78:	7a7b      	ldrb	r3, [r7, #9]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00b      	beq.n	8003e96 <GPIO_State_Change+0x8e>
            gpio_reg |= (1 << (bit_position + 8)); // set the bit in the higher byte
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3308      	adds	r3, #8
 8003e82:	2201      	movs	r2, #1
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	b21a      	sxth	r2, r3
 8003e8a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	b21b      	sxth	r3, r3
 8003e92:	817b      	strh	r3, [r7, #10]
 8003e94:	e00c      	b.n	8003eb0 <GPIO_State_Change+0xa8>
        } else {
            gpio_reg &= ~(1 << (bit_position + 8)); // clear the bit in the higher byte
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3308      	adds	r3, #8
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	b21b      	sxth	r3, r3
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	b21a      	sxth	r2, r3
 8003ea6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	b21b      	sxth	r3, r3
 8003eae:	817b      	strh	r3, [r7, #10]
        }

        // write the modified high byte to the corresponding GPIO register
        uint8_t gpio_reg_high = (gpio_reg >> 8) & 0xFF;
 8003eb0:	897b      	ldrh	r3, [r7, #10]
 8003eb2:	0a1b      	lsrs	r3, r3, #8
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	75fb      	strb	r3, [r7, #23]
        GPIO_Register_Write(GPIO_OUT_PORT1, gpio_reg_high);
 8003eb8:	7dfb      	ldrb	r3, [r7, #23]
 8003eba:	4619      	mov	r1, r3
 8003ebc:	2003      	movs	r0, #3
 8003ebe:	f7ff ff71 	bl	8003da4 <GPIO_Register_Write>
 8003ec2:	e002      	b.n	8003eca <GPIO_State_Change+0xc2>
    } else {
        return 0xFFFF; // return error code if reg_bank is out of range
 8003ec4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ec8:	e000      	b.n	8003ecc <GPIO_State_Change+0xc4>
    }

    return gpio_reg; // return the modified 16-bit register value
 8003eca:	897b      	ldrh	r3, [r7, #10]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3718      	adds	r7, #24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ede:	2003      	movs	r0, #3
 8003ee0:	f000 f95a 	bl	8004198 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ee4:	200f      	movs	r0, #15
 8003ee6:	f000 f80d 	bl	8003f04 <HAL_InitTick>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	71fb      	strb	r3, [r7, #7]
 8003ef4:	e001      	b.n	8003efa <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003ef6:	f7fe ffbb 	bl	8002e70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003efa:	79fb      	ldrb	r3, [r7, #7]

}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003f10:	4b16      	ldr	r3, [pc, #88]	@ (8003f6c <HAL_InitTick+0x68>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d022      	beq.n	8003f5e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003f18:	4b15      	ldr	r3, [pc, #84]	@ (8003f70 <HAL_InitTick+0x6c>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	4b13      	ldr	r3, [pc, #76]	@ (8003f6c <HAL_InitTick+0x68>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003f24:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 f966 	bl	80041fe <HAL_SYSTICK_Config>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10f      	bne.n	8003f58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b0f      	cmp	r3, #15
 8003f3c:	d809      	bhi.n	8003f52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f3e:	2200      	movs	r2, #0
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	f04f 30ff 	mov.w	r0, #4294967295
 8003f46:	f000 f932 	bl	80041ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f74 <HAL_InitTick+0x70>)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6013      	str	r3, [r2, #0]
 8003f50:	e007      	b.n	8003f62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	73fb      	strb	r3, [r7, #15]
 8003f56:	e004      	b.n	8003f62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	73fb      	strb	r3, [r7, #15]
 8003f5c:	e001      	b.n	8003f62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	20000008 	.word	0x20000008
 8003f70:	20000000 	.word	0x20000000
 8003f74:	20000004 	.word	0x20000004

08003f78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f7c:	4b05      	ldr	r3, [pc, #20]	@ (8003f94 <HAL_IncTick+0x1c>)
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	4b05      	ldr	r3, [pc, #20]	@ (8003f98 <HAL_IncTick+0x20>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4413      	add	r3, r2
 8003f86:	4a03      	ldr	r2, [pc, #12]	@ (8003f94 <HAL_IncTick+0x1c>)
 8003f88:	6013      	str	r3, [r2, #0]
}
 8003f8a:	bf00      	nop
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	200004dc 	.word	0x200004dc
 8003f98:	20000008 	.word	0x20000008

08003f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8003fa0:	4b03      	ldr	r3, [pc, #12]	@ (8003fb0 <HAL_GetTick+0x14>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	200004dc 	.word	0x200004dc

08003fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fbc:	f7ff ffee 	bl	8003f9c <HAL_GetTick>
 8003fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fcc:	d004      	beq.n	8003fd8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fce:	4b09      	ldr	r3, [pc, #36]	@ (8003ff4 <HAL_Delay+0x40>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003fd8:	bf00      	nop
 8003fda:	f7ff ffdf 	bl	8003f9c <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d8f7      	bhi.n	8003fda <HAL_Delay+0x26>
  {
  }
}
 8003fea:	bf00      	nop
 8003fec:	bf00      	nop
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	20000008 	.word	0x20000008

08003ff8 <__NVIC_SetPriorityGrouping>:
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f003 0307 	and.w	r3, r3, #7
 8004006:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004008:	4b0c      	ldr	r3, [pc, #48]	@ (800403c <__NVIC_SetPriorityGrouping+0x44>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004014:	4013      	ands	r3, r2
 8004016:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004020:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004024:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800402a:	4a04      	ldr	r2, [pc, #16]	@ (800403c <__NVIC_SetPriorityGrouping+0x44>)
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	60d3      	str	r3, [r2, #12]
}
 8004030:	bf00      	nop
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr
 800403c:	e000ed00 	.word	0xe000ed00

08004040 <__NVIC_GetPriorityGrouping>:
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004044:	4b04      	ldr	r3, [pc, #16]	@ (8004058 <__NVIC_GetPriorityGrouping+0x18>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	0a1b      	lsrs	r3, r3, #8
 800404a:	f003 0307 	and.w	r3, r3, #7
}
 800404e:	4618      	mov	r0, r3
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	e000ed00 	.word	0xe000ed00

0800405c <__NVIC_EnableIRQ>:
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406a:	2b00      	cmp	r3, #0
 800406c:	db0b      	blt.n	8004086 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800406e:	79fb      	ldrb	r3, [r7, #7]
 8004070:	f003 021f 	and.w	r2, r3, #31
 8004074:	4907      	ldr	r1, [pc, #28]	@ (8004094 <__NVIC_EnableIRQ+0x38>)
 8004076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	2001      	movs	r0, #1
 800407e:	fa00 f202 	lsl.w	r2, r0, r2
 8004082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	e000e100 	.word	0xe000e100

08004098 <__NVIC_SetPriority>:
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	4603      	mov	r3, r0
 80040a0:	6039      	str	r1, [r7, #0]
 80040a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	db0a      	blt.n	80040c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	490c      	ldr	r1, [pc, #48]	@ (80040e4 <__NVIC_SetPriority+0x4c>)
 80040b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b6:	0112      	lsls	r2, r2, #4
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	440b      	add	r3, r1
 80040bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80040c0:	e00a      	b.n	80040d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	4908      	ldr	r1, [pc, #32]	@ (80040e8 <__NVIC_SetPriority+0x50>)
 80040c8:	79fb      	ldrb	r3, [r7, #7]
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	3b04      	subs	r3, #4
 80040d0:	0112      	lsls	r2, r2, #4
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	440b      	add	r3, r1
 80040d6:	761a      	strb	r2, [r3, #24]
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	e000e100 	.word	0xe000e100
 80040e8:	e000ed00 	.word	0xe000ed00

080040ec <NVIC_EncodePriority>:
{
 80040ec:	b480      	push	{r7}
 80040ee:	b089      	sub	sp, #36	@ 0x24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	f1c3 0307 	rsb	r3, r3, #7
 8004106:	2b04      	cmp	r3, #4
 8004108:	bf28      	it	cs
 800410a:	2304      	movcs	r3, #4
 800410c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	3304      	adds	r3, #4
 8004112:	2b06      	cmp	r3, #6
 8004114:	d902      	bls.n	800411c <NVIC_EncodePriority+0x30>
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	3b03      	subs	r3, #3
 800411a:	e000      	b.n	800411e <NVIC_EncodePriority+0x32>
 800411c:	2300      	movs	r3, #0
 800411e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004120:	f04f 32ff 	mov.w	r2, #4294967295
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	43da      	mvns	r2, r3
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	401a      	ands	r2, r3
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004134:	f04f 31ff 	mov.w	r1, #4294967295
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	fa01 f303 	lsl.w	r3, r1, r3
 800413e:	43d9      	mvns	r1, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004144:	4313      	orrs	r3, r2
}
 8004146:	4618      	mov	r0, r3
 8004148:	3724      	adds	r7, #36	@ 0x24
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
	...

08004154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3b01      	subs	r3, #1
 8004160:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004164:	d301      	bcc.n	800416a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004166:	2301      	movs	r3, #1
 8004168:	e00f      	b.n	800418a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800416a:	4a0a      	ldr	r2, [pc, #40]	@ (8004194 <SysTick_Config+0x40>)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3b01      	subs	r3, #1
 8004170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004172:	210f      	movs	r1, #15
 8004174:	f04f 30ff 	mov.w	r0, #4294967295
 8004178:	f7ff ff8e 	bl	8004098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800417c:	4b05      	ldr	r3, [pc, #20]	@ (8004194 <SysTick_Config+0x40>)
 800417e:	2200      	movs	r2, #0
 8004180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004182:	4b04      	ldr	r3, [pc, #16]	@ (8004194 <SysTick_Config+0x40>)
 8004184:	2207      	movs	r2, #7
 8004186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	e000e010 	.word	0xe000e010

08004198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff ff29 	bl	8003ff8 <__NVIC_SetPriorityGrouping>
}
 80041a6:	bf00      	nop
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b086      	sub	sp, #24
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	4603      	mov	r3, r0
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	607a      	str	r2, [r7, #4]
 80041ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80041bc:	f7ff ff40 	bl	8004040 <__NVIC_GetPriorityGrouping>
 80041c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	68b9      	ldr	r1, [r7, #8]
 80041c6:	6978      	ldr	r0, [r7, #20]
 80041c8:	f7ff ff90 	bl	80040ec <NVIC_EncodePriority>
 80041cc:	4602      	mov	r2, r0
 80041ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041d2:	4611      	mov	r1, r2
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff ff5f 	bl	8004098 <__NVIC_SetPriority>
}
 80041da:	bf00      	nop
 80041dc:	3718      	adds	r7, #24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b082      	sub	sp, #8
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	4603      	mov	r3, r0
 80041ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7ff ff33 	bl	800405c <__NVIC_EnableIRQ>
}
 80041f6:	bf00      	nop
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b082      	sub	sp, #8
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7ff ffa4 	bl	8004154 <SysTick_Config>
 800420c:	4603      	mov	r3, r0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e08d      	b.n	8004346 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	4b47      	ldr	r3, [pc, #284]	@ (8004350 <HAL_DMA_Init+0x138>)
 8004232:	429a      	cmp	r2, r3
 8004234:	d80f      	bhi.n	8004256 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	4b45      	ldr	r3, [pc, #276]	@ (8004354 <HAL_DMA_Init+0x13c>)
 800423e:	4413      	add	r3, r2
 8004240:	4a45      	ldr	r2, [pc, #276]	@ (8004358 <HAL_DMA_Init+0x140>)
 8004242:	fba2 2303 	umull	r2, r3, r2, r3
 8004246:	091b      	lsrs	r3, r3, #4
 8004248:	009a      	lsls	r2, r3, #2
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a42      	ldr	r2, [pc, #264]	@ (800435c <HAL_DMA_Init+0x144>)
 8004252:	641a      	str	r2, [r3, #64]	@ 0x40
 8004254:	e00e      	b.n	8004274 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	461a      	mov	r2, r3
 800425c:	4b40      	ldr	r3, [pc, #256]	@ (8004360 <HAL_DMA_Init+0x148>)
 800425e:	4413      	add	r3, r2
 8004260:	4a3d      	ldr	r2, [pc, #244]	@ (8004358 <HAL_DMA_Init+0x140>)
 8004262:	fba2 2303 	umull	r2, r3, r2, r3
 8004266:	091b      	lsrs	r3, r3, #4
 8004268:	009a      	lsls	r2, r3, #2
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a3c      	ldr	r2, [pc, #240]	@ (8004364 <HAL_DMA_Init+0x14c>)
 8004272:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800428a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800428e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004298:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f9be 	bl	8004648 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042d4:	d102      	bne.n	80042dc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80042f0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d010      	beq.n	800431c <HAL_DMA_Init+0x104>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d80c      	bhi.n	800431c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f9de 	bl	80046c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004318:	605a      	str	r2, [r3, #4]
 800431a:	e008      	b.n	800432e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	40020407 	.word	0x40020407
 8004354:	bffdfff8 	.word	0xbffdfff8
 8004358:	cccccccd 	.word	0xcccccccd
 800435c:	40020000 	.word	0x40020000
 8004360:	bffdfbf8 	.word	0xbffdfbf8
 8004364:	40020400 	.word	0x40020400

08004368 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004370:	2300      	movs	r3, #0
 8004372:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d005      	beq.n	800438c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2204      	movs	r2, #4
 8004384:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	73fb      	strb	r3, [r7, #15]
 800438a:	e037      	b.n	80043fc <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 020e 	bic.w	r2, r2, #14
 800439a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043aa:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0201 	bic.w	r2, r2, #1
 80043ba:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c0:	f003 021f 	and.w	r2, r3, #31
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c8:	2101      	movs	r1, #1
 80043ca:	fa01 f202 	lsl.w	r2, r1, r2
 80043ce:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80043d8:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00c      	beq.n	80043fc <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043f0:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80043fa:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800440c:	7bfb      	ldrb	r3, [r7, #15]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d00d      	beq.n	800444e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2204      	movs	r2, #4
 8004436:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	73fb      	strb	r3, [r7, #15]
 800444c:	e047      	b.n	80044de <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 020e 	bic.w	r2, r2, #14
 800445c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0201 	bic.w	r2, r2, #1
 800446c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004478:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800447c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004482:	f003 021f 	and.w	r2, r3, #31
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448a:	2101      	movs	r1, #1
 800448c:	fa01 f202 	lsl.w	r2, r1, r2
 8004490:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800449a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00c      	beq.n	80044be <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80044bc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	4798      	blx	r3
    }
  }
  return status;
 80044de:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004504:	f003 031f 	and.w	r3, r3, #31
 8004508:	2204      	movs	r2, #4
 800450a:	409a      	lsls	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4013      	ands	r3, r2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d026      	beq.n	8004562 <HAL_DMA_IRQHandler+0x7a>
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f003 0304 	and.w	r3, r3, #4
 800451a:	2b00      	cmp	r3, #0
 800451c:	d021      	beq.n	8004562 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b00      	cmp	r3, #0
 800452a:	d107      	bne.n	800453c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0204 	bic.w	r2, r2, #4
 800453a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004540:	f003 021f 	and.w	r2, r3, #31
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004548:	2104      	movs	r1, #4
 800454a:	fa01 f202 	lsl.w	r2, r1, r2
 800454e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004554:	2b00      	cmp	r3, #0
 8004556:	d071      	beq.n	800463c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004560:	e06c      	b.n	800463c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004566:	f003 031f 	and.w	r3, r3, #31
 800456a:	2202      	movs	r2, #2
 800456c:	409a      	lsls	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	4013      	ands	r3, r2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d02e      	beq.n	80045d4 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d029      	beq.n	80045d4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0320 	and.w	r3, r3, #32
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10b      	bne.n	80045a6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 020a 	bic.w	r2, r2, #10
 800459c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045aa:	f003 021f 	and.w	r2, r3, #31
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b2:	2102      	movs	r1, #2
 80045b4:	fa01 f202 	lsl.w	r2, r1, r2
 80045b8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d038      	beq.n	800463c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80045d2:	e033      	b.n	800463c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045d8:	f003 031f 	and.w	r3, r3, #31
 80045dc:	2208      	movs	r2, #8
 80045de:	409a      	lsls	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4013      	ands	r3, r2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d02a      	beq.n	800463e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d025      	beq.n	800463e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 020e 	bic.w	r2, r2, #14
 8004600:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004606:	f003 021f 	and.w	r2, r3, #31
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460e:	2101      	movs	r1, #1
 8004610:	fa01 f202 	lsl.w	r2, r1, r2
 8004614:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004630:	2b00      	cmp	r3, #0
 8004632:	d004      	beq.n	800463e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800463c:	bf00      	nop
 800463e:	bf00      	nop
}
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	461a      	mov	r2, r3
 8004656:	4b16      	ldr	r3, [pc, #88]	@ (80046b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004658:	429a      	cmp	r2, r3
 800465a:	d802      	bhi.n	8004662 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800465c:	4b15      	ldr	r3, [pc, #84]	@ (80046b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800465e:	617b      	str	r3, [r7, #20]
 8004660:	e001      	b.n	8004666 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004662:	4b15      	ldr	r3, [pc, #84]	@ (80046b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004664:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	b2db      	uxtb	r3, r3
 8004670:	3b08      	subs	r3, #8
 8004672:	4a12      	ldr	r2, [pc, #72]	@ (80046bc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004674:	fba2 2303 	umull	r2, r3, r2, r3
 8004678:	091b      	lsrs	r3, r3, #4
 800467a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004680:	089b      	lsrs	r3, r3, #2
 8004682:	009a      	lsls	r2, r3, #2
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	4413      	add	r3, r2
 8004688:	461a      	mov	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a0b      	ldr	r2, [pc, #44]	@ (80046c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004692:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f003 031f 	and.w	r3, r3, #31
 800469a:	2201      	movs	r2, #1
 800469c:	409a      	lsls	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80046a2:	bf00      	nop
 80046a4:	371c      	adds	r7, #28
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40020407 	.word	0x40020407
 80046b4:	40020800 	.word	0x40020800
 80046b8:	40020820 	.word	0x40020820
 80046bc:	cccccccd 	.word	0xcccccccd
 80046c0:	40020880 	.word	0x40020880

080046c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004704 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80046d8:	4413      	add	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	461a      	mov	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a08      	ldr	r2, [pc, #32]	@ (8004708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80046e6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	f003 031f 	and.w	r3, r3, #31
 80046f0:	2201      	movs	r2, #1
 80046f2:	409a      	lsls	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80046f8:	bf00      	nop
 80046fa:	3714      	adds	r7, #20
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	1000823f 	.word	0x1000823f
 8004708:	40020940 	.word	0x40020940

0800470c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004716:	2300      	movs	r3, #0
 8004718:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800471a:	e15a      	b.n	80049d2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	2101      	movs	r1, #1
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	fa01 f303 	lsl.w	r3, r1, r3
 8004728:	4013      	ands	r3, r2
 800472a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 814c 	beq.w	80049cc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f003 0303 	and.w	r3, r3, #3
 800473c:	2b01      	cmp	r3, #1
 800473e:	d005      	beq.n	800474c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004748:	2b02      	cmp	r3, #2
 800474a:	d130      	bne.n	80047ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	2203      	movs	r2, #3
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	43db      	mvns	r3, r3
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	4013      	ands	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004782:	2201      	movs	r2, #1
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	fa02 f303 	lsl.w	r3, r2, r3
 800478a:	43db      	mvns	r3, r3
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	4013      	ands	r3, r2
 8004790:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	091b      	lsrs	r3, r3, #4
 8004798:	f003 0201 	and.w	r2, r3, #1
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	fa02 f303 	lsl.w	r3, r2, r3
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f003 0303 	and.w	r3, r3, #3
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d017      	beq.n	80047ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	2203      	movs	r2, #3
 80047c6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ca:	43db      	mvns	r3, r3
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	4013      	ands	r3, r2
 80047d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	fa02 f303 	lsl.w	r3, r2, r3
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d123      	bne.n	800483e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	08da      	lsrs	r2, r3, #3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	3208      	adds	r2, #8
 80047fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004802:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	220f      	movs	r2, #15
 800480e:	fa02 f303 	lsl.w	r3, r2, r3
 8004812:	43db      	mvns	r3, r3
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	4013      	ands	r3, r2
 8004818:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	691a      	ldr	r2, [r3, #16]
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	4313      	orrs	r3, r2
 800482e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	08da      	lsrs	r2, r3, #3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	3208      	adds	r2, #8
 8004838:	6939      	ldr	r1, [r7, #16]
 800483a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	2203      	movs	r2, #3
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	43db      	mvns	r3, r3
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4013      	ands	r3, r2
 8004854:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f003 0203 	and.w	r2, r3, #3
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	4313      	orrs	r3, r2
 800486a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800487a:	2b00      	cmp	r3, #0
 800487c:	f000 80a6 	beq.w	80049cc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004880:	4b5b      	ldr	r3, [pc, #364]	@ (80049f0 <HAL_GPIO_Init+0x2e4>)
 8004882:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004884:	4a5a      	ldr	r2, [pc, #360]	@ (80049f0 <HAL_GPIO_Init+0x2e4>)
 8004886:	f043 0301 	orr.w	r3, r3, #1
 800488a:	6613      	str	r3, [r2, #96]	@ 0x60
 800488c:	4b58      	ldr	r3, [pc, #352]	@ (80049f0 <HAL_GPIO_Init+0x2e4>)
 800488e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	60bb      	str	r3, [r7, #8]
 8004896:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004898:	4a56      	ldr	r2, [pc, #344]	@ (80049f4 <HAL_GPIO_Init+0x2e8>)
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	089b      	lsrs	r3, r3, #2
 800489e:	3302      	adds	r3, #2
 80048a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f003 0303 	and.w	r3, r3, #3
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	220f      	movs	r2, #15
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	43db      	mvns	r3, r3
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	4013      	ands	r3, r2
 80048ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80048c2:	d01f      	beq.n	8004904 <HAL_GPIO_Init+0x1f8>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a4c      	ldr	r2, [pc, #304]	@ (80049f8 <HAL_GPIO_Init+0x2ec>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d019      	beq.n	8004900 <HAL_GPIO_Init+0x1f4>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a4b      	ldr	r2, [pc, #300]	@ (80049fc <HAL_GPIO_Init+0x2f0>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d013      	beq.n	80048fc <HAL_GPIO_Init+0x1f0>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a4a      	ldr	r2, [pc, #296]	@ (8004a00 <HAL_GPIO_Init+0x2f4>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d00d      	beq.n	80048f8 <HAL_GPIO_Init+0x1ec>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a49      	ldr	r2, [pc, #292]	@ (8004a04 <HAL_GPIO_Init+0x2f8>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d007      	beq.n	80048f4 <HAL_GPIO_Init+0x1e8>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a48      	ldr	r2, [pc, #288]	@ (8004a08 <HAL_GPIO_Init+0x2fc>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d101      	bne.n	80048f0 <HAL_GPIO_Init+0x1e4>
 80048ec:	2305      	movs	r3, #5
 80048ee:	e00a      	b.n	8004906 <HAL_GPIO_Init+0x1fa>
 80048f0:	2306      	movs	r3, #6
 80048f2:	e008      	b.n	8004906 <HAL_GPIO_Init+0x1fa>
 80048f4:	2304      	movs	r3, #4
 80048f6:	e006      	b.n	8004906 <HAL_GPIO_Init+0x1fa>
 80048f8:	2303      	movs	r3, #3
 80048fa:	e004      	b.n	8004906 <HAL_GPIO_Init+0x1fa>
 80048fc:	2302      	movs	r3, #2
 80048fe:	e002      	b.n	8004906 <HAL_GPIO_Init+0x1fa>
 8004900:	2301      	movs	r3, #1
 8004902:	e000      	b.n	8004906 <HAL_GPIO_Init+0x1fa>
 8004904:	2300      	movs	r3, #0
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	f002 0203 	and.w	r2, r2, #3
 800490c:	0092      	lsls	r2, r2, #2
 800490e:	4093      	lsls	r3, r2
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004916:	4937      	ldr	r1, [pc, #220]	@ (80049f4 <HAL_GPIO_Init+0x2e8>)
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	089b      	lsrs	r3, r3, #2
 800491c:	3302      	adds	r3, #2
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004924:	4b39      	ldr	r3, [pc, #228]	@ (8004a0c <HAL_GPIO_Init+0x300>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	43db      	mvns	r3, r3
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	4013      	ands	r3, r2
 8004932:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	4313      	orrs	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004948:	4a30      	ldr	r2, [pc, #192]	@ (8004a0c <HAL_GPIO_Init+0x300>)
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800494e:	4b2f      	ldr	r3, [pc, #188]	@ (8004a0c <HAL_GPIO_Init+0x300>)
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	43db      	mvns	r3, r3
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	4013      	ands	r3, r2
 800495c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4313      	orrs	r3, r2
 8004970:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004972:	4a26      	ldr	r2, [pc, #152]	@ (8004a0c <HAL_GPIO_Init+0x300>)
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004978:	4b24      	ldr	r3, [pc, #144]	@ (8004a0c <HAL_GPIO_Init+0x300>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	43db      	mvns	r3, r3
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	4013      	ands	r3, r2
 8004986:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4313      	orrs	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800499c:	4a1b      	ldr	r2, [pc, #108]	@ (8004a0c <HAL_GPIO_Init+0x300>)
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80049a2:	4b1a      	ldr	r3, [pc, #104]	@ (8004a0c <HAL_GPIO_Init+0x300>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	43db      	mvns	r3, r3
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	4013      	ands	r3, r2
 80049b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80049c6:	4a11      	ldr	r2, [pc, #68]	@ (8004a0c <HAL_GPIO_Init+0x300>)
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	3301      	adds	r3, #1
 80049d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	fa22 f303 	lsr.w	r3, r2, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f47f ae9d 	bne.w	800471c <HAL_GPIO_Init+0x10>
  }
}
 80049e2:	bf00      	nop
 80049e4:	bf00      	nop
 80049e6:	371c      	adds	r7, #28
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	40021000 	.word	0x40021000
 80049f4:	40010000 	.word	0x40010000
 80049f8:	48000400 	.word	0x48000400
 80049fc:	48000800 	.word	0x48000800
 8004a00:	48000c00 	.word	0x48000c00
 8004a04:	48001000 	.word	0x48001000
 8004a08:	48001400 	.word	0x48001400
 8004a0c:	40010400 	.word	0x40010400

08004a10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	460b      	mov	r3, r1
 8004a1a:	807b      	strh	r3, [r7, #2]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a20:	787b      	ldrb	r3, [r7, #1]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a26:	887a      	ldrh	r2, [r7, #2]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a2c:	e002      	b.n	8004a34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a2e:	887a      	ldrh	r2, [r7, #2]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a52:	887a      	ldrh	r2, [r7, #2]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4013      	ands	r3, r2
 8004a58:	041a      	lsls	r2, r3, #16
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	43d9      	mvns	r1, r3
 8004a5e:	887b      	ldrh	r3, [r7, #2]
 8004a60:	400b      	ands	r3, r1
 8004a62:	431a      	orrs	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	619a      	str	r2, [r3, #24]
}
 8004a68:	bf00      	nop
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e08d      	b.n	8004ba2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d106      	bne.n	8004aa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7fc fadc 	bl	8001058 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2224      	movs	r2, #36	@ 0x24
 8004aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0201 	bic.w	r2, r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004ac4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ad4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d107      	bne.n	8004aee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004aea:	609a      	str	r2, [r3, #8]
 8004aec:	e006      	b.n	8004afc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689a      	ldr	r2, [r3, #8]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004afa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d108      	bne.n	8004b16 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b12:	605a      	str	r2, [r3, #4]
 8004b14:	e007      	b.n	8004b26 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6812      	ldr	r2, [r2, #0]
 8004b30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004b34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691a      	ldr	r2, [r3, #16]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	69d9      	ldr	r1, [r3, #28]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a1a      	ldr	r2, [r3, #32]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
	...

08004bac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b088      	sub	sp, #32
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	4608      	mov	r0, r1
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	461a      	mov	r2, r3
 8004bba:	4603      	mov	r3, r0
 8004bbc:	817b      	strh	r3, [r7, #10]
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	813b      	strh	r3, [r7, #8]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b20      	cmp	r3, #32
 8004bd0:	f040 80f9 	bne.w	8004dc6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d002      	beq.n	8004be0 <HAL_I2C_Mem_Write+0x34>
 8004bda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d105      	bne.n	8004bec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004be6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0ed      	b.n	8004dc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d101      	bne.n	8004bfa <HAL_I2C_Mem_Write+0x4e>
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	e0e6      	b.n	8004dc8 <HAL_I2C_Mem_Write+0x21c>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c02:	f7ff f9cb 	bl	8003f9c <HAL_GetTick>
 8004c06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	2319      	movs	r3, #25
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 fac3 	bl	80051a0 <I2C_WaitOnFlagUntilTimeout>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e0d1      	b.n	8004dc8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2221      	movs	r2, #33	@ 0x21
 8004c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2240      	movs	r2, #64	@ 0x40
 8004c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a3a      	ldr	r2, [r7, #32]
 8004c3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004c44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c4c:	88f8      	ldrh	r0, [r7, #6]
 8004c4e:	893a      	ldrh	r2, [r7, #8]
 8004c50:	8979      	ldrh	r1, [r7, #10]
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	9301      	str	r3, [sp, #4]
 8004c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f000 f9d3 	bl	8005008 <I2C_RequestMemoryWrite>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d005      	beq.n	8004c74 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e0a9      	b.n	8004dc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	2bff      	cmp	r3, #255	@ 0xff
 8004c7c:	d90e      	bls.n	8004c9c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	22ff      	movs	r2, #255	@ 0xff
 8004c82:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	8979      	ldrh	r1, [r7, #10]
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 fc47 	bl	8005528 <I2C_TransferConfig>
 8004c9a:	e00f      	b.n	8004cbc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	8979      	ldrh	r1, [r7, #10]
 8004cae:	2300      	movs	r3, #0
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 fc36 	bl	8005528 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 fac6 	bl	8005252 <I2C_WaitOnTXISFlagUntilTimeout>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e07b      	b.n	8004dc8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd4:	781a      	ldrb	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce0:	1c5a      	adds	r2, r3, #1
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	3b01      	subs	r3, #1
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d034      	beq.n	8004d74 <HAL_I2C_Mem_Write+0x1c8>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d130      	bne.n	8004d74 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d18:	2200      	movs	r2, #0
 8004d1a:	2180      	movs	r1, #128	@ 0x80
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 fa3f 	bl	80051a0 <I2C_WaitOnFlagUntilTimeout>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e04d      	b.n	8004dc8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2bff      	cmp	r3, #255	@ 0xff
 8004d34:	d90e      	bls.n	8004d54 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	22ff      	movs	r2, #255	@ 0xff
 8004d3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	8979      	ldrh	r1, [r7, #10]
 8004d44:	2300      	movs	r3, #0
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 fbeb 	bl	8005528 <I2C_TransferConfig>
 8004d52:	e00f      	b.n	8004d74 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	8979      	ldrh	r1, [r7, #10]
 8004d66:	2300      	movs	r3, #0
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 fbda 	bl	8005528 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d19e      	bne.n	8004cbc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 faac 	bl	80052e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e01a      	b.n	8004dc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2220      	movs	r2, #32
 8004d98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6859      	ldr	r1, [r3, #4]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd0 <HAL_I2C_Mem_Write+0x224>)
 8004da6:	400b      	ands	r3, r1
 8004da8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2220      	movs	r2, #32
 8004dae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	e000      	b.n	8004dc8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004dc6:	2302      	movs	r3, #2
  }
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	fe00e800 	.word	0xfe00e800

08004dd4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b088      	sub	sp, #32
 8004dd8:	af02      	add	r7, sp, #8
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	4608      	mov	r0, r1
 8004dde:	4611      	mov	r1, r2
 8004de0:	461a      	mov	r2, r3
 8004de2:	4603      	mov	r3, r0
 8004de4:	817b      	strh	r3, [r7, #10]
 8004de6:	460b      	mov	r3, r1
 8004de8:	813b      	strh	r3, [r7, #8]
 8004dea:	4613      	mov	r3, r2
 8004dec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b20      	cmp	r3, #32
 8004df8:	f040 80fd 	bne.w	8004ff6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d002      	beq.n	8004e08 <HAL_I2C_Mem_Read+0x34>
 8004e02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d105      	bne.n	8004e14 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e0e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e0f1      	b.n	8004ff8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d101      	bne.n	8004e22 <HAL_I2C_Mem_Read+0x4e>
 8004e1e:	2302      	movs	r3, #2
 8004e20:	e0ea      	b.n	8004ff8 <HAL_I2C_Mem_Read+0x224>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e2a:	f7ff f8b7 	bl	8003f9c <HAL_GetTick>
 8004e2e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	2319      	movs	r3, #25
 8004e36:	2201      	movs	r2, #1
 8004e38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 f9af 	bl	80051a0 <I2C_WaitOnFlagUntilTimeout>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e0d5      	b.n	8004ff8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2222      	movs	r2, #34	@ 0x22
 8004e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2240      	movs	r2, #64	@ 0x40
 8004e58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6a3a      	ldr	r2, [r7, #32]
 8004e66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004e6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e74:	88f8      	ldrh	r0, [r7, #6]
 8004e76:	893a      	ldrh	r2, [r7, #8]
 8004e78:	8979      	ldrh	r1, [r7, #10]
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	9301      	str	r3, [sp, #4]
 8004e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	4603      	mov	r3, r0
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 f913 	bl	80050b0 <I2C_RequestMemoryRead>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d005      	beq.n	8004e9c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e0ad      	b.n	8004ff8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	2bff      	cmp	r3, #255	@ 0xff
 8004ea4:	d90e      	bls.n	8004ec4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	22ff      	movs	r2, #255	@ 0xff
 8004eaa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eb0:	b2da      	uxtb	r2, r3
 8004eb2:	8979      	ldrh	r1, [r7, #10]
 8004eb4:	4b52      	ldr	r3, [pc, #328]	@ (8005000 <HAL_I2C_Mem_Read+0x22c>)
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f000 fb33 	bl	8005528 <I2C_TransferConfig>
 8004ec2:	e00f      	b.n	8004ee4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	8979      	ldrh	r1, [r7, #10]
 8004ed6:	4b4a      	ldr	r3, [pc, #296]	@ (8005000 <HAL_I2C_Mem_Read+0x22c>)
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f000 fb22 	bl	8005528 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eea:	2200      	movs	r2, #0
 8004eec:	2104      	movs	r1, #4
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 f956 	bl	80051a0 <I2C_WaitOnFlagUntilTimeout>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e07c      	b.n	8004ff8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d034      	beq.n	8004fa4 <HAL_I2C_Mem_Read+0x1d0>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d130      	bne.n	8004fa4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f48:	2200      	movs	r2, #0
 8004f4a:	2180      	movs	r1, #128	@ 0x80
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 f927 	bl	80051a0 <I2C_WaitOnFlagUntilTimeout>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e04d      	b.n	8004ff8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	2bff      	cmp	r3, #255	@ 0xff
 8004f64:	d90e      	bls.n	8004f84 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	22ff      	movs	r2, #255	@ 0xff
 8004f6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	8979      	ldrh	r1, [r7, #10]
 8004f74:	2300      	movs	r3, #0
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 fad3 	bl	8005528 <I2C_TransferConfig>
 8004f82:	e00f      	b.n	8004fa4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	8979      	ldrh	r1, [r7, #10]
 8004f96:	2300      	movs	r3, #0
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 fac2 	bl	8005528 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d19a      	bne.n	8004ee4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 f994 	bl	80052e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e01a      	b.n	8004ff8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6859      	ldr	r1, [r3, #4]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8005004 <HAL_I2C_Mem_Read+0x230>)
 8004fd6:	400b      	ands	r3, r1
 8004fd8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	e000      	b.n	8004ff8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004ff6:	2302      	movs	r3, #2
  }
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3718      	adds	r7, #24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	80002400 	.word	0x80002400
 8005004:	fe00e800 	.word	0xfe00e800

08005008 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af02      	add	r7, sp, #8
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	4608      	mov	r0, r1
 8005012:	4611      	mov	r1, r2
 8005014:	461a      	mov	r2, r3
 8005016:	4603      	mov	r3, r0
 8005018:	817b      	strh	r3, [r7, #10]
 800501a:	460b      	mov	r3, r1
 800501c:	813b      	strh	r3, [r7, #8]
 800501e:	4613      	mov	r3, r2
 8005020:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005022:	88fb      	ldrh	r3, [r7, #6]
 8005024:	b2da      	uxtb	r2, r3
 8005026:	8979      	ldrh	r1, [r7, #10]
 8005028:	4b20      	ldr	r3, [pc, #128]	@ (80050ac <I2C_RequestMemoryWrite+0xa4>)
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 fa79 	bl	8005528 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005036:	69fa      	ldr	r2, [r7, #28]
 8005038:	69b9      	ldr	r1, [r7, #24]
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f000 f909 	bl	8005252 <I2C_WaitOnTXISFlagUntilTimeout>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e02c      	b.n	80050a4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800504a:	88fb      	ldrh	r3, [r7, #6]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d105      	bne.n	800505c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005050:	893b      	ldrh	r3, [r7, #8]
 8005052:	b2da      	uxtb	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	629a      	str	r2, [r3, #40]	@ 0x28
 800505a:	e015      	b.n	8005088 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800505c:	893b      	ldrh	r3, [r7, #8]
 800505e:	0a1b      	lsrs	r3, r3, #8
 8005060:	b29b      	uxth	r3, r3
 8005062:	b2da      	uxtb	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800506a:	69fa      	ldr	r2, [r7, #28]
 800506c:	69b9      	ldr	r1, [r7, #24]
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f000 f8ef 	bl	8005252 <I2C_WaitOnTXISFlagUntilTimeout>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e012      	b.n	80050a4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800507e:	893b      	ldrh	r3, [r7, #8]
 8005080:	b2da      	uxtb	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	2200      	movs	r2, #0
 8005090:	2180      	movs	r1, #128	@ 0x80
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f000 f884 	bl	80051a0 <I2C_WaitOnFlagUntilTimeout>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e000      	b.n	80050a4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	80002000 	.word	0x80002000

080050b0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af02      	add	r7, sp, #8
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	4608      	mov	r0, r1
 80050ba:	4611      	mov	r1, r2
 80050bc:	461a      	mov	r2, r3
 80050be:	4603      	mov	r3, r0
 80050c0:	817b      	strh	r3, [r7, #10]
 80050c2:	460b      	mov	r3, r1
 80050c4:	813b      	strh	r3, [r7, #8]
 80050c6:	4613      	mov	r3, r2
 80050c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80050ca:	88fb      	ldrh	r3, [r7, #6]
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	8979      	ldrh	r1, [r7, #10]
 80050d0:	4b20      	ldr	r3, [pc, #128]	@ (8005154 <I2C_RequestMemoryRead+0xa4>)
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	2300      	movs	r3, #0
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f000 fa26 	bl	8005528 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050dc:	69fa      	ldr	r2, [r7, #28]
 80050de:	69b9      	ldr	r1, [r7, #24]
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 f8b6 	bl	8005252 <I2C_WaitOnTXISFlagUntilTimeout>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d001      	beq.n	80050f0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e02c      	b.n	800514a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050f0:	88fb      	ldrh	r3, [r7, #6]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d105      	bne.n	8005102 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050f6:	893b      	ldrh	r3, [r7, #8]
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8005100:	e015      	b.n	800512e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005102:	893b      	ldrh	r3, [r7, #8]
 8005104:	0a1b      	lsrs	r3, r3, #8
 8005106:	b29b      	uxth	r3, r3
 8005108:	b2da      	uxtb	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005110:	69fa      	ldr	r2, [r7, #28]
 8005112:	69b9      	ldr	r1, [r7, #24]
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 f89c 	bl	8005252 <I2C_WaitOnTXISFlagUntilTimeout>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e012      	b.n	800514a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005124:	893b      	ldrh	r3, [r7, #8]
 8005126:	b2da      	uxtb	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	2200      	movs	r2, #0
 8005136:	2140      	movs	r1, #64	@ 0x40
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f000 f831 	bl	80051a0 <I2C_WaitOnFlagUntilTimeout>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e000      	b.n	800514a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	80002000 	.word	0x80002000

08005158 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b02      	cmp	r3, #2
 800516c:	d103      	bne.n	8005176 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2200      	movs	r2, #0
 8005174:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b01      	cmp	r3, #1
 8005182:	d007      	beq.n	8005194 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	699a      	ldr	r2, [r3, #24]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0201 	orr.w	r2, r2, #1
 8005192:	619a      	str	r2, [r3, #24]
  }
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	603b      	str	r3, [r7, #0]
 80051ac:	4613      	mov	r3, r2
 80051ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051b0:	e03b      	b.n	800522a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	6839      	ldr	r1, [r7, #0]
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f000 f8d6 	bl	8005368 <I2C_IsErrorOccurred>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e041      	b.n	800524a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051cc:	d02d      	beq.n	800522a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ce:	f7fe fee5 	bl	8003f9c <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d302      	bcc.n	80051e4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d122      	bne.n	800522a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	699a      	ldr	r2, [r3, #24]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	4013      	ands	r3, r2
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	bf0c      	ite	eq
 80051f4:	2301      	moveq	r3, #1
 80051f6:	2300      	movne	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	461a      	mov	r2, r3
 80051fc:	79fb      	ldrb	r3, [r7, #7]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d113      	bne.n	800522a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005206:	f043 0220 	orr.w	r2, r3, #32
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2220      	movs	r2, #32
 8005212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e00f      	b.n	800524a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	699a      	ldr	r2, [r3, #24]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4013      	ands	r3, r2
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	429a      	cmp	r2, r3
 8005238:	bf0c      	ite	eq
 800523a:	2301      	moveq	r3, #1
 800523c:	2300      	movne	r3, #0
 800523e:	b2db      	uxtb	r3, r3
 8005240:	461a      	mov	r2, r3
 8005242:	79fb      	ldrb	r3, [r7, #7]
 8005244:	429a      	cmp	r2, r3
 8005246:	d0b4      	beq.n	80051b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b084      	sub	sp, #16
 8005256:	af00      	add	r7, sp, #0
 8005258:	60f8      	str	r0, [r7, #12]
 800525a:	60b9      	str	r1, [r7, #8]
 800525c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800525e:	e033      	b.n	80052c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	68b9      	ldr	r1, [r7, #8]
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 f87f 	bl	8005368 <I2C_IsErrorOccurred>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e031      	b.n	80052d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527a:	d025      	beq.n	80052c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800527c:	f7fe fe8e 	bl	8003f9c <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	429a      	cmp	r2, r3
 800528a:	d302      	bcc.n	8005292 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d11a      	bne.n	80052c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b02      	cmp	r3, #2
 800529e:	d013      	beq.n	80052c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a4:	f043 0220 	orr.w	r2, r3, #32
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e007      	b.n	80052d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d1c4      	bne.n	8005260 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052ec:	e02f      	b.n	800534e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	68b9      	ldr	r1, [r7, #8]
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f000 f838 	bl	8005368 <I2C_IsErrorOccurred>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e02d      	b.n	800535e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005302:	f7fe fe4b 	bl	8003f9c <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	429a      	cmp	r2, r3
 8005310:	d302      	bcc.n	8005318 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d11a      	bne.n	800534e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b20      	cmp	r3, #32
 8005324:	d013      	beq.n	800534e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800532a:	f043 0220 	orr.w	r2, r3, #32
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2220      	movs	r2, #32
 8005336:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e007      	b.n	800535e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	f003 0320 	and.w	r3, r3, #32
 8005358:	2b20      	cmp	r3, #32
 800535a:	d1c8      	bne.n	80052ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
	...

08005368 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b08a      	sub	sp, #40	@ 0x28
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005374:	2300      	movs	r3, #0
 8005376:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005382:	2300      	movs	r3, #0
 8005384:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	f003 0310 	and.w	r3, r3, #16
 8005390:	2b00      	cmp	r3, #0
 8005392:	d068      	beq.n	8005466 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2210      	movs	r2, #16
 800539a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800539c:	e049      	b.n	8005432 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a4:	d045      	beq.n	8005432 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80053a6:	f7fe fdf9 	bl	8003f9c <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d302      	bcc.n	80053bc <I2C_IsErrorOccurred+0x54>
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d13a      	bne.n	8005432 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053de:	d121      	bne.n	8005424 <I2C_IsErrorOccurred+0xbc>
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053e6:	d01d      	beq.n	8005424 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80053e8:	7cfb      	ldrb	r3, [r7, #19]
 80053ea:	2b20      	cmp	r3, #32
 80053ec:	d01a      	beq.n	8005424 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053fc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80053fe:	f7fe fdcd 	bl	8003f9c <HAL_GetTick>
 8005402:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005404:	e00e      	b.n	8005424 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005406:	f7fe fdc9 	bl	8003f9c <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	2b19      	cmp	r3, #25
 8005412:	d907      	bls.n	8005424 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	f043 0320 	orr.w	r3, r3, #32
 800541a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005422:	e006      	b.n	8005432 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	f003 0320 	and.w	r3, r3, #32
 800542e:	2b20      	cmp	r3, #32
 8005430:	d1e9      	bne.n	8005406 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	f003 0320 	and.w	r3, r3, #32
 800543c:	2b20      	cmp	r3, #32
 800543e:	d003      	beq.n	8005448 <I2C_IsErrorOccurred+0xe0>
 8005440:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005444:	2b00      	cmp	r3, #0
 8005446:	d0aa      	beq.n	800539e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005448:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800544c:	2b00      	cmp	r3, #0
 800544e:	d103      	bne.n	8005458 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2220      	movs	r2, #32
 8005456:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	f043 0304 	orr.w	r3, r3, #4
 800545e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00b      	beq.n	8005490 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	f043 0301 	orr.w	r3, r3, #1
 800547e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005488:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00b      	beq.n	80054b2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	f043 0308 	orr.w	r3, r3, #8
 80054a0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80054aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00b      	beq.n	80054d4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80054bc:	6a3b      	ldr	r3, [r7, #32]
 80054be:	f043 0302 	orr.w	r3, r3, #2
 80054c2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80054d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d01c      	beq.n	8005516 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f7ff fe3b 	bl	8005158 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6859      	ldr	r1, [r3, #4]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005524 <I2C_IsErrorOccurred+0x1bc>)
 80054ee:	400b      	ands	r3, r1
 80054f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	431a      	orrs	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2220      	movs	r2, #32
 8005502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005516:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800551a:	4618      	mov	r0, r3
 800551c:	3728      	adds	r7, #40	@ 0x28
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	fe00e800 	.word	0xfe00e800

08005528 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	607b      	str	r3, [r7, #4]
 8005532:	460b      	mov	r3, r1
 8005534:	817b      	strh	r3, [r7, #10]
 8005536:	4613      	mov	r3, r2
 8005538:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800553a:	897b      	ldrh	r3, [r7, #10]
 800553c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005540:	7a7b      	ldrb	r3, [r7, #9]
 8005542:	041b      	lsls	r3, r3, #16
 8005544:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005548:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	4313      	orrs	r3, r2
 8005552:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005556:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	0d5b      	lsrs	r3, r3, #21
 8005562:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005566:	4b08      	ldr	r3, [pc, #32]	@ (8005588 <I2C_TransferConfig+0x60>)
 8005568:	430b      	orrs	r3, r1
 800556a:	43db      	mvns	r3, r3
 800556c:	ea02 0103 	and.w	r1, r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	430a      	orrs	r2, r1
 8005578:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800557a:	bf00      	nop
 800557c:	371c      	adds	r7, #28
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	03ff63ff 	.word	0x03ff63ff

0800558c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b20      	cmp	r3, #32
 80055a0:	d138      	bne.n	8005614 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d101      	bne.n	80055b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80055ac:	2302      	movs	r3, #2
 80055ae:	e032      	b.n	8005616 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2224      	movs	r2, #36	@ 0x24
 80055bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 0201 	bic.w	r2, r2, #1
 80055ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80055de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6819      	ldr	r1, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0201 	orr.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	e000      	b.n	8005616 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005614:	2302      	movs	r3, #2
  }
}
 8005616:	4618      	mov	r0, r3
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005622:	b480      	push	{r7}
 8005624:	b085      	sub	sp, #20
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
 800562a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b20      	cmp	r3, #32
 8005636:	d139      	bne.n	80056ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800563e:	2b01      	cmp	r3, #1
 8005640:	d101      	bne.n	8005646 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005642:	2302      	movs	r3, #2
 8005644:	e033      	b.n	80056ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2224      	movs	r2, #36	@ 0x24
 8005652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f022 0201 	bic.w	r2, r2, #1
 8005664:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005674:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	021b      	lsls	r3, r3, #8
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0201 	orr.w	r2, r2, #1
 8005696:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2220      	movs	r2, #32
 800569c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80056a8:	2300      	movs	r3, #0
 80056aa:	e000      	b.n	80056ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80056ac:	2302      	movs	r3, #2
  }
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
	...

080056bc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b088      	sub	sp, #32
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e0d0      	b.n	8005870 <HAL_I2S_Init+0x1b4>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d106      	bne.n	80056e8 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7fb fd3a 	bl	800115c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2202      	movs	r2, #2
 80056ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6812      	ldr	r2, [r2, #0]
 80056fa:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80056fe:	f023 030f 	bic.w	r3, r3, #15
 8005702:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2202      	movs	r2, #2
 800570a:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	2b02      	cmp	r3, #2
 8005712:	d061      	beq.n	80057d8 <HAL_I2S_Init+0x11c>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d102      	bne.n	8005722 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800571c:	2310      	movs	r3, #16
 800571e:	617b      	str	r3, [r7, #20]
 8005720:	e001      	b.n	8005726 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005722:	2320      	movs	r3, #32
 8005724:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	2b20      	cmp	r3, #32
 800572c:	d802      	bhi.n	8005734 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005734:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005738:	f002 fee6 	bl	8008508 <HAL_RCCEx_GetPeriphCLKFreq>
 800573c:	60f8      	str	r0, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005746:	d125      	bne.n	8005794 <HAL_I2S_Init+0xd8>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d010      	beq.n	8005772 <HAL_I2S_Init+0xb6>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	fbb2 f2f3 	udiv	r2, r2, r3
 800575a:	4613      	mov	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	005b      	lsls	r3, r3, #1
 8005762:	461a      	mov	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	fbb2 f3f3 	udiv	r3, r2, r3
 800576c:	3305      	adds	r3, #5
 800576e:	613b      	str	r3, [r7, #16]
 8005770:	e01f      	b.n	80057b2 <HAL_I2S_Init+0xf6>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	00db      	lsls	r3, r3, #3
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	fbb2 f2f3 	udiv	r2, r2, r3
 800577c:	4613      	mov	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	005b      	lsls	r3, r3, #1
 8005784:	461a      	mov	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	fbb2 f3f3 	udiv	r3, r2, r3
 800578e:	3305      	adds	r3, #5
 8005790:	613b      	str	r3, [r7, #16]
 8005792:	e00e      	b.n	80057b2 <HAL_I2S_Init+0xf6>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	fbb2 f2f3 	udiv	r2, r2, r3
 800579c:	4613      	mov	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	461a      	mov	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ae:	3305      	adds	r3, #5
 80057b0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	4a30      	ldr	r2, [pc, #192]	@ (8005878 <HAL_I2S_Init+0x1bc>)
 80057b6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ba:	08db      	lsrs	r3, r3, #3
 80057bc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	085b      	lsrs	r3, r3, #1
 80057ce:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	021b      	lsls	r3, r3, #8
 80057d4:	61bb      	str	r3, [r7, #24]
 80057d6:	e003      	b.n	80057e0 <HAL_I2S_Init+0x124>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80057d8:	2302      	movs	r3, #2
 80057da:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80057dc:	2300      	movs	r3, #0
 80057de:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d902      	bls.n	80057ec <HAL_I2S_Init+0x130>
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	2bff      	cmp	r3, #255	@ 0xff
 80057ea:	d907      	bls.n	80057fc <HAL_I2S_Init+0x140>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f0:	f043 0210 	orr.w	r2, r3, #16
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e039      	b.n	8005870 <HAL_I2S_Init+0x1b4>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	691a      	ldr	r2, [r3, #16]
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	ea42 0103 	orr.w	r1, r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	69fa      	ldr	r2, [r7, #28]
 800580c:	430a      	orrs	r2, r1
 800580e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800581a:	f023 030f 	bic.w	r3, r3, #15
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	6851      	ldr	r1, [r2, #4]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	6892      	ldr	r2, [r2, #8]
 8005826:	4311      	orrs	r1, r2
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	68d2      	ldr	r2, [r2, #12]
 800582c:	4311      	orrs	r1, r2
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	6992      	ldr	r2, [r2, #24]
 8005832:	430a      	orrs	r2, r1
 8005834:	431a      	orrs	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800583e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	2b30      	cmp	r3, #48	@ 0x30
 8005846:	d003      	beq.n	8005850 <HAL_I2S_Init+0x194>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	2bb0      	cmp	r3, #176	@ 0xb0
 800584e:	d107      	bne.n	8005860 <HAL_I2S_Init+0x1a4>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	69da      	ldr	r2, [r3, #28]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800585e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3720      	adds	r7, #32
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	cccccccd 	.word	0xcccccccd

0800587c <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	603b      	str	r3, [r7, #0]
 8005888:	4613      	mov	r3, r2
 800588a:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d002      	beq.n	8005898 <HAL_I2S_Transmit+0x1c>
 8005892:	88fb      	ldrh	r3, [r7, #6]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e0d8      	b.n	8005a4e <HAL_I2S_Transmit+0x1d2>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d001      	beq.n	80058ac <HAL_I2S_Transmit+0x30>
  {
    return HAL_BUSY;
 80058a8:	2302      	movs	r3, #2
 80058aa:	e0d0      	b.n	8005a4e <HAL_I2S_Transmit+0x1d2>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d101      	bne.n	80058bc <HAL_I2S_Transmit+0x40>
 80058b8:	2302      	movs	r3, #2
 80058ba:	e0c8      	b.n	8005a4e <HAL_I2S_Transmit+0x1d2>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2203      	movs	r2, #3
 80058c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pTxBuffPtr = pData;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	2b03      	cmp	r3, #3
 80058e8:	d002      	beq.n	80058f0 <HAL_I2S_Transmit+0x74>
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2b05      	cmp	r3, #5
 80058ee:	d10a      	bne.n	8005906 <HAL_I2S_Transmit+0x8a>
  {
    hi2s->TxXferSize = (Size << 1U);
 80058f0:	88fb      	ldrh	r3, [r7, #6]
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 80058fa:	88fb      	ldrh	r3, [r7, #6]
 80058fc:	005b      	lsls	r3, r3, #1
 80058fe:	b29a      	uxth	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	845a      	strh	r2, [r3, #34]	@ 0x22
 8005904:	e005      	b.n	8005912 <HAL_I2S_Transmit+0x96>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	88fa      	ldrh	r2, [r7, #6]
 800590a:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	88fa      	ldrh	r2, [r7, #6]
 8005910:	845a      	strh	r2, [r3, #34]	@ 0x22
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	69db      	ldr	r3, [r3, #28]
 8005920:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005924:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005928:	d007      	beq.n	800593a <HAL_I2S_Transmit+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	69da      	ldr	r2, [r3, #28]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005938:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2201      	movs	r2, #1
 800593e:	2102      	movs	r1, #2
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f000 f888 	bl	8005a56 <I2S_WaitFlagStateUntilTimeout>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d04e      	beq.n	80059ea <HAL_I2S_Transmit+0x16e>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005950:	f043 0201 	orr.w	r2, r3, #1
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    __HAL_UNLOCK(hi2s);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e070      	b.n	8005a4e <HAL_I2S_Transmit+0x1d2>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	69db      	ldr	r3, [r3, #28]
 8005970:	881a      	ldrh	r2, [r3, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	69db      	ldr	r3, [r3, #28]
 800597c:	1c9a      	adds	r2, r3, #2
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	61da      	str	r2, [r3, #28]
    hi2s->TxXferCount--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8005986:	b29b      	uxth	r3, r3
 8005988:	3b01      	subs	r3, #1
 800598a:	b29a      	uxth	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	845a      	strh	r2, [r3, #34]	@ 0x22

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	2201      	movs	r2, #1
 8005994:	2102      	movs	r1, #2
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 f85d 	bl	8005a56 <I2S_WaitFlagStateUntilTimeout>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00f      	beq.n	80059c2 <HAL_I2S_Transmit+0x146>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a6:	f043 0201 	orr.w	r2, r3, #1
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      __HAL_UNLOCK(hi2s);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e045      	b.n	8005a4e <HAL_I2S_Transmit+0x1d2>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f003 0308 	and.w	r3, r3, #8
 80059cc:	2b08      	cmp	r3, #8
 80059ce:	d10c      	bne.n	80059ea <HAL_I2S_Transmit+0x16e>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80059d0:	2300      	movs	r3, #0
 80059d2:	613b      	str	r3, [r7, #16]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	613b      	str	r3, [r7, #16]
 80059dc:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e2:	f043 0204 	orr.w	r2, r3, #4
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	639a      	str	r2, [r3, #56]	@ 0x38
  while (hi2s->TxXferCount > 0U)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1bb      	bne.n	800596c <HAL_I2S_Transmit+0xf0>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d005      	beq.n	8005a0a <HAL_I2S_Transmit+0x18e>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a08:	d118      	bne.n	8005a3c <HAL_I2S_Transmit+0x1c0>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	2180      	movs	r1, #128	@ 0x80
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 f820 	bl	8005a56 <I2S_WaitFlagStateUntilTimeout>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00f      	beq.n	8005a3c <HAL_I2S_Transmit+0x1c0>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a20:	f043 0201 	orr.w	r2, r3, #1
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      __HAL_UNLOCK(hi2s);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e008      	b.n	8005a4e <HAL_I2S_Transmit+0x1d2>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  __HAL_UNLOCK(hi2s);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b086      	sub	sp, #24
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	60f8      	str	r0, [r7, #12]
 8005a5e:	60b9      	str	r1, [r7, #8]
 8005a60:	603b      	str	r3, [r7, #0]
 8005a62:	4613      	mov	r3, r2
 8005a64:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a66:	f7fe fa99 	bl	8003f9c <HAL_GetTick>
 8005a6a:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005a6c:	e018      	b.n	8005aa0 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a74:	d014      	beq.n	8005aa0 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8005a76:	f7fe fa91 	bl	8003f9c <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	683a      	ldr	r2, [r7, #0]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d902      	bls.n	8005a8c <I2S_WaitFlagStateUntilTimeout+0x36>
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d109      	bne.n	8005aa0 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e00f      	b.n	8005ac0 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689a      	ldr	r2, [r3, #8]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	bf0c      	ite	eq
 8005ab0:	2301      	moveq	r3, #1
 8005ab2:	2300      	movne	r3, #0
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	79fb      	ldrb	r3, [r7, #7]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d1d7      	bne.n	8005a6e <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3718      	adds	r7, #24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e0c0      	b.n	8005c5c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d106      	bne.n	8005af4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f009 ffe2 	bl	800fab8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2203      	movs	r2, #3
 8005af8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f006 fae6 	bl	800c0d2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b06:	2300      	movs	r3, #0
 8005b08:	73fb      	strb	r3, [r7, #15]
 8005b0a:	e03e      	b.n	8005b8a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005b0c:	7bfa      	ldrb	r2, [r7, #15]
 8005b0e:	6879      	ldr	r1, [r7, #4]
 8005b10:	4613      	mov	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	00db      	lsls	r3, r3, #3
 8005b18:	440b      	add	r3, r1
 8005b1a:	3311      	adds	r3, #17
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005b20:	7bfa      	ldrb	r2, [r7, #15]
 8005b22:	6879      	ldr	r1, [r7, #4]
 8005b24:	4613      	mov	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	440b      	add	r3, r1
 8005b2e:	3310      	adds	r3, #16
 8005b30:	7bfa      	ldrb	r2, [r7, #15]
 8005b32:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005b34:	7bfa      	ldrb	r2, [r7, #15]
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	00db      	lsls	r3, r3, #3
 8005b40:	440b      	add	r3, r1
 8005b42:	3313      	adds	r3, #19
 8005b44:	2200      	movs	r2, #0
 8005b46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005b48:	7bfa      	ldrb	r2, [r7, #15]
 8005b4a:	6879      	ldr	r1, [r7, #4]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	00db      	lsls	r3, r3, #3
 8005b54:	440b      	add	r3, r1
 8005b56:	3320      	adds	r3, #32
 8005b58:	2200      	movs	r2, #0
 8005b5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005b5c:	7bfa      	ldrb	r2, [r7, #15]
 8005b5e:	6879      	ldr	r1, [r7, #4]
 8005b60:	4613      	mov	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	440b      	add	r3, r1
 8005b6a:	3324      	adds	r3, #36	@ 0x24
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005b70:	7bfb      	ldrb	r3, [r7, #15]
 8005b72:	6879      	ldr	r1, [r7, #4]
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	4613      	mov	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4413      	add	r3, r2
 8005b7c:	00db      	lsls	r3, r3, #3
 8005b7e:	440b      	add	r3, r1
 8005b80:	2200      	movs	r2, #0
 8005b82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b84:	7bfb      	ldrb	r3, [r7, #15]
 8005b86:	3301      	adds	r3, #1
 8005b88:	73fb      	strb	r3, [r7, #15]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	791b      	ldrb	r3, [r3, #4]
 8005b8e:	7bfa      	ldrb	r2, [r7, #15]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d3bb      	bcc.n	8005b0c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b94:	2300      	movs	r3, #0
 8005b96:	73fb      	strb	r3, [r7, #15]
 8005b98:	e044      	b.n	8005c24 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005b9a:	7bfa      	ldrb	r2, [r7, #15]
 8005b9c:	6879      	ldr	r1, [r7, #4]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	440b      	add	r3, r1
 8005ba8:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8005bac:	2200      	movs	r2, #0
 8005bae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005bb0:	7bfa      	ldrb	r2, [r7, #15]
 8005bb2:	6879      	ldr	r1, [r7, #4]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	440b      	add	r3, r1
 8005bbe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005bc2:	7bfa      	ldrb	r2, [r7, #15]
 8005bc4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005bc6:	7bfa      	ldrb	r2, [r7, #15]
 8005bc8:	6879      	ldr	r1, [r7, #4]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	00db      	lsls	r3, r3, #3
 8005bd2:	440b      	add	r3, r1
 8005bd4:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8005bd8:	2200      	movs	r2, #0
 8005bda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005bdc:	7bfa      	ldrb	r2, [r7, #15]
 8005bde:	6879      	ldr	r1, [r7, #4]
 8005be0:	4613      	mov	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	440b      	add	r3, r1
 8005bea:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8005bee:	2200      	movs	r2, #0
 8005bf0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005bf2:	7bfa      	ldrb	r2, [r7, #15]
 8005bf4:	6879      	ldr	r1, [r7, #4]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4413      	add	r3, r2
 8005bfc:	00db      	lsls	r3, r3, #3
 8005bfe:	440b      	add	r3, r1
 8005c00:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005c04:	2200      	movs	r2, #0
 8005c06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005c08:	7bfa      	ldrb	r2, [r7, #15]
 8005c0a:	6879      	ldr	r1, [r7, #4]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	440b      	add	r3, r1
 8005c16:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c1e:	7bfb      	ldrb	r3, [r7, #15]
 8005c20:	3301      	adds	r3, #1
 8005c22:	73fb      	strb	r3, [r7, #15]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	791b      	ldrb	r3, [r3, #4]
 8005c28:	7bfa      	ldrb	r2, [r7, #15]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d3b5      	bcc.n	8005b9a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6818      	ldr	r0, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	3304      	adds	r3, #4
 8005c36:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005c3a:	f006 fa65 	bl	800c108 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	7a9b      	ldrb	r3, [r3, #10]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d102      	bne.n	8005c5a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f001 fc0e 	bl	8007476 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d101      	bne.n	8005c7a <HAL_PCD_Start+0x16>
 8005c76:	2302      	movs	r3, #2
 8005c78:	e012      	b.n	8005ca0 <HAL_PCD_Start+0x3c>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f006 fa0c 	bl	800c0a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f007 ffe9 	bl	800dc68 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3708      	adds	r7, #8
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f007 ffee 	bl	800dc96 <USB_ReadInterrupts>
 8005cba:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 fb06 	bl	80062d8 <PCD_EP_ISR_Handler>

    return;
 8005ccc:	e110      	b.n	8005ef0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d013      	beq.n	8005d00 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cea:	b292      	uxth	r2, r2
 8005cec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f009 ff72 	bl	800fbda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f8fc 	bl	8005ef6 <HAL_PCD_SetAddress>

    return;
 8005cfe:	e0f7      	b.n	8005ef0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00c      	beq.n	8005d24 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005d1c:	b292      	uxth	r2, r2
 8005d1e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005d22:	e0e5      	b.n	8005ef0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00c      	beq.n	8005d48 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d40:	b292      	uxth	r2, r2
 8005d42:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005d46:	e0d3      	b.n	8005ef0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d034      	beq.n	8005dbc <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0204 	bic.w	r2, r2, #4
 8005d64:	b292      	uxth	r2, r2
 8005d66:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 0208 	bic.w	r2, r2, #8
 8005d7c:	b292      	uxth	r2, r2
 8005d7e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d107      	bne.n	8005d9c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005d94:	2100      	movs	r1, #0
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f00a f912 	bl	800ffc0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f009 ff55 	bl	800fc4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005db4:	b292      	uxth	r2, r2
 8005db6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005dba:	e099      	b.n	8005ef0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d027      	beq.n	8005e16 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f042 0208 	orr.w	r2, r2, #8
 8005dd8:	b292      	uxth	r2, r2
 8005dda:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005df0:	b292      	uxth	r2, r2
 8005df2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f042 0204 	orr.w	r2, r2, #4
 8005e08:	b292      	uxth	r2, r2
 8005e0a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f009 ff02 	bl	800fc18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005e14:	e06c      	b.n	8005ef0 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d040      	beq.n	8005ea2 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e32:	b292      	uxth	r2, r2
 8005e34:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d12b      	bne.n	8005e9a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f042 0204 	orr.w	r2, r2, #4
 8005e54:	b292      	uxth	r2, r2
 8005e56:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f042 0208 	orr.w	r2, r2, #8
 8005e6c:	b292      	uxth	r2, r2
 8005e6e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	089b      	lsrs	r3, r3, #2
 8005e86:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005e90:	2101      	movs	r1, #1
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f00a f894 	bl	800ffc0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005e98:	e02a      	b.n	8005ef0 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f009 febc 	bl	800fc18 <HAL_PCD_SuspendCallback>
    return;
 8005ea0:	e026      	b.n	8005ef0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00f      	beq.n	8005ecc <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005ebe:	b292      	uxth	r2, r2
 8005ec0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f009 fe7a 	bl	800fbbe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005eca:	e011      	b.n	8005ef0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00c      	beq.n	8005ef0 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ee8:	b292      	uxth	r2, r2
 8005eea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005eee:	bf00      	nop
  }
}
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b082      	sub	sp, #8
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	460b      	mov	r3, r1
 8005f00:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d101      	bne.n	8005f10 <HAL_PCD_SetAddress+0x1a>
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	e012      	b.n	8005f36 <HAL_PCD_SetAddress+0x40>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	78fa      	ldrb	r2, [r7, #3]
 8005f1c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	78fa      	ldrb	r2, [r7, #3]
 8005f24:	4611      	mov	r1, r2
 8005f26:	4618      	mov	r0, r3
 8005f28:	f007 fe8a 	bl	800dc40 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b084      	sub	sp, #16
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	4608      	mov	r0, r1
 8005f48:	4611      	mov	r1, r2
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	70fb      	strb	r3, [r7, #3]
 8005f50:	460b      	mov	r3, r1
 8005f52:	803b      	strh	r3, [r7, #0]
 8005f54:	4613      	mov	r3, r2
 8005f56:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	da0e      	bge.n	8005f82 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f64:	78fb      	ldrb	r3, [r7, #3]
 8005f66:	f003 0207 	and.w	r2, r3, #7
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	00db      	lsls	r3, r3, #3
 8005f72:	3310      	adds	r3, #16
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	4413      	add	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	705a      	strb	r2, [r3, #1]
 8005f80:	e00e      	b.n	8005fa0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f82:	78fb      	ldrb	r3, [r7, #3]
 8005f84:	f003 0207 	and.w	r2, r3, #7
 8005f88:	4613      	mov	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	00db      	lsls	r3, r3, #3
 8005f90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	4413      	add	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005fa0:	78fb      	ldrb	r3, [r7, #3]
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	b2da      	uxtb	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005fac:	883b      	ldrh	r3, [r7, #0]
 8005fae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	78ba      	ldrb	r2, [r7, #2]
 8005fba:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005fbc:	78bb      	ldrb	r3, [r7, #2]
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d102      	bne.n	8005fc8 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d101      	bne.n	8005fd6 <HAL_PCD_EP_Open+0x98>
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	e00e      	b.n	8005ff4 <HAL_PCD_EP_Open+0xb6>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68f9      	ldr	r1, [r7, #12]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f006 f8ad 	bl	800c144 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8005ff2:	7afb      	ldrb	r3, [r7, #11]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	460b      	mov	r3, r1
 8006006:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006008:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800600c:	2b00      	cmp	r3, #0
 800600e:	da0e      	bge.n	800602e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006010:	78fb      	ldrb	r3, [r7, #3]
 8006012:	f003 0207 	and.w	r2, r3, #7
 8006016:	4613      	mov	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	00db      	lsls	r3, r3, #3
 800601e:	3310      	adds	r3, #16
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	4413      	add	r3, r2
 8006024:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2201      	movs	r2, #1
 800602a:	705a      	strb	r2, [r3, #1]
 800602c:	e00e      	b.n	800604c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800602e:	78fb      	ldrb	r3, [r7, #3]
 8006030:	f003 0207 	and.w	r2, r3, #7
 8006034:	4613      	mov	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	4413      	add	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800604c:	78fb      	ldrb	r3, [r7, #3]
 800604e:	f003 0307 	and.w	r3, r3, #7
 8006052:	b2da      	uxtb	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800605e:	2b01      	cmp	r3, #1
 8006060:	d101      	bne.n	8006066 <HAL_PCD_EP_Close+0x6a>
 8006062:	2302      	movs	r3, #2
 8006064:	e00e      	b.n	8006084 <HAL_PCD_EP_Close+0x88>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68f9      	ldr	r1, [r7, #12]
 8006074:	4618      	mov	r0, r3
 8006076:	f006 fd4d 	bl	800cb14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	607a      	str	r2, [r7, #4]
 8006096:	603b      	str	r3, [r7, #0]
 8006098:	460b      	mov	r3, r1
 800609a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800609c:	7afb      	ldrb	r3, [r7, #11]
 800609e:	f003 0207 	and.w	r2, r3, #7
 80060a2:	4613      	mov	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	00db      	lsls	r3, r3, #3
 80060aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	4413      	add	r3, r2
 80060b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	683a      	ldr	r2, [r7, #0]
 80060be:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	2200      	movs	r2, #0
 80060c4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	2200      	movs	r2, #0
 80060ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060cc:	7afb      	ldrb	r3, [r7, #11]
 80060ce:	f003 0307 	and.w	r3, r3, #7
 80060d2:	b2da      	uxtb	r2, r3
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6979      	ldr	r1, [r7, #20]
 80060de:	4618      	mov	r0, r3
 80060e0:	f006 ff05 	bl	800ceee <USB_EPStartXfer>

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b083      	sub	sp, #12
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	460b      	mov	r3, r1
 80060f8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80060fa:	78fb      	ldrb	r3, [r7, #3]
 80060fc:	f003 0207 	and.w	r2, r3, #7
 8006100:	6879      	ldr	r1, [r7, #4]
 8006102:	4613      	mov	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	00db      	lsls	r3, r3, #3
 800610a:	440b      	add	r3, r1
 800610c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8006110:	681b      	ldr	r3, [r3, #0]
}
 8006112:	4618      	mov	r0, r3
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b086      	sub	sp, #24
 8006122:	af00      	add	r7, sp, #0
 8006124:	60f8      	str	r0, [r7, #12]
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	603b      	str	r3, [r7, #0]
 800612a:	460b      	mov	r3, r1
 800612c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800612e:	7afb      	ldrb	r3, [r7, #11]
 8006130:	f003 0207 	and.w	r2, r3, #7
 8006134:	4613      	mov	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	3310      	adds	r3, #16
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	4413      	add	r3, r2
 8006142:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	2200      	movs	r2, #0
 8006162:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	2201      	movs	r2, #1
 8006168:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800616a:	7afb      	ldrb	r3, [r7, #11]
 800616c:	f003 0307 	and.w	r3, r3, #7
 8006170:	b2da      	uxtb	r2, r3
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6979      	ldr	r1, [r7, #20]
 800617c:	4618      	mov	r0, r3
 800617e:	f006 feb6 	bl	800ceee <USB_EPStartXfer>

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3718      	adds	r7, #24
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	460b      	mov	r3, r1
 8006196:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006198:	78fb      	ldrb	r3, [r7, #3]
 800619a:	f003 0307 	and.w	r3, r3, #7
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	7912      	ldrb	r2, [r2, #4]
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d901      	bls.n	80061aa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e03e      	b.n	8006228 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80061aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	da0e      	bge.n	80061d0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061b2:	78fb      	ldrb	r3, [r7, #3]
 80061b4:	f003 0207 	and.w	r2, r3, #7
 80061b8:	4613      	mov	r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4413      	add	r3, r2
 80061be:	00db      	lsls	r3, r3, #3
 80061c0:	3310      	adds	r3, #16
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	4413      	add	r3, r2
 80061c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2201      	movs	r2, #1
 80061cc:	705a      	strb	r2, [r3, #1]
 80061ce:	e00c      	b.n	80061ea <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80061d0:	78fa      	ldrb	r2, [r7, #3]
 80061d2:	4613      	mov	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	4413      	add	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2201      	movs	r2, #1
 80061ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061f0:	78fb      	ldrb	r3, [r7, #3]
 80061f2:	f003 0307 	and.w	r3, r3, #7
 80061f6:	b2da      	uxtb	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006202:	2b01      	cmp	r3, #1
 8006204:	d101      	bne.n	800620a <HAL_PCD_EP_SetStall+0x7e>
 8006206:	2302      	movs	r3, #2
 8006208:	e00e      	b.n	8006228 <HAL_PCD_EP_SetStall+0x9c>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68f9      	ldr	r1, [r7, #12]
 8006218:	4618      	mov	r0, r3
 800621a:	f007 fc17 	bl	800da4c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	460b      	mov	r3, r1
 800623a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800623c:	78fb      	ldrb	r3, [r7, #3]
 800623e:	f003 030f 	and.w	r3, r3, #15
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	7912      	ldrb	r2, [r2, #4]
 8006246:	4293      	cmp	r3, r2
 8006248:	d901      	bls.n	800624e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e040      	b.n	80062d0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800624e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006252:	2b00      	cmp	r3, #0
 8006254:	da0e      	bge.n	8006274 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006256:	78fb      	ldrb	r3, [r7, #3]
 8006258:	f003 0207 	and.w	r2, r3, #7
 800625c:	4613      	mov	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	00db      	lsls	r3, r3, #3
 8006264:	3310      	adds	r3, #16
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	4413      	add	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2201      	movs	r2, #1
 8006270:	705a      	strb	r2, [r3, #1]
 8006272:	e00e      	b.n	8006292 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006274:	78fb      	ldrb	r3, [r7, #3]
 8006276:	f003 0207 	and.w	r2, r3, #7
 800627a:	4613      	mov	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	00db      	lsls	r3, r3, #3
 8006282:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	4413      	add	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006298:	78fb      	ldrb	r3, [r7, #3]
 800629a:	f003 0307 	and.w	r3, r3, #7
 800629e:	b2da      	uxtb	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d101      	bne.n	80062b2 <HAL_PCD_EP_ClrStall+0x82>
 80062ae:	2302      	movs	r3, #2
 80062b0:	e00e      	b.n	80062d0 <HAL_PCD_EP_ClrStall+0xa0>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68f9      	ldr	r1, [r7, #12]
 80062c0:	4618      	mov	r0, r3
 80062c2:	f007 fc14 	bl	800daee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b092      	sub	sp, #72	@ 0x48
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80062e0:	e333      	b.n	800694a <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80062ea:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80062ec:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	f003 030f 	and.w	r3, r3, #15
 80062f4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 80062f8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f040 8108 	bne.w	8006512 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006302:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006304:	f003 0310 	and.w	r3, r3, #16
 8006308:	2b00      	cmp	r3, #0
 800630a:	d14c      	bne.n	80063a6 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	b29b      	uxth	r3, r3
 8006314:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006318:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800631c:	813b      	strh	r3, [r7, #8]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	893b      	ldrh	r3, [r7, #8]
 8006324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800632c:	b29b      	uxth	r3, r3
 800632e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	3310      	adds	r3, #16
 8006334:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800633e:	b29b      	uxth	r3, r3
 8006340:	461a      	mov	r2, r3
 8006342:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	00db      	lsls	r3, r3, #3
 8006348:	4413      	add	r3, r2
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	6812      	ldr	r2, [r2, #0]
 800634e:	4413      	add	r3, r2
 8006350:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800635a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800635c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800635e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006360:	695a      	ldr	r2, [r3, #20]
 8006362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	441a      	add	r2, r3
 8006368:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800636a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800636c:	2100      	movs	r1, #0
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f009 fc0b 	bl	800fb8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	7b1b      	ldrb	r3, [r3, #12]
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	f000 82e5 	beq.w	800694a <PCD_EP_ISR_Handler+0x672>
 8006380:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	2b00      	cmp	r3, #0
 8006386:	f040 82e0 	bne.w	800694a <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	7b1b      	ldrb	r3, [r3, #12]
 800638e:	b2db      	uxtb	r3, r3
 8006390:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006394:	b2da      	uxtb	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	731a      	strb	r2, [r3, #12]
 80063a4:	e2d1      	b.n	800694a <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80063ac:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	881b      	ldrh	r3, [r3, #0]
 80063b4:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80063b6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80063b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d032      	beq.n	8006426 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	461a      	mov	r2, r3
 80063cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	00db      	lsls	r3, r3, #3
 80063d2:	4413      	add	r3, r2
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	6812      	ldr	r2, [r2, #0]
 80063d8:	4413      	add	r3, r2
 80063da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80063de:	881b      	ldrh	r3, [r3, #0]
 80063e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80063e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063e6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6818      	ldr	r0, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80063f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063f4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80063f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063f8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	f007 fc9d 	bl	800dd3a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	b29a      	uxth	r2, r3
 8006408:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800640c:	4013      	ands	r3, r2
 800640e:	817b      	strh	r3, [r7, #10]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	897a      	ldrh	r2, [r7, #10]
 8006416:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800641a:	b292      	uxth	r2, r2
 800641c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f009 fb86 	bl	800fb30 <HAL_PCD_SetupStageCallback>
 8006424:	e291      	b.n	800694a <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006426:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800642a:	2b00      	cmp	r3, #0
 800642c:	f280 828d 	bge.w	800694a <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	881b      	ldrh	r3, [r3, #0]
 8006436:	b29a      	uxth	r2, r3
 8006438:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800643c:	4013      	ands	r3, r2
 800643e:	81fb      	strh	r3, [r7, #14]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	89fa      	ldrh	r2, [r7, #14]
 8006446:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800644a:	b292      	uxth	r2, r2
 800644c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006456:	b29b      	uxth	r3, r3
 8006458:	461a      	mov	r2, r3
 800645a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	00db      	lsls	r3, r3, #3
 8006460:	4413      	add	r3, r2
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	6812      	ldr	r2, [r2, #0]
 8006466:	4413      	add	r3, r2
 8006468:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800646c:	881b      	ldrh	r3, [r3, #0]
 800646e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006472:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006474:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006476:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d019      	beq.n	80064b2 <PCD_EP_ISR_Handler+0x1da>
 800647e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d015      	beq.n	80064b2 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6818      	ldr	r0, [r3, #0]
 800648a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800648c:	6959      	ldr	r1, [r3, #20]
 800648e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006490:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006492:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006494:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006496:	b29b      	uxth	r3, r3
 8006498:	f007 fc4f 	bl	800dd3a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800649c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800649e:	695a      	ldr	r2, [r3, #20]
 80064a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064a2:	69db      	ldr	r3, [r3, #28]
 80064a4:	441a      	add	r2, r3
 80064a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064a8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80064aa:	2100      	movs	r1, #0
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f009 fb51 	bl	800fb54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	881b      	ldrh	r3, [r3, #0]
 80064b8:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80064ba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80064bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f040 8242 	bne.w	800694a <PCD_EP_ISR_Handler+0x672>
 80064c6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80064c8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80064cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80064d0:	f000 823b 	beq.w	800694a <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	881b      	ldrh	r3, [r3, #0]
 80064da:	b29b      	uxth	r3, r3
 80064dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064e4:	81bb      	strh	r3, [r7, #12]
 80064e6:	89bb      	ldrh	r3, [r7, #12]
 80064e8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80064ec:	81bb      	strh	r3, [r7, #12]
 80064ee:	89bb      	ldrh	r3, [r7, #12]
 80064f0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80064f4:	81bb      	strh	r3, [r7, #12]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	89bb      	ldrh	r3, [r7, #12]
 80064fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006500:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006504:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006508:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800650c:	b29b      	uxth	r3, r3
 800650e:	8013      	strh	r3, [r2, #0]
 8006510:	e21b      	b.n	800694a <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	461a      	mov	r2, r3
 8006518:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	881b      	ldrh	r3, [r3, #0]
 8006522:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006524:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8006528:	2b00      	cmp	r3, #0
 800652a:	f280 80f1 	bge.w	8006710 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	461a      	mov	r2, r3
 8006534:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	881b      	ldrh	r3, [r3, #0]
 800653e:	b29a      	uxth	r2, r3
 8006540:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006544:	4013      	ands	r3, r2
 8006546:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	461a      	mov	r2, r3
 800654e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	4413      	add	r3, r2
 8006556:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006558:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800655c:	b292      	uxth	r2, r2
 800655e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006560:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8006564:	4613      	mov	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4413      	add	r3, r2
 800656a:	00db      	lsls	r3, r3, #3
 800656c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	4413      	add	r3, r2
 8006574:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006576:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006578:	7b1b      	ldrb	r3, [r3, #12]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d123      	bne.n	80065c6 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006586:	b29b      	uxth	r3, r3
 8006588:	461a      	mov	r2, r3
 800658a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	00db      	lsls	r3, r3, #3
 8006590:	4413      	add	r3, r2
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	6812      	ldr	r2, [r2, #0]
 8006596:	4413      	add	r3, r2
 8006598:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800659c:	881b      	ldrh	r3, [r3, #0]
 800659e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065a2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80065a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 808b 	beq.w	80066c6 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6818      	ldr	r0, [r3, #0]
 80065b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065b6:	6959      	ldr	r1, [r3, #20]
 80065b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065ba:	88da      	ldrh	r2, [r3, #6]
 80065bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80065c0:	f007 fbbb 	bl	800dd3a <USB_ReadPMA>
 80065c4:	e07f      	b.n	80066c6 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80065c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065c8:	78db      	ldrb	r3, [r3, #3]
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d109      	bne.n	80065e2 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80065ce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80065d0:	461a      	mov	r2, r3
 80065d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 f9c6 	bl	8006966 <HAL_PCD_EP_DB_Receive>
 80065da:	4603      	mov	r3, r0
 80065dc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80065e0:	e071      	b.n	80066c6 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	461a      	mov	r2, r3
 80065e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	4413      	add	r3, r2
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065fc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	461a      	mov	r2, r3
 8006604:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	441a      	add	r2, r3
 800660c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800660e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006612:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006616:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800661a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800661e:	b29b      	uxth	r3, r3
 8006620:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	461a      	mov	r2, r3
 8006628:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4413      	add	r3, r2
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	b29b      	uxth	r3, r3
 8006634:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d022      	beq.n	8006682 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006644:	b29b      	uxth	r3, r3
 8006646:	461a      	mov	r2, r3
 8006648:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	00db      	lsls	r3, r3, #3
 800664e:	4413      	add	r3, r2
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	6812      	ldr	r2, [r2, #0]
 8006654:	4413      	add	r3, r2
 8006656:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800665a:	881b      	ldrh	r3, [r3, #0]
 800665c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006660:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8006664:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006668:	2b00      	cmp	r3, #0
 800666a:	d02c      	beq.n	80066c6 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6818      	ldr	r0, [r3, #0]
 8006670:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006672:	6959      	ldr	r1, [r3, #20]
 8006674:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006676:	891a      	ldrh	r2, [r3, #8]
 8006678:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800667c:	f007 fb5d 	bl	800dd3a <USB_ReadPMA>
 8006680:	e021      	b.n	80066c6 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800668a:	b29b      	uxth	r3, r3
 800668c:	461a      	mov	r2, r3
 800668e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	00db      	lsls	r3, r3, #3
 8006694:	4413      	add	r3, r2
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	6812      	ldr	r2, [r2, #0]
 800669a:	4413      	add	r3, r2
 800669c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066a6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80066aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d009      	beq.n	80066c6 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6818      	ldr	r0, [r3, #0]
 80066b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066b8:	6959      	ldr	r1, [r3, #20]
 80066ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066bc:	895a      	ldrh	r2, [r3, #10]
 80066be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80066c2:	f007 fb3a 	bl	800dd3a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80066c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066c8:	69da      	ldr	r2, [r3, #28]
 80066ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80066ce:	441a      	add	r2, r3
 80066d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066d2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80066d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066d6:	695a      	ldr	r2, [r3, #20]
 80066d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80066dc:	441a      	add	r2, r3
 80066de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066e0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80066e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d005      	beq.n	80066f6 <PCD_EP_ISR_Handler+0x41e>
 80066ea:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80066ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d206      	bcs.n	8006704 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80066f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	4619      	mov	r1, r3
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f009 fa29 	bl	800fb54 <HAL_PCD_DataOutStageCallback>
 8006702:	e005      	b.n	8006710 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800670a:	4618      	mov	r0, r3
 800670c:	f006 fbef 	bl	800ceee <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006710:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 8117 	beq.w	800694a <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800671c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8006720:	4613      	mov	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	00db      	lsls	r3, r3, #3
 8006728:	3310      	adds	r3, #16
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	4413      	add	r3, r2
 800672e:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	461a      	mov	r2, r3
 8006736:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	881b      	ldrh	r3, [r3, #0]
 8006740:	b29b      	uxth	r3, r3
 8006742:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800674a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	461a      	mov	r2, r3
 8006752:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	441a      	add	r2, r3
 800675a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800675c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006764:	b29b      	uxth	r3, r3
 8006766:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006768:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800676a:	78db      	ldrb	r3, [r3, #3]
 800676c:	2b01      	cmp	r3, #1
 800676e:	f040 80a1 	bne.w	80068b4 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8006772:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006774:	2200      	movs	r2, #0
 8006776:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006778:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800677a:	7b1b      	ldrb	r3, [r3, #12]
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 8092 	beq.w	80068a6 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006782:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006788:	2b00      	cmp	r3, #0
 800678a:	d046      	beq.n	800681a <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800678c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800678e:	785b      	ldrb	r3, [r3, #1]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d126      	bne.n	80067e2 <PCD_EP_ISR_Handler+0x50a>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	617b      	str	r3, [r7, #20]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	461a      	mov	r2, r3
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	4413      	add	r3, r2
 80067aa:	617b      	str	r3, [r7, #20]
 80067ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	00da      	lsls	r2, r3, #3
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	4413      	add	r3, r2
 80067b6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80067ba:	613b      	str	r3, [r7, #16]
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	881b      	ldrh	r3, [r3, #0]
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	801a      	strh	r2, [r3, #0]
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067da:	b29a      	uxth	r2, r3
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	801a      	strh	r2, [r3, #0]
 80067e0:	e061      	b.n	80068a6 <PCD_EP_ISR_Handler+0x5ce>
 80067e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067e4:	785b      	ldrb	r3, [r3, #1]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d15d      	bne.n	80068a6 <PCD_EP_ISR_Handler+0x5ce>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	61fb      	str	r3, [r7, #28]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	461a      	mov	r2, r3
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	4413      	add	r3, r2
 8006800:	61fb      	str	r3, [r7, #28]
 8006802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	00da      	lsls	r2, r3, #3
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	4413      	add	r3, r2
 800680c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006810:	61bb      	str	r3, [r7, #24]
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	2200      	movs	r2, #0
 8006816:	801a      	strh	r2, [r3, #0]
 8006818:	e045      	b.n	80068a6 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006820:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006822:	785b      	ldrb	r3, [r3, #1]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d126      	bne.n	8006876 <PCD_EP_ISR_Handler+0x59e>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	627b      	str	r3, [r7, #36]	@ 0x24
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006836:	b29b      	uxth	r3, r3
 8006838:	461a      	mov	r2, r3
 800683a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683c:	4413      	add	r3, r2
 800683e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006840:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	00da      	lsls	r2, r3, #3
 8006846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006848:	4413      	add	r3, r2
 800684a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800684e:	623b      	str	r3, [r7, #32]
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	b29b      	uxth	r3, r3
 8006856:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800685a:	b29a      	uxth	r2, r3
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	801a      	strh	r2, [r3, #0]
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	881b      	ldrh	r3, [r3, #0]
 8006864:	b29b      	uxth	r3, r3
 8006866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800686a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800686e:	b29a      	uxth	r2, r3
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	801a      	strh	r2, [r3, #0]
 8006874:	e017      	b.n	80068a6 <PCD_EP_ISR_Handler+0x5ce>
 8006876:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006878:	785b      	ldrb	r3, [r3, #1]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d113      	bne.n	80068a6 <PCD_EP_ISR_Handler+0x5ce>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006886:	b29b      	uxth	r3, r3
 8006888:	461a      	mov	r2, r3
 800688a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800688c:	4413      	add	r3, r2
 800688e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006890:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	00da      	lsls	r2, r3, #3
 8006896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006898:	4413      	add	r3, r2
 800689a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800689e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a2:	2200      	movs	r2, #0
 80068a4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80068a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	4619      	mov	r1, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f009 f96c 	bl	800fb8a <HAL_PCD_DataInStageCallback>
 80068b2:	e04a      	b.n	800694a <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80068b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80068b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d13f      	bne.n	800693e <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	461a      	mov	r2, r3
 80068ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	00db      	lsls	r3, r3, #3
 80068d0:	4413      	add	r3, r2
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	6812      	ldr	r2, [r2, #0]
 80068d6:	4413      	add	r3, r2
 80068d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80068dc:	881b      	ldrh	r3, [r3, #0]
 80068de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068e2:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 80068e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068e6:	699a      	ldr	r2, [r3, #24]
 80068e8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d906      	bls.n	80068fc <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 80068ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068f0:	699a      	ldr	r2, [r3, #24]
 80068f2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80068f4:	1ad2      	subs	r2, r2, r3
 80068f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068f8:	619a      	str	r2, [r3, #24]
 80068fa:	e002      	b.n	8006902 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 80068fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068fe:	2200      	movs	r2, #0
 8006900:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006902:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d106      	bne.n	8006918 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800690a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	4619      	mov	r1, r3
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f009 f93a 	bl	800fb8a <HAL_PCD_DataInStageCallback>
 8006916:	e018      	b.n	800694a <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006918:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800691a:	695a      	ldr	r2, [r3, #20]
 800691c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800691e:	441a      	add	r2, r3
 8006920:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006922:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006924:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006926:	69da      	ldr	r2, [r3, #28]
 8006928:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800692a:	441a      	add	r2, r3
 800692c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800692e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006936:	4618      	mov	r0, r3
 8006938:	f006 fad9 	bl	800ceee <USB_EPStartXfer>
 800693c:	e005      	b.n	800694a <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800693e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006940:	461a      	mov	r2, r3
 8006942:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 f917 	bl	8006b78 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006952:	b29b      	uxth	r3, r3
 8006954:	b21b      	sxth	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	f6ff acc3 	blt.w	80062e2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3748      	adds	r7, #72	@ 0x48
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b088      	sub	sp, #32
 800696a:	af00      	add	r7, sp, #0
 800696c:	60f8      	str	r0, [r7, #12]
 800696e:	60b9      	str	r1, [r7, #8]
 8006970:	4613      	mov	r3, r2
 8006972:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006974:	88fb      	ldrh	r3, [r7, #6]
 8006976:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800697a:	2b00      	cmp	r3, #0
 800697c:	d07c      	beq.n	8006a78 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006986:	b29b      	uxth	r3, r3
 8006988:	461a      	mov	r2, r3
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	00db      	lsls	r3, r3, #3
 8006990:	4413      	add	r3, r2
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	6812      	ldr	r2, [r2, #0]
 8006996:	4413      	add	r3, r2
 8006998:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800699c:	881b      	ldrh	r3, [r3, #0]
 800699e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069a2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	699a      	ldr	r2, [r3, #24]
 80069a8:	8b7b      	ldrh	r3, [r7, #26]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d306      	bcc.n	80069bc <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	699a      	ldr	r2, [r3, #24]
 80069b2:	8b7b      	ldrh	r3, [r7, #26]
 80069b4:	1ad2      	subs	r2, r2, r3
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	619a      	str	r2, [r3, #24]
 80069ba:	e002      	b.n	80069c2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	2200      	movs	r2, #0
 80069c0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d123      	bne.n	8006a12 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	461a      	mov	r2, r3
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	b29b      	uxth	r3, r3
 80069dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069e4:	833b      	strh	r3, [r7, #24]
 80069e6:	8b3b      	ldrh	r3, [r7, #24]
 80069e8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80069ec:	833b      	strh	r3, [r7, #24]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	461a      	mov	r2, r3
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	441a      	add	r2, r3
 80069fc:	8b3b      	ldrh	r3, [r7, #24]
 80069fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006a12:	88fb      	ldrh	r3, [r7, #6]
 8006a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d01f      	beq.n	8006a5c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	461a      	mov	r2, r3
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a36:	82fb      	strh	r3, [r7, #22]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	441a      	add	r2, r3
 8006a46:	8afb      	ldrh	r3, [r7, #22]
 8006a48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a54:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006a5c:	8b7b      	ldrh	r3, [r7, #26]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 8085 	beq.w	8006b6e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6818      	ldr	r0, [r3, #0]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	6959      	ldr	r1, [r3, #20]
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	891a      	ldrh	r2, [r3, #8]
 8006a70:	8b7b      	ldrh	r3, [r7, #26]
 8006a72:	f007 f962 	bl	800dd3a <USB_ReadPMA>
 8006a76:	e07a      	b.n	8006b6e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	461a      	mov	r2, r3
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	00db      	lsls	r3, r3, #3
 8006a8a:	4413      	add	r3, r2
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	6812      	ldr	r2, [r2, #0]
 8006a90:	4413      	add	r3, r2
 8006a92:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006a96:	881b      	ldrh	r3, [r3, #0]
 8006a98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a9c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	699a      	ldr	r2, [r3, #24]
 8006aa2:	8b7b      	ldrh	r3, [r7, #26]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d306      	bcc.n	8006ab6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	699a      	ldr	r2, [r3, #24]
 8006aac:	8b7b      	ldrh	r3, [r7, #26]
 8006aae:	1ad2      	subs	r2, r2, r3
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	619a      	str	r2, [r3, #24]
 8006ab4:	e002      	b.n	8006abc <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d123      	bne.n	8006b0c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	461a      	mov	r2, r3
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	881b      	ldrh	r3, [r3, #0]
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ade:	83fb      	strh	r3, [r7, #30]
 8006ae0:	8bfb      	ldrh	r3, [r7, #30]
 8006ae2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006ae6:	83fb      	strh	r3, [r7, #30]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	461a      	mov	r2, r3
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	441a      	add	r2, r3
 8006af6:	8bfb      	ldrh	r3, [r7, #30]
 8006af8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006afc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006b0c:	88fb      	ldrh	r3, [r7, #6]
 8006b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d11f      	bne.n	8006b56 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	881b      	ldrh	r3, [r3, #0]
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b30:	83bb      	strh	r3, [r7, #28]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	461a      	mov	r2, r3
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	441a      	add	r2, r3
 8006b40:	8bbb      	ldrh	r3, [r7, #28]
 8006b42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b4e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006b56:	8b7b      	ldrh	r3, [r7, #26]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d008      	beq.n	8006b6e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6818      	ldr	r0, [r3, #0]
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	6959      	ldr	r1, [r3, #20]
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	895a      	ldrh	r2, [r3, #10]
 8006b68:	8b7b      	ldrh	r3, [r7, #26]
 8006b6a:	f007 f8e6 	bl	800dd3a <USB_ReadPMA>
    }
  }

  return count;
 8006b6e:	8b7b      	ldrh	r3, [r7, #26]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3720      	adds	r7, #32
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b0a6      	sub	sp, #152	@ 0x98
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	4613      	mov	r3, r2
 8006b84:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006b86:	88fb      	ldrh	r3, [r7, #6]
 8006b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f000 81f7 	beq.w	8006f80 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	00db      	lsls	r3, r3, #3
 8006ba4:	4413      	add	r3, r2
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	6812      	ldr	r2, [r2, #0]
 8006baa:	4413      	add	r3, r2
 8006bac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bb6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	699a      	ldr	r2, [r3, #24]
 8006bbe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d907      	bls.n	8006bd6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	699a      	ldr	r2, [r3, #24]
 8006bca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006bce:	1ad2      	subs	r2, r2, r3
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	619a      	str	r2, [r3, #24]
 8006bd4:	e002      	b.n	8006bdc <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f040 80e1 	bne.w	8006da8 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	785b      	ldrb	r3, [r3, #1]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d126      	bne.n	8006c3c <HAL_PCD_EP_DB_Transmit+0xc4>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	461a      	mov	r2, r3
 8006c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c02:	4413      	add	r3, r2
 8006c04:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	00da      	lsls	r2, r3, #3
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0e:	4413      	add	r3, r2
 8006c10:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c18:	881b      	ldrh	r3, [r3, #0]
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c24:	801a      	strh	r2, [r3, #0]
 8006c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c28:	881b      	ldrh	r3, [r3, #0]
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c38:	801a      	strh	r2, [r3, #0]
 8006c3a:	e01a      	b.n	8006c72 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	785b      	ldrb	r3, [r3, #1]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d116      	bne.n	8006c72 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	461a      	mov	r2, r3
 8006c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c58:	4413      	add	r3, r2
 8006c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	00da      	lsls	r2, r3, #3
 8006c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c64:	4413      	add	r3, r2
 8006c66:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006c6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c6e:	2200      	movs	r2, #0
 8006c70:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	785b      	ldrb	r3, [r3, #1]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d126      	bne.n	8006cce <HAL_PCD_EP_DB_Transmit+0x156>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	623b      	str	r3, [r7, #32]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	461a      	mov	r2, r3
 8006c92:	6a3b      	ldr	r3, [r7, #32]
 8006c94:	4413      	add	r3, r2
 8006c96:	623b      	str	r3, [r7, #32]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	00da      	lsls	r2, r3, #3
 8006c9e:	6a3b      	ldr	r3, [r7, #32]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006ca6:	61fb      	str	r3, [r7, #28]
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	881b      	ldrh	r3, [r3, #0]
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	801a      	strh	r2, [r3, #0]
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	881b      	ldrh	r3, [r3, #0]
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	801a      	strh	r2, [r3, #0]
 8006ccc:	e017      	b.n	8006cfe <HAL_PCD_EP_DB_Transmit+0x186>
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	785b      	ldrb	r3, [r3, #1]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d113      	bne.n	8006cfe <HAL_PCD_EP_DB_Transmit+0x186>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce4:	4413      	add	r3, r2
 8006ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	00da      	lsls	r2, r3, #3
 8006cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006cf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	78db      	ldrb	r3, [r3, #3]
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d123      	bne.n	8006d4e <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d20:	837b      	strh	r3, [r7, #26]
 8006d22:	8b7b      	ldrh	r3, [r7, #26]
 8006d24:	f083 0320 	eor.w	r3, r3, #32
 8006d28:	837b      	strh	r3, [r7, #26]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	441a      	add	r2, r3
 8006d38:	8b7b      	ldrh	r3, [r7, #26]
 8006d3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	4619      	mov	r1, r3
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	f008 ff18 	bl	800fb8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006d5a:	88fb      	ldrh	r3, [r7, #6]
 8006d5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d01f      	beq.n	8006da4 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4413      	add	r3, r2
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d7e:	833b      	strh	r3, [r7, #24]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	461a      	mov	r2, r3
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	441a      	add	r2, r3
 8006d8e:	8b3b      	ldrh	r3, [r7, #24]
 8006d90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8006da4:	2300      	movs	r3, #0
 8006da6:	e31f      	b.n	80073e8 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006da8:	88fb      	ldrh	r3, [r7, #6]
 8006daa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d021      	beq.n	8006df6 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	461a      	mov	r2, r3
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	4413      	add	r3, r2
 8006dc0:	881b      	ldrh	r3, [r3, #0]
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dcc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	441a      	add	r2, r3
 8006dde:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006de2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006de6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006dee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	f040 82ca 	bne.w	8007396 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	695a      	ldr	r2, [r3, #20]
 8006e06:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006e0a:	441a      	add	r2, r3
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	69da      	ldr	r2, [r3, #28]
 8006e14:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006e18:	441a      	add	r2, r3
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	6a1a      	ldr	r2, [r3, #32]
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d309      	bcc.n	8006e3e <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	6a1a      	ldr	r2, [r3, #32]
 8006e34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e36:	1ad2      	subs	r2, r2, r3
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	621a      	str	r2, [r3, #32]
 8006e3c:	e015      	b.n	8006e6a <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d107      	bne.n	8006e56 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8006e46:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006e4a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006e54:	e009      	b.n	8006e6a <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	6a1b      	ldr	r3, [r3, #32]
 8006e62:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2200      	movs	r2, #0
 8006e68:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	785b      	ldrb	r3, [r3, #1]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d15f      	bne.n	8006f32 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	461a      	mov	r2, r3
 8006e84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e86:	4413      	add	r3, r2
 8006e88:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	00da      	lsls	r2, r3, #3
 8006e90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e92:	4413      	add	r3, r2
 8006e94:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e9c:	881b      	ldrh	r3, [r3, #0]
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ea8:	801a      	strh	r2, [r3, #0]
 8006eaa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10a      	bne.n	8006ec6 <HAL_PCD_EP_DB_Transmit+0x34e>
 8006eb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006eb2:	881b      	ldrh	r3, [r3, #0]
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ec2:	801a      	strh	r2, [r3, #0]
 8006ec4:	e051      	b.n	8006f6a <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006ec6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ec8:	2b3e      	cmp	r3, #62	@ 0x3e
 8006eca:	d816      	bhi.n	8006efa <HAL_PCD_EP_DB_Transmit+0x382>
 8006ecc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ece:	085b      	lsrs	r3, r3, #1
 8006ed0:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ed2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ed4:	f003 0301 	and.w	r3, r3, #1
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d002      	beq.n	8006ee2 <HAL_PCD_EP_DB_Transmit+0x36a>
 8006edc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ede:	3301      	adds	r3, #1
 8006ee0:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ee4:	881b      	ldrh	r3, [r3, #0]
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	029b      	lsls	r3, r3, #10
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ef6:	801a      	strh	r2, [r3, #0]
 8006ef8:	e037      	b.n	8006f6a <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006efa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006efc:	095b      	lsrs	r3, r3, #5
 8006efe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006f02:	f003 031f 	and.w	r3, r3, #31
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d102      	bne.n	8006f10 <HAL_PCD_EP_DB_Transmit+0x398>
 8006f0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f12:	881b      	ldrh	r3, [r3, #0]
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	029b      	lsls	r3, r3, #10
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f2e:	801a      	strh	r2, [r3, #0]
 8006f30:	e01b      	b.n	8006f6a <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	785b      	ldrb	r3, [r3, #1]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d117      	bne.n	8006f6a <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f4e:	4413      	add	r3, r2
 8006f50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	00da      	lsls	r2, r3, #3
 8006f58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006f60:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f68:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6818      	ldr	r0, [r3, #0]
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	6959      	ldr	r1, [r3, #20]
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	891a      	ldrh	r2, [r3, #8]
 8006f76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	f006 fe9c 	bl	800dcb6 <USB_WritePMA>
 8006f7e:	e20a      	b.n	8007396 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	00db      	lsls	r3, r3, #3
 8006f92:	4413      	add	r3, r2
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	6812      	ldr	r2, [r2, #0]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006f9e:	881b      	ldrh	r3, [r3, #0]
 8006fa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fa4:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	699a      	ldr	r2, [r3, #24]
 8006fac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d307      	bcc.n	8006fc4 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	699a      	ldr	r2, [r3, #24]
 8006fb8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006fbc:	1ad2      	subs	r2, r2, r3
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	619a      	str	r2, [r3, #24]
 8006fc2:	e002      	b.n	8006fca <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f040 80f6 	bne.w	80071c0 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	785b      	ldrb	r3, [r3, #1]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d126      	bne.n	800702a <HAL_PCD_EP_DB_Transmit+0x4b2>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	677b      	str	r3, [r7, #116]	@ 0x74
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	461a      	mov	r2, r3
 8006fee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ff0:	4413      	add	r3, r2
 8006ff2:	677b      	str	r3, [r7, #116]	@ 0x74
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	00da      	lsls	r2, r3, #3
 8006ffa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007002:	673b      	str	r3, [r7, #112]	@ 0x70
 8007004:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007006:	881b      	ldrh	r3, [r3, #0]
 8007008:	b29b      	uxth	r3, r3
 800700a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800700e:	b29a      	uxth	r2, r3
 8007010:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007012:	801a      	strh	r2, [r3, #0]
 8007014:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007016:	881b      	ldrh	r3, [r3, #0]
 8007018:	b29b      	uxth	r3, r3
 800701a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800701e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007022:	b29a      	uxth	r2, r3
 8007024:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007026:	801a      	strh	r2, [r3, #0]
 8007028:	e01a      	b.n	8007060 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	785b      	ldrb	r3, [r3, #1]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d116      	bne.n	8007060 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007040:	b29b      	uxth	r3, r3
 8007042:	461a      	mov	r2, r3
 8007044:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007046:	4413      	add	r3, r2
 8007048:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	00da      	lsls	r2, r3, #3
 8007050:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007052:	4413      	add	r3, r2
 8007054:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007058:	67bb      	str	r3, [r7, #120]	@ 0x78
 800705a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800705c:	2200      	movs	r2, #0
 800705e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	785b      	ldrb	r3, [r3, #1]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d12f      	bne.n	80070d0 <HAL_PCD_EP_DB_Transmit+0x558>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007080:	b29b      	uxth	r3, r3
 8007082:	461a      	mov	r2, r3
 8007084:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007088:	4413      	add	r3, r2
 800708a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	00da      	lsls	r2, r3, #3
 8007094:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007098:	4413      	add	r3, r2
 800709a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800709e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80070a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80070a6:	881b      	ldrh	r3, [r3, #0]
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80070b4:	801a      	strh	r2, [r3, #0]
 80070b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80070ba:	881b      	ldrh	r3, [r3, #0]
 80070bc:	b29b      	uxth	r3, r3
 80070be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80070cc:	801a      	strh	r2, [r3, #0]
 80070ce:	e01c      	b.n	800710a <HAL_PCD_EP_DB_Transmit+0x592>
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	785b      	ldrb	r3, [r3, #1]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d118      	bne.n	800710a <HAL_PCD_EP_DB_Transmit+0x592>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	461a      	mov	r2, r3
 80070e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80070e8:	4413      	add	r3, r2
 80070ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	00da      	lsls	r2, r3, #3
 80070f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80070f8:	4413      	add	r3, r2
 80070fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80070fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007102:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007106:	2200      	movs	r2, #0
 8007108:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	78db      	ldrb	r3, [r3, #3]
 800710e:	2b02      	cmp	r3, #2
 8007110:	d127      	bne.n	8007162 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	461a      	mov	r2, r3
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	4413      	add	r3, r2
 8007120:	881b      	ldrh	r3, [r3, #0]
 8007122:	b29b      	uxth	r3, r3
 8007124:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007128:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800712c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007130:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007134:	f083 0320 	eor.w	r3, r3, #32
 8007138:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	461a      	mov	r2, r3
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	441a      	add	r2, r3
 800714a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800714e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007152:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007156:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800715a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800715e:	b29b      	uxth	r3, r3
 8007160:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	4619      	mov	r1, r3
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f008 fd0e 	bl	800fb8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800716e:	88fb      	ldrh	r3, [r7, #6]
 8007170:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d121      	bne.n	80071bc <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	461a      	mov	r2, r3
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	4413      	add	r3, r2
 8007186:	881b      	ldrh	r3, [r3, #0]
 8007188:	b29b      	uxth	r3, r3
 800718a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800718e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007192:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	461a      	mov	r2, r3
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	441a      	add	r2, r3
 80071a4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80071a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80071b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80071bc:	2300      	movs	r3, #0
 80071be:	e113      	b.n	80073e8 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80071c0:	88fb      	ldrh	r3, [r7, #6]
 80071c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d121      	bne.n	800720e <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	461a      	mov	r2, r3
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4413      	add	r3, r2
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	b29b      	uxth	r3, r3
 80071dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071e4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	461a      	mov	r2, r3
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	441a      	add	r2, r3
 80071f6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80071fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007202:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800720a:	b29b      	uxth	r3, r3
 800720c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007214:	2b01      	cmp	r3, #1
 8007216:	f040 80be 	bne.w	8007396 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	695a      	ldr	r2, [r3, #20]
 800721e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007222:	441a      	add	r2, r3
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	69da      	ldr	r2, [r3, #28]
 800722c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007230:	441a      	add	r2, r3
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	6a1a      	ldr	r2, [r3, #32]
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	429a      	cmp	r2, r3
 8007240:	d309      	bcc.n	8007256 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	6a1a      	ldr	r2, [r3, #32]
 800724c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800724e:	1ad2      	subs	r2, r2, r3
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	621a      	str	r2, [r3, #32]
 8007254:	e015      	b.n	8007282 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	6a1b      	ldr	r3, [r3, #32]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d107      	bne.n	800726e <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800725e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007262:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	2200      	movs	r2, #0
 8007268:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800726c:	e009      	b.n	8007282 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	2200      	movs	r2, #0
 8007278:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	785b      	ldrb	r3, [r3, #1]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d15f      	bne.n	8007350 <HAL_PCD_EP_DB_Transmit+0x7d8>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800729e:	b29b      	uxth	r3, r3
 80072a0:	461a      	mov	r2, r3
 80072a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80072a4:	4413      	add	r3, r2
 80072a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	00da      	lsls	r2, r3, #3
 80072ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80072b0:	4413      	add	r3, r2
 80072b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80072b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80072b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072ba:	881b      	ldrh	r3, [r3, #0]
 80072bc:	b29b      	uxth	r3, r3
 80072be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072c6:	801a      	strh	r2, [r3, #0]
 80072c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10a      	bne.n	80072e4 <HAL_PCD_EP_DB_Transmit+0x76c>
 80072ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072d0:	881b      	ldrh	r3, [r3, #0]
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072dc:	b29a      	uxth	r2, r3
 80072de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072e0:	801a      	strh	r2, [r3, #0]
 80072e2:	e04e      	b.n	8007382 <HAL_PCD_EP_DB_Transmit+0x80a>
 80072e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80072e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80072e8:	d816      	bhi.n	8007318 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80072ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80072ec:	085b      	lsrs	r3, r3, #1
 80072ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80072f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d002      	beq.n	8007300 <HAL_PCD_EP_DB_Transmit+0x788>
 80072fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80072fc:	3301      	adds	r3, #1
 80072fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8007300:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007302:	881b      	ldrh	r3, [r3, #0]
 8007304:	b29a      	uxth	r2, r3
 8007306:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007308:	b29b      	uxth	r3, r3
 800730a:	029b      	lsls	r3, r3, #10
 800730c:	b29b      	uxth	r3, r3
 800730e:	4313      	orrs	r3, r2
 8007310:	b29a      	uxth	r2, r3
 8007312:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007314:	801a      	strh	r2, [r3, #0]
 8007316:	e034      	b.n	8007382 <HAL_PCD_EP_DB_Transmit+0x80a>
 8007318:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800731a:	095b      	lsrs	r3, r3, #5
 800731c:	663b      	str	r3, [r7, #96]	@ 0x60
 800731e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007320:	f003 031f 	and.w	r3, r3, #31
 8007324:	2b00      	cmp	r3, #0
 8007326:	d102      	bne.n	800732e <HAL_PCD_EP_DB_Transmit+0x7b6>
 8007328:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800732a:	3b01      	subs	r3, #1
 800732c:	663b      	str	r3, [r7, #96]	@ 0x60
 800732e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007330:	881b      	ldrh	r3, [r3, #0]
 8007332:	b29a      	uxth	r2, r3
 8007334:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007336:	b29b      	uxth	r3, r3
 8007338:	029b      	lsls	r3, r3, #10
 800733a:	b29b      	uxth	r3, r3
 800733c:	4313      	orrs	r3, r2
 800733e:	b29b      	uxth	r3, r3
 8007340:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007344:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007348:	b29a      	uxth	r2, r3
 800734a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800734c:	801a      	strh	r2, [r3, #0]
 800734e:	e018      	b.n	8007382 <HAL_PCD_EP_DB_Transmit+0x80a>
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	785b      	ldrb	r3, [r3, #1]
 8007354:	2b01      	cmp	r3, #1
 8007356:	d114      	bne.n	8007382 <HAL_PCD_EP_DB_Transmit+0x80a>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007360:	b29b      	uxth	r3, r3
 8007362:	461a      	mov	r2, r3
 8007364:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007366:	4413      	add	r3, r2
 8007368:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	00da      	lsls	r2, r3, #3
 8007370:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007372:	4413      	add	r3, r2
 8007374:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007378:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800737a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800737c:	b29a      	uxth	r2, r3
 800737e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007380:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6818      	ldr	r0, [r3, #0]
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	6959      	ldr	r1, [r3, #20]
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	895a      	ldrh	r2, [r3, #10]
 800738e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007390:	b29b      	uxth	r3, r3
 8007392:	f006 fc90 	bl	800dcb6 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	461a      	mov	r2, r3
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4413      	add	r3, r2
 80073a4:	881b      	ldrh	r3, [r3, #0]
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073b0:	82fb      	strh	r3, [r7, #22]
 80073b2:	8afb      	ldrh	r3, [r7, #22]
 80073b4:	f083 0310 	eor.w	r3, r3, #16
 80073b8:	82fb      	strh	r3, [r7, #22]
 80073ba:	8afb      	ldrh	r3, [r7, #22]
 80073bc:	f083 0320 	eor.w	r3, r3, #32
 80073c0:	82fb      	strh	r3, [r7, #22]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	461a      	mov	r2, r3
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	441a      	add	r2, r3
 80073d0:	8afb      	ldrh	r3, [r7, #22]
 80073d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3798      	adds	r7, #152	@ 0x98
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b087      	sub	sp, #28
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	607b      	str	r3, [r7, #4]
 80073fa:	460b      	mov	r3, r1
 80073fc:	817b      	strh	r3, [r7, #10]
 80073fe:	4613      	mov	r3, r2
 8007400:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007402:	897b      	ldrh	r3, [r7, #10]
 8007404:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007408:	b29b      	uxth	r3, r3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00b      	beq.n	8007426 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800740e:	897b      	ldrh	r3, [r7, #10]
 8007410:	f003 0207 	and.w	r2, r3, #7
 8007414:	4613      	mov	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	00db      	lsls	r3, r3, #3
 800741c:	3310      	adds	r3, #16
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	4413      	add	r3, r2
 8007422:	617b      	str	r3, [r7, #20]
 8007424:	e009      	b.n	800743a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007426:	897a      	ldrh	r2, [r7, #10]
 8007428:	4613      	mov	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4413      	add	r3, r2
 800742e:	00db      	lsls	r3, r3, #3
 8007430:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	4413      	add	r3, r2
 8007438:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800743a:	893b      	ldrh	r3, [r7, #8]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d107      	bne.n	8007450 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	2200      	movs	r2, #0
 8007444:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	b29a      	uxth	r2, r3
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	80da      	strh	r2, [r3, #6]
 800744e:	e00b      	b.n	8007468 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	2201      	movs	r2, #1
 8007454:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	b29a      	uxth	r2, r3
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	0c1b      	lsrs	r3, r3, #16
 8007462:	b29a      	uxth	r2, r3
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	371c      	adds	r7, #28
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007476:	b480      	push	{r7}
 8007478:	b085      	sub	sp, #20
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800749a:	b29b      	uxth	r3, r3
 800749c:	f043 0301 	orr.w	r3, r3, #1
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	f043 0302 	orr.w	r3, r3, #2
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
	...

080074cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d141      	bne.n	800755e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80074da:	4b4b      	ldr	r3, [pc, #300]	@ (8007608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80074e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074e6:	d131      	bne.n	800754c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80074e8:	4b47      	ldr	r3, [pc, #284]	@ (8007608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074ee:	4a46      	ldr	r2, [pc, #280]	@ (8007608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80074f8:	4b43      	ldr	r3, [pc, #268]	@ (8007608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007500:	4a41      	ldr	r2, [pc, #260]	@ (8007608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007502:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007506:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007508:	4b40      	ldr	r3, [pc, #256]	@ (800760c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2232      	movs	r2, #50	@ 0x32
 800750e:	fb02 f303 	mul.w	r3, r2, r3
 8007512:	4a3f      	ldr	r2, [pc, #252]	@ (8007610 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007514:	fba2 2303 	umull	r2, r3, r2, r3
 8007518:	0c9b      	lsrs	r3, r3, #18
 800751a:	3301      	adds	r3, #1
 800751c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800751e:	e002      	b.n	8007526 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	3b01      	subs	r3, #1
 8007524:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007526:	4b38      	ldr	r3, [pc, #224]	@ (8007608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800752e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007532:	d102      	bne.n	800753a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1f2      	bne.n	8007520 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800753a:	4b33      	ldr	r3, [pc, #204]	@ (8007608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007546:	d158      	bne.n	80075fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e057      	b.n	80075fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800754c:	4b2e      	ldr	r3, [pc, #184]	@ (8007608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800754e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007552:	4a2d      	ldr	r2, [pc, #180]	@ (8007608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007554:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007558:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800755c:	e04d      	b.n	80075fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007564:	d141      	bne.n	80075ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007566:	4b28      	ldr	r3, [pc, #160]	@ (8007608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800756e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007572:	d131      	bne.n	80075d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007574:	4b24      	ldr	r3, [pc, #144]	@ (8007608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007576:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800757a:	4a23      	ldr	r2, [pc, #140]	@ (8007608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800757c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007580:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007584:	4b20      	ldr	r3, [pc, #128]	@ (8007608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800758c:	4a1e      	ldr	r2, [pc, #120]	@ (8007608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800758e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007592:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007594:	4b1d      	ldr	r3, [pc, #116]	@ (800760c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2232      	movs	r2, #50	@ 0x32
 800759a:	fb02 f303 	mul.w	r3, r2, r3
 800759e:	4a1c      	ldr	r2, [pc, #112]	@ (8007610 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80075a0:	fba2 2303 	umull	r2, r3, r2, r3
 80075a4:	0c9b      	lsrs	r3, r3, #18
 80075a6:	3301      	adds	r3, #1
 80075a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80075aa:	e002      	b.n	80075b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80075b2:	4b15      	ldr	r3, [pc, #84]	@ (8007608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075be:	d102      	bne.n	80075c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1f2      	bne.n	80075ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80075c6:	4b10      	ldr	r3, [pc, #64]	@ (8007608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075d2:	d112      	bne.n	80075fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e011      	b.n	80075fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80075d8:	4b0b      	ldr	r3, [pc, #44]	@ (8007608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075de:	4a0a      	ldr	r2, [pc, #40]	@ (8007608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80075e8:	e007      	b.n	80075fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80075ea:	4b07      	ldr	r3, [pc, #28]	@ (8007608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80075f2:	4a05      	ldr	r2, [pc, #20]	@ (8007608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80075f8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr
 8007608:	40007000 	.word	0x40007000
 800760c:	20000000 	.word	0x20000000
 8007610:	431bde83 	.word	0x431bde83

08007614 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007614:	b480      	push	{r7}
 8007616:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007618:	4b05      	ldr	r3, [pc, #20]	@ (8007630 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	4a04      	ldr	r2, [pc, #16]	@ (8007630 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800761e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007622:	6093      	str	r3, [r2, #8]
}
 8007624:	bf00      	nop
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	40007000 	.word	0x40007000

08007634 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b088      	sub	sp, #32
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d101      	bne.n	8007646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e2fe      	b.n	8007c44 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	2b00      	cmp	r3, #0
 8007650:	d075      	beq.n	800773e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007652:	4b97      	ldr	r3, [pc, #604]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	f003 030c 	and.w	r3, r3, #12
 800765a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800765c:	4b94      	ldr	r3, [pc, #592]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	f003 0303 	and.w	r3, r3, #3
 8007664:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	2b0c      	cmp	r3, #12
 800766a:	d102      	bne.n	8007672 <HAL_RCC_OscConfig+0x3e>
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	2b03      	cmp	r3, #3
 8007670:	d002      	beq.n	8007678 <HAL_RCC_OscConfig+0x44>
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	2b08      	cmp	r3, #8
 8007676:	d10b      	bne.n	8007690 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007678:	4b8d      	ldr	r3, [pc, #564]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d05b      	beq.n	800773c <HAL_RCC_OscConfig+0x108>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d157      	bne.n	800773c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e2d9      	b.n	8007c44 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007698:	d106      	bne.n	80076a8 <HAL_RCC_OscConfig+0x74>
 800769a:	4b85      	ldr	r3, [pc, #532]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a84      	ldr	r2, [pc, #528]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 80076a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076a4:	6013      	str	r3, [r2, #0]
 80076a6:	e01d      	b.n	80076e4 <HAL_RCC_OscConfig+0xb0>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80076b0:	d10c      	bne.n	80076cc <HAL_RCC_OscConfig+0x98>
 80076b2:	4b7f      	ldr	r3, [pc, #508]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a7e      	ldr	r2, [pc, #504]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 80076b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80076bc:	6013      	str	r3, [r2, #0]
 80076be:	4b7c      	ldr	r3, [pc, #496]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a7b      	ldr	r2, [pc, #492]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 80076c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076c8:	6013      	str	r3, [r2, #0]
 80076ca:	e00b      	b.n	80076e4 <HAL_RCC_OscConfig+0xb0>
 80076cc:	4b78      	ldr	r3, [pc, #480]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a77      	ldr	r2, [pc, #476]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 80076d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076d6:	6013      	str	r3, [r2, #0]
 80076d8:	4b75      	ldr	r3, [pc, #468]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a74      	ldr	r2, [pc, #464]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 80076de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80076e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d013      	beq.n	8007714 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ec:	f7fc fc56 	bl	8003f9c <HAL_GetTick>
 80076f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80076f2:	e008      	b.n	8007706 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076f4:	f7fc fc52 	bl	8003f9c <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	2b64      	cmp	r3, #100	@ 0x64
 8007700:	d901      	bls.n	8007706 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e29e      	b.n	8007c44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007706:	4b6a      	ldr	r3, [pc, #424]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d0f0      	beq.n	80076f4 <HAL_RCC_OscConfig+0xc0>
 8007712:	e014      	b.n	800773e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007714:	f7fc fc42 	bl	8003f9c <HAL_GetTick>
 8007718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800771a:	e008      	b.n	800772e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800771c:	f7fc fc3e 	bl	8003f9c <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	2b64      	cmp	r3, #100	@ 0x64
 8007728:	d901      	bls.n	800772e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e28a      	b.n	8007c44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800772e:	4b60      	ldr	r3, [pc, #384]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1f0      	bne.n	800771c <HAL_RCC_OscConfig+0xe8>
 800773a:	e000      	b.n	800773e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800773c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 0302 	and.w	r3, r3, #2
 8007746:	2b00      	cmp	r3, #0
 8007748:	d075      	beq.n	8007836 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800774a:	4b59      	ldr	r3, [pc, #356]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	f003 030c 	and.w	r3, r3, #12
 8007752:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007754:	4b56      	ldr	r3, [pc, #344]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	f003 0303 	and.w	r3, r3, #3
 800775c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	2b0c      	cmp	r3, #12
 8007762:	d102      	bne.n	800776a <HAL_RCC_OscConfig+0x136>
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	2b02      	cmp	r3, #2
 8007768:	d002      	beq.n	8007770 <HAL_RCC_OscConfig+0x13c>
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	2b04      	cmp	r3, #4
 800776e:	d11f      	bne.n	80077b0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007770:	4b4f      	ldr	r3, [pc, #316]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007778:	2b00      	cmp	r3, #0
 800777a:	d005      	beq.n	8007788 <HAL_RCC_OscConfig+0x154>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d101      	bne.n	8007788 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	e25d      	b.n	8007c44 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007788:	4b49      	ldr	r3, [pc, #292]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	061b      	lsls	r3, r3, #24
 8007796:	4946      	ldr	r1, [pc, #280]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 8007798:	4313      	orrs	r3, r2
 800779a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800779c:	4b45      	ldr	r3, [pc, #276]	@ (80078b4 <HAL_RCC_OscConfig+0x280>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7fc fbaf 	bl	8003f04 <HAL_InitTick>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d043      	beq.n	8007834 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e249      	b.n	8007c44 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d023      	beq.n	8007800 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077b8:	4b3d      	ldr	r3, [pc, #244]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a3c      	ldr	r2, [pc, #240]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 80077be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077c4:	f7fc fbea 	bl	8003f9c <HAL_GetTick>
 80077c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80077ca:	e008      	b.n	80077de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077cc:	f7fc fbe6 	bl	8003f9c <HAL_GetTick>
 80077d0:	4602      	mov	r2, r0
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d901      	bls.n	80077de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e232      	b.n	8007c44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80077de:	4b34      	ldr	r3, [pc, #208]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d0f0      	beq.n	80077cc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077ea:	4b31      	ldr	r3, [pc, #196]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	061b      	lsls	r3, r3, #24
 80077f8:	492d      	ldr	r1, [pc, #180]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 80077fa:	4313      	orrs	r3, r2
 80077fc:	604b      	str	r3, [r1, #4]
 80077fe:	e01a      	b.n	8007836 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007800:	4b2b      	ldr	r3, [pc, #172]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a2a      	ldr	r2, [pc, #168]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 8007806:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800780a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800780c:	f7fc fbc6 	bl	8003f9c <HAL_GetTick>
 8007810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007812:	e008      	b.n	8007826 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007814:	f7fc fbc2 	bl	8003f9c <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	2b02      	cmp	r3, #2
 8007820:	d901      	bls.n	8007826 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	e20e      	b.n	8007c44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007826:	4b22      	ldr	r3, [pc, #136]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1f0      	bne.n	8007814 <HAL_RCC_OscConfig+0x1e0>
 8007832:	e000      	b.n	8007836 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007834:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 0308 	and.w	r3, r3, #8
 800783e:	2b00      	cmp	r3, #0
 8007840:	d041      	beq.n	80078c6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d01c      	beq.n	8007884 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800784a:	4b19      	ldr	r3, [pc, #100]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 800784c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007850:	4a17      	ldr	r2, [pc, #92]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 8007852:	f043 0301 	orr.w	r3, r3, #1
 8007856:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800785a:	f7fc fb9f 	bl	8003f9c <HAL_GetTick>
 800785e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007860:	e008      	b.n	8007874 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007862:	f7fc fb9b 	bl	8003f9c <HAL_GetTick>
 8007866:	4602      	mov	r2, r0
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	2b02      	cmp	r3, #2
 800786e:	d901      	bls.n	8007874 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e1e7      	b.n	8007c44 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007874:	4b0e      	ldr	r3, [pc, #56]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 8007876:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800787a:	f003 0302 	and.w	r3, r3, #2
 800787e:	2b00      	cmp	r3, #0
 8007880:	d0ef      	beq.n	8007862 <HAL_RCC_OscConfig+0x22e>
 8007882:	e020      	b.n	80078c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007884:	4b0a      	ldr	r3, [pc, #40]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 8007886:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800788a:	4a09      	ldr	r2, [pc, #36]	@ (80078b0 <HAL_RCC_OscConfig+0x27c>)
 800788c:	f023 0301 	bic.w	r3, r3, #1
 8007890:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007894:	f7fc fb82 	bl	8003f9c <HAL_GetTick>
 8007898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800789a:	e00d      	b.n	80078b8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800789c:	f7fc fb7e 	bl	8003f9c <HAL_GetTick>
 80078a0:	4602      	mov	r2, r0
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d906      	bls.n	80078b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	e1ca      	b.n	8007c44 <HAL_RCC_OscConfig+0x610>
 80078ae:	bf00      	nop
 80078b0:	40021000 	.word	0x40021000
 80078b4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80078b8:	4b8c      	ldr	r3, [pc, #560]	@ (8007aec <HAL_RCC_OscConfig+0x4b8>)
 80078ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078be:	f003 0302 	and.w	r3, r3, #2
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1ea      	bne.n	800789c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 0304 	and.w	r3, r3, #4
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f000 80a6 	beq.w	8007a20 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078d4:	2300      	movs	r3, #0
 80078d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80078d8:	4b84      	ldr	r3, [pc, #528]	@ (8007aec <HAL_RCC_OscConfig+0x4b8>)
 80078da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <HAL_RCC_OscConfig+0x2b4>
 80078e4:	2301      	movs	r3, #1
 80078e6:	e000      	b.n	80078ea <HAL_RCC_OscConfig+0x2b6>
 80078e8:	2300      	movs	r3, #0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00d      	beq.n	800790a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078ee:	4b7f      	ldr	r3, [pc, #508]	@ (8007aec <HAL_RCC_OscConfig+0x4b8>)
 80078f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078f2:	4a7e      	ldr	r2, [pc, #504]	@ (8007aec <HAL_RCC_OscConfig+0x4b8>)
 80078f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80078fa:	4b7c      	ldr	r3, [pc, #496]	@ (8007aec <HAL_RCC_OscConfig+0x4b8>)
 80078fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007902:	60fb      	str	r3, [r7, #12]
 8007904:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007906:	2301      	movs	r3, #1
 8007908:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800790a:	4b79      	ldr	r3, [pc, #484]	@ (8007af0 <HAL_RCC_OscConfig+0x4bc>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007912:	2b00      	cmp	r3, #0
 8007914:	d118      	bne.n	8007948 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007916:	4b76      	ldr	r3, [pc, #472]	@ (8007af0 <HAL_RCC_OscConfig+0x4bc>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a75      	ldr	r2, [pc, #468]	@ (8007af0 <HAL_RCC_OscConfig+0x4bc>)
 800791c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007922:	f7fc fb3b 	bl	8003f9c <HAL_GetTick>
 8007926:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007928:	e008      	b.n	800793c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800792a:	f7fc fb37 	bl	8003f9c <HAL_GetTick>
 800792e:	4602      	mov	r2, r0
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	2b02      	cmp	r3, #2
 8007936:	d901      	bls.n	800793c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007938:	2303      	movs	r3, #3
 800793a:	e183      	b.n	8007c44 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800793c:	4b6c      	ldr	r3, [pc, #432]	@ (8007af0 <HAL_RCC_OscConfig+0x4bc>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007944:	2b00      	cmp	r3, #0
 8007946:	d0f0      	beq.n	800792a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d108      	bne.n	8007962 <HAL_RCC_OscConfig+0x32e>
 8007950:	4b66      	ldr	r3, [pc, #408]	@ (8007aec <HAL_RCC_OscConfig+0x4b8>)
 8007952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007956:	4a65      	ldr	r2, [pc, #404]	@ (8007aec <HAL_RCC_OscConfig+0x4b8>)
 8007958:	f043 0301 	orr.w	r3, r3, #1
 800795c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007960:	e024      	b.n	80079ac <HAL_RCC_OscConfig+0x378>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	2b05      	cmp	r3, #5
 8007968:	d110      	bne.n	800798c <HAL_RCC_OscConfig+0x358>
 800796a:	4b60      	ldr	r3, [pc, #384]	@ (8007aec <HAL_RCC_OscConfig+0x4b8>)
 800796c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007970:	4a5e      	ldr	r2, [pc, #376]	@ (8007aec <HAL_RCC_OscConfig+0x4b8>)
 8007972:	f043 0304 	orr.w	r3, r3, #4
 8007976:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800797a:	4b5c      	ldr	r3, [pc, #368]	@ (8007aec <HAL_RCC_OscConfig+0x4b8>)
 800797c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007980:	4a5a      	ldr	r2, [pc, #360]	@ (8007aec <HAL_RCC_OscConfig+0x4b8>)
 8007982:	f043 0301 	orr.w	r3, r3, #1
 8007986:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800798a:	e00f      	b.n	80079ac <HAL_RCC_OscConfig+0x378>
 800798c:	4b57      	ldr	r3, [pc, #348]	@ (8007aec <HAL_RCC_OscConfig+0x4b8>)
 800798e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007992:	4a56      	ldr	r2, [pc, #344]	@ (8007aec <HAL_RCC_OscConfig+0x4b8>)
 8007994:	f023 0301 	bic.w	r3, r3, #1
 8007998:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800799c:	4b53      	ldr	r3, [pc, #332]	@ (8007aec <HAL_RCC_OscConfig+0x4b8>)
 800799e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079a2:	4a52      	ldr	r2, [pc, #328]	@ (8007aec <HAL_RCC_OscConfig+0x4b8>)
 80079a4:	f023 0304 	bic.w	r3, r3, #4
 80079a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d016      	beq.n	80079e2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079b4:	f7fc faf2 	bl	8003f9c <HAL_GetTick>
 80079b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079ba:	e00a      	b.n	80079d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079bc:	f7fc faee 	bl	8003f9c <HAL_GetTick>
 80079c0:	4602      	mov	r2, r0
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d901      	bls.n	80079d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e138      	b.n	8007c44 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079d2:	4b46      	ldr	r3, [pc, #280]	@ (8007aec <HAL_RCC_OscConfig+0x4b8>)
 80079d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079d8:	f003 0302 	and.w	r3, r3, #2
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d0ed      	beq.n	80079bc <HAL_RCC_OscConfig+0x388>
 80079e0:	e015      	b.n	8007a0e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079e2:	f7fc fadb 	bl	8003f9c <HAL_GetTick>
 80079e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80079e8:	e00a      	b.n	8007a00 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079ea:	f7fc fad7 	bl	8003f9c <HAL_GetTick>
 80079ee:	4602      	mov	r2, r0
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d901      	bls.n	8007a00 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80079fc:	2303      	movs	r3, #3
 80079fe:	e121      	b.n	8007c44 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a00:	4b3a      	ldr	r3, [pc, #232]	@ (8007aec <HAL_RCC_OscConfig+0x4b8>)
 8007a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a06:	f003 0302 	and.w	r3, r3, #2
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1ed      	bne.n	80079ea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007a0e:	7ffb      	ldrb	r3, [r7, #31]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d105      	bne.n	8007a20 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a14:	4b35      	ldr	r3, [pc, #212]	@ (8007aec <HAL_RCC_OscConfig+0x4b8>)
 8007a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a18:	4a34      	ldr	r2, [pc, #208]	@ (8007aec <HAL_RCC_OscConfig+0x4b8>)
 8007a1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a1e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 0320 	and.w	r3, r3, #32
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d03c      	beq.n	8007aa6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	699b      	ldr	r3, [r3, #24]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d01c      	beq.n	8007a6e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007a34:	4b2d      	ldr	r3, [pc, #180]	@ (8007aec <HAL_RCC_OscConfig+0x4b8>)
 8007a36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a3a:	4a2c      	ldr	r2, [pc, #176]	@ (8007aec <HAL_RCC_OscConfig+0x4b8>)
 8007a3c:	f043 0301 	orr.w	r3, r3, #1
 8007a40:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a44:	f7fc faaa 	bl	8003f9c <HAL_GetTick>
 8007a48:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007a4a:	e008      	b.n	8007a5e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007a4c:	f7fc faa6 	bl	8003f9c <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d901      	bls.n	8007a5e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	e0f2      	b.n	8007c44 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007a5e:	4b23      	ldr	r3, [pc, #140]	@ (8007aec <HAL_RCC_OscConfig+0x4b8>)
 8007a60:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a64:	f003 0302 	and.w	r3, r3, #2
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d0ef      	beq.n	8007a4c <HAL_RCC_OscConfig+0x418>
 8007a6c:	e01b      	b.n	8007aa6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8007aec <HAL_RCC_OscConfig+0x4b8>)
 8007a70:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a74:	4a1d      	ldr	r2, [pc, #116]	@ (8007aec <HAL_RCC_OscConfig+0x4b8>)
 8007a76:	f023 0301 	bic.w	r3, r3, #1
 8007a7a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a7e:	f7fc fa8d 	bl	8003f9c <HAL_GetTick>
 8007a82:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007a84:	e008      	b.n	8007a98 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007a86:	f7fc fa89 	bl	8003f9c <HAL_GetTick>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d901      	bls.n	8007a98 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007a94:	2303      	movs	r3, #3
 8007a96:	e0d5      	b.n	8007c44 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007a98:	4b14      	ldr	r3, [pc, #80]	@ (8007aec <HAL_RCC_OscConfig+0x4b8>)
 8007a9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a9e:	f003 0302 	and.w	r3, r3, #2
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1ef      	bne.n	8007a86 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	69db      	ldr	r3, [r3, #28]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f000 80c9 	beq.w	8007c42 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8007aec <HAL_RCC_OscConfig+0x4b8>)
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f003 030c 	and.w	r3, r3, #12
 8007ab8:	2b0c      	cmp	r3, #12
 8007aba:	f000 8083 	beq.w	8007bc4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	69db      	ldr	r3, [r3, #28]
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d15e      	bne.n	8007b84 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ac6:	4b09      	ldr	r3, [pc, #36]	@ (8007aec <HAL_RCC_OscConfig+0x4b8>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a08      	ldr	r2, [pc, #32]	@ (8007aec <HAL_RCC_OscConfig+0x4b8>)
 8007acc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ad2:	f7fc fa63 	bl	8003f9c <HAL_GetTick>
 8007ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ad8:	e00c      	b.n	8007af4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ada:	f7fc fa5f 	bl	8003f9c <HAL_GetTick>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d905      	bls.n	8007af4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007ae8:	2303      	movs	r3, #3
 8007aea:	e0ab      	b.n	8007c44 <HAL_RCC_OscConfig+0x610>
 8007aec:	40021000 	.word	0x40021000
 8007af0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007af4:	4b55      	ldr	r3, [pc, #340]	@ (8007c4c <HAL_RCC_OscConfig+0x618>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1ec      	bne.n	8007ada <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b00:	4b52      	ldr	r3, [pc, #328]	@ (8007c4c <HAL_RCC_OscConfig+0x618>)
 8007b02:	68da      	ldr	r2, [r3, #12]
 8007b04:	4b52      	ldr	r3, [pc, #328]	@ (8007c50 <HAL_RCC_OscConfig+0x61c>)
 8007b06:	4013      	ands	r3, r2
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	6a11      	ldr	r1, [r2, #32]
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007b10:	3a01      	subs	r2, #1
 8007b12:	0112      	lsls	r2, r2, #4
 8007b14:	4311      	orrs	r1, r2
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007b1a:	0212      	lsls	r2, r2, #8
 8007b1c:	4311      	orrs	r1, r2
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007b22:	0852      	lsrs	r2, r2, #1
 8007b24:	3a01      	subs	r2, #1
 8007b26:	0552      	lsls	r2, r2, #21
 8007b28:	4311      	orrs	r1, r2
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007b2e:	0852      	lsrs	r2, r2, #1
 8007b30:	3a01      	subs	r2, #1
 8007b32:	0652      	lsls	r2, r2, #25
 8007b34:	4311      	orrs	r1, r2
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007b3a:	06d2      	lsls	r2, r2, #27
 8007b3c:	430a      	orrs	r2, r1
 8007b3e:	4943      	ldr	r1, [pc, #268]	@ (8007c4c <HAL_RCC_OscConfig+0x618>)
 8007b40:	4313      	orrs	r3, r2
 8007b42:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b44:	4b41      	ldr	r3, [pc, #260]	@ (8007c4c <HAL_RCC_OscConfig+0x618>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a40      	ldr	r2, [pc, #256]	@ (8007c4c <HAL_RCC_OscConfig+0x618>)
 8007b4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007b4e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007b50:	4b3e      	ldr	r3, [pc, #248]	@ (8007c4c <HAL_RCC_OscConfig+0x618>)
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	4a3d      	ldr	r2, [pc, #244]	@ (8007c4c <HAL_RCC_OscConfig+0x618>)
 8007b56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007b5a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b5c:	f7fc fa1e 	bl	8003f9c <HAL_GetTick>
 8007b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b62:	e008      	b.n	8007b76 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b64:	f7fc fa1a 	bl	8003f9c <HAL_GetTick>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d901      	bls.n	8007b76 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007b72:	2303      	movs	r3, #3
 8007b74:	e066      	b.n	8007c44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b76:	4b35      	ldr	r3, [pc, #212]	@ (8007c4c <HAL_RCC_OscConfig+0x618>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d0f0      	beq.n	8007b64 <HAL_RCC_OscConfig+0x530>
 8007b82:	e05e      	b.n	8007c42 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b84:	4b31      	ldr	r3, [pc, #196]	@ (8007c4c <HAL_RCC_OscConfig+0x618>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a30      	ldr	r2, [pc, #192]	@ (8007c4c <HAL_RCC_OscConfig+0x618>)
 8007b8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b90:	f7fc fa04 	bl	8003f9c <HAL_GetTick>
 8007b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b96:	e008      	b.n	8007baa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b98:	f7fc fa00 	bl	8003f9c <HAL_GetTick>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d901      	bls.n	8007baa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	e04c      	b.n	8007c44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007baa:	4b28      	ldr	r3, [pc, #160]	@ (8007c4c <HAL_RCC_OscConfig+0x618>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1f0      	bne.n	8007b98 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007bb6:	4b25      	ldr	r3, [pc, #148]	@ (8007c4c <HAL_RCC_OscConfig+0x618>)
 8007bb8:	68da      	ldr	r2, [r3, #12]
 8007bba:	4924      	ldr	r1, [pc, #144]	@ (8007c4c <HAL_RCC_OscConfig+0x618>)
 8007bbc:	4b25      	ldr	r3, [pc, #148]	@ (8007c54 <HAL_RCC_OscConfig+0x620>)
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	60cb      	str	r3, [r1, #12]
 8007bc2:	e03e      	b.n	8007c42 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	69db      	ldr	r3, [r3, #28]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d101      	bne.n	8007bd0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e039      	b.n	8007c44 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007bd0:	4b1e      	ldr	r3, [pc, #120]	@ (8007c4c <HAL_RCC_OscConfig+0x618>)
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	f003 0203 	and.w	r2, r3, #3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a1b      	ldr	r3, [r3, #32]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d12c      	bne.n	8007c3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d123      	bne.n	8007c3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c00:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d11b      	bne.n	8007c3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c10:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d113      	bne.n	8007c3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c20:	085b      	lsrs	r3, r3, #1
 8007c22:	3b01      	subs	r3, #1
 8007c24:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d109      	bne.n	8007c3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c34:	085b      	lsrs	r3, r3, #1
 8007c36:	3b01      	subs	r3, #1
 8007c38:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d001      	beq.n	8007c42 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e000      	b.n	8007c44 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3720      	adds	r7, #32
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	40021000 	.word	0x40021000
 8007c50:	019f800c 	.word	0x019f800c
 8007c54:	feeefffc 	.word	0xfeeefffc

08007c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007c62:	2300      	movs	r3, #0
 8007c64:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d101      	bne.n	8007c70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e11e      	b.n	8007eae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007c70:	4b91      	ldr	r3, [pc, #580]	@ (8007eb8 <HAL_RCC_ClockConfig+0x260>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 030f 	and.w	r3, r3, #15
 8007c78:	683a      	ldr	r2, [r7, #0]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d910      	bls.n	8007ca0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c7e:	4b8e      	ldr	r3, [pc, #568]	@ (8007eb8 <HAL_RCC_ClockConfig+0x260>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f023 020f 	bic.w	r2, r3, #15
 8007c86:	498c      	ldr	r1, [pc, #560]	@ (8007eb8 <HAL_RCC_ClockConfig+0x260>)
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c8e:	4b8a      	ldr	r3, [pc, #552]	@ (8007eb8 <HAL_RCC_ClockConfig+0x260>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 030f 	and.w	r3, r3, #15
 8007c96:	683a      	ldr	r2, [r7, #0]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d001      	beq.n	8007ca0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e106      	b.n	8007eae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 0301 	and.w	r3, r3, #1
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d073      	beq.n	8007d94 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	2b03      	cmp	r3, #3
 8007cb2:	d129      	bne.n	8007d08 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007cb4:	4b81      	ldr	r3, [pc, #516]	@ (8007ebc <HAL_RCC_ClockConfig+0x264>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d101      	bne.n	8007cc4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e0f4      	b.n	8007eae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007cc4:	f000 f99e 	bl	8008004 <RCC_GetSysClockFreqFromPLLSource>
 8007cc8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	4a7c      	ldr	r2, [pc, #496]	@ (8007ec0 <HAL_RCC_ClockConfig+0x268>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d93f      	bls.n	8007d52 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007cd2:	4b7a      	ldr	r3, [pc, #488]	@ (8007ebc <HAL_RCC_ClockConfig+0x264>)
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d009      	beq.n	8007cf2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d033      	beq.n	8007d52 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d12f      	bne.n	8007d52 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007cf2:	4b72      	ldr	r3, [pc, #456]	@ (8007ebc <HAL_RCC_ClockConfig+0x264>)
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007cfa:	4a70      	ldr	r2, [pc, #448]	@ (8007ebc <HAL_RCC_ClockConfig+0x264>)
 8007cfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007d02:	2380      	movs	r3, #128	@ 0x80
 8007d04:	617b      	str	r3, [r7, #20]
 8007d06:	e024      	b.n	8007d52 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	2b02      	cmp	r3, #2
 8007d0e:	d107      	bne.n	8007d20 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d10:	4b6a      	ldr	r3, [pc, #424]	@ (8007ebc <HAL_RCC_ClockConfig+0x264>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d109      	bne.n	8007d30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e0c6      	b.n	8007eae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d20:	4b66      	ldr	r3, [pc, #408]	@ (8007ebc <HAL_RCC_ClockConfig+0x264>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d101      	bne.n	8007d30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e0be      	b.n	8007eae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007d30:	f000 f8ce 	bl	8007ed0 <HAL_RCC_GetSysClockFreq>
 8007d34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	4a61      	ldr	r2, [pc, #388]	@ (8007ec0 <HAL_RCC_ClockConfig+0x268>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d909      	bls.n	8007d52 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007d3e:	4b5f      	ldr	r3, [pc, #380]	@ (8007ebc <HAL_RCC_ClockConfig+0x264>)
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d46:	4a5d      	ldr	r2, [pc, #372]	@ (8007ebc <HAL_RCC_ClockConfig+0x264>)
 8007d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d4c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007d4e:	2380      	movs	r3, #128	@ 0x80
 8007d50:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007d52:	4b5a      	ldr	r3, [pc, #360]	@ (8007ebc <HAL_RCC_ClockConfig+0x264>)
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f023 0203 	bic.w	r2, r3, #3
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	4957      	ldr	r1, [pc, #348]	@ (8007ebc <HAL_RCC_ClockConfig+0x264>)
 8007d60:	4313      	orrs	r3, r2
 8007d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d64:	f7fc f91a 	bl	8003f9c <HAL_GetTick>
 8007d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d6a:	e00a      	b.n	8007d82 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d6c:	f7fc f916 	bl	8003f9c <HAL_GetTick>
 8007d70:	4602      	mov	r2, r0
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d901      	bls.n	8007d82 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	e095      	b.n	8007eae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d82:	4b4e      	ldr	r3, [pc, #312]	@ (8007ebc <HAL_RCC_ClockConfig+0x264>)
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	f003 020c 	and.w	r2, r3, #12
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d1eb      	bne.n	8007d6c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 0302 	and.w	r3, r3, #2
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d023      	beq.n	8007de8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0304 	and.w	r3, r3, #4
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d005      	beq.n	8007db8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007dac:	4b43      	ldr	r3, [pc, #268]	@ (8007ebc <HAL_RCC_ClockConfig+0x264>)
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	4a42      	ldr	r2, [pc, #264]	@ (8007ebc <HAL_RCC_ClockConfig+0x264>)
 8007db2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007db6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 0308 	and.w	r3, r3, #8
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d007      	beq.n	8007dd4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007dc4:	4b3d      	ldr	r3, [pc, #244]	@ (8007ebc <HAL_RCC_ClockConfig+0x264>)
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007dcc:	4a3b      	ldr	r2, [pc, #236]	@ (8007ebc <HAL_RCC_ClockConfig+0x264>)
 8007dce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007dd2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007dd4:	4b39      	ldr	r3, [pc, #228]	@ (8007ebc <HAL_RCC_ClockConfig+0x264>)
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	4936      	ldr	r1, [pc, #216]	@ (8007ebc <HAL_RCC_ClockConfig+0x264>)
 8007de2:	4313      	orrs	r3, r2
 8007de4:	608b      	str	r3, [r1, #8]
 8007de6:	e008      	b.n	8007dfa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	2b80      	cmp	r3, #128	@ 0x80
 8007dec:	d105      	bne.n	8007dfa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007dee:	4b33      	ldr	r3, [pc, #204]	@ (8007ebc <HAL_RCC_ClockConfig+0x264>)
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	4a32      	ldr	r2, [pc, #200]	@ (8007ebc <HAL_RCC_ClockConfig+0x264>)
 8007df4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007df8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8007eb8 <HAL_RCC_ClockConfig+0x260>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 030f 	and.w	r3, r3, #15
 8007e02:	683a      	ldr	r2, [r7, #0]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d21d      	bcs.n	8007e44 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e08:	4b2b      	ldr	r3, [pc, #172]	@ (8007eb8 <HAL_RCC_ClockConfig+0x260>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f023 020f 	bic.w	r2, r3, #15
 8007e10:	4929      	ldr	r1, [pc, #164]	@ (8007eb8 <HAL_RCC_ClockConfig+0x260>)
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007e18:	f7fc f8c0 	bl	8003f9c <HAL_GetTick>
 8007e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e1e:	e00a      	b.n	8007e36 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e20:	f7fc f8bc 	bl	8003f9c <HAL_GetTick>
 8007e24:	4602      	mov	r2, r0
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d901      	bls.n	8007e36 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007e32:	2303      	movs	r3, #3
 8007e34:	e03b      	b.n	8007eae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e36:	4b20      	ldr	r3, [pc, #128]	@ (8007eb8 <HAL_RCC_ClockConfig+0x260>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 030f 	and.w	r3, r3, #15
 8007e3e:	683a      	ldr	r2, [r7, #0]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d1ed      	bne.n	8007e20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 0304 	and.w	r3, r3, #4
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d008      	beq.n	8007e62 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e50:	4b1a      	ldr	r3, [pc, #104]	@ (8007ebc <HAL_RCC_ClockConfig+0x264>)
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	4917      	ldr	r1, [pc, #92]	@ (8007ebc <HAL_RCC_ClockConfig+0x264>)
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 0308 	and.w	r3, r3, #8
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d009      	beq.n	8007e82 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e6e:	4b13      	ldr	r3, [pc, #76]	@ (8007ebc <HAL_RCC_ClockConfig+0x264>)
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	00db      	lsls	r3, r3, #3
 8007e7c:	490f      	ldr	r1, [pc, #60]	@ (8007ebc <HAL_RCC_ClockConfig+0x264>)
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007e82:	f000 f825 	bl	8007ed0 <HAL_RCC_GetSysClockFreq>
 8007e86:	4602      	mov	r2, r0
 8007e88:	4b0c      	ldr	r3, [pc, #48]	@ (8007ebc <HAL_RCC_ClockConfig+0x264>)
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	091b      	lsrs	r3, r3, #4
 8007e8e:	f003 030f 	and.w	r3, r3, #15
 8007e92:	490c      	ldr	r1, [pc, #48]	@ (8007ec4 <HAL_RCC_ClockConfig+0x26c>)
 8007e94:	5ccb      	ldrb	r3, [r1, r3]
 8007e96:	f003 031f 	and.w	r3, r3, #31
 8007e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8007ec8 <HAL_RCC_ClockConfig+0x270>)
 8007ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8007ecc <HAL_RCC_ClockConfig+0x274>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7fc f82c 	bl	8003f04 <HAL_InitTick>
 8007eac:	4603      	mov	r3, r0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3718      	adds	r7, #24
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	40022000 	.word	0x40022000
 8007ebc:	40021000 	.word	0x40021000
 8007ec0:	04c4b400 	.word	0x04c4b400
 8007ec4:	08010b44 	.word	0x08010b44
 8007ec8:	20000000 	.word	0x20000000
 8007ecc:	20000004 	.word	0x20000004

08007ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b087      	sub	sp, #28
 8007ed4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007ed6:	4b2c      	ldr	r3, [pc, #176]	@ (8007f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	f003 030c 	and.w	r3, r3, #12
 8007ede:	2b04      	cmp	r3, #4
 8007ee0:	d102      	bne.n	8007ee8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007ee2:	4b2a      	ldr	r3, [pc, #168]	@ (8007f8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007ee4:	613b      	str	r3, [r7, #16]
 8007ee6:	e047      	b.n	8007f78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007ee8:	4b27      	ldr	r3, [pc, #156]	@ (8007f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	f003 030c 	and.w	r3, r3, #12
 8007ef0:	2b08      	cmp	r3, #8
 8007ef2:	d102      	bne.n	8007efa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007ef4:	4b26      	ldr	r3, [pc, #152]	@ (8007f90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007ef6:	613b      	str	r3, [r7, #16]
 8007ef8:	e03e      	b.n	8007f78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007efa:	4b23      	ldr	r3, [pc, #140]	@ (8007f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	f003 030c 	and.w	r3, r3, #12
 8007f02:	2b0c      	cmp	r3, #12
 8007f04:	d136      	bne.n	8007f74 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007f06:	4b20      	ldr	r3, [pc, #128]	@ (8007f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	f003 0303 	and.w	r3, r3, #3
 8007f0e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007f10:	4b1d      	ldr	r3, [pc, #116]	@ (8007f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	091b      	lsrs	r3, r3, #4
 8007f16:	f003 030f 	and.w	r3, r3, #15
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2b03      	cmp	r3, #3
 8007f22:	d10c      	bne.n	8007f3e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007f24:	4a1a      	ldr	r2, [pc, #104]	@ (8007f90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f2c:	4a16      	ldr	r2, [pc, #88]	@ (8007f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f2e:	68d2      	ldr	r2, [r2, #12]
 8007f30:	0a12      	lsrs	r2, r2, #8
 8007f32:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007f36:	fb02 f303 	mul.w	r3, r2, r3
 8007f3a:	617b      	str	r3, [r7, #20]
      break;
 8007f3c:	e00c      	b.n	8007f58 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007f3e:	4a13      	ldr	r2, [pc, #76]	@ (8007f8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f46:	4a10      	ldr	r2, [pc, #64]	@ (8007f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f48:	68d2      	ldr	r2, [r2, #12]
 8007f4a:	0a12      	lsrs	r2, r2, #8
 8007f4c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007f50:	fb02 f303 	mul.w	r3, r2, r3
 8007f54:	617b      	str	r3, [r7, #20]
      break;
 8007f56:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007f58:	4b0b      	ldr	r3, [pc, #44]	@ (8007f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	0e5b      	lsrs	r3, r3, #25
 8007f5e:	f003 0303 	and.w	r3, r3, #3
 8007f62:	3301      	adds	r3, #1
 8007f64:	005b      	lsls	r3, r3, #1
 8007f66:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007f68:	697a      	ldr	r2, [r7, #20]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f70:	613b      	str	r3, [r7, #16]
 8007f72:	e001      	b.n	8007f78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007f74:	2300      	movs	r3, #0
 8007f76:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007f78:	693b      	ldr	r3, [r7, #16]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	371c      	adds	r7, #28
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	40021000 	.word	0x40021000
 8007f8c:	00f42400 	.word	0x00f42400
 8007f90:	016e3600 	.word	0x016e3600

08007f94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f94:	b480      	push	{r7}
 8007f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f98:	4b03      	ldr	r3, [pc, #12]	@ (8007fa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	20000000 	.word	0x20000000

08007fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007fb0:	f7ff fff0 	bl	8007f94 <HAL_RCC_GetHCLKFreq>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	4b06      	ldr	r3, [pc, #24]	@ (8007fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	0a1b      	lsrs	r3, r3, #8
 8007fbc:	f003 0307 	and.w	r3, r3, #7
 8007fc0:	4904      	ldr	r1, [pc, #16]	@ (8007fd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007fc2:	5ccb      	ldrb	r3, [r1, r3]
 8007fc4:	f003 031f 	and.w	r3, r3, #31
 8007fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	40021000 	.word	0x40021000
 8007fd4:	08010b54 	.word	0x08010b54

08007fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007fdc:	f7ff ffda 	bl	8007f94 <HAL_RCC_GetHCLKFreq>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	4b06      	ldr	r3, [pc, #24]	@ (8007ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	0adb      	lsrs	r3, r3, #11
 8007fe8:	f003 0307 	and.w	r3, r3, #7
 8007fec:	4904      	ldr	r1, [pc, #16]	@ (8008000 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007fee:	5ccb      	ldrb	r3, [r1, r3]
 8007ff0:	f003 031f 	and.w	r3, r3, #31
 8007ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	40021000 	.word	0x40021000
 8008000:	08010b54 	.word	0x08010b54

08008004 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008004:	b480      	push	{r7}
 8008006:	b087      	sub	sp, #28
 8008008:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800800a:	4b1e      	ldr	r3, [pc, #120]	@ (8008084 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	f003 0303 	and.w	r3, r3, #3
 8008012:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008014:	4b1b      	ldr	r3, [pc, #108]	@ (8008084 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	091b      	lsrs	r3, r3, #4
 800801a:	f003 030f 	and.w	r3, r3, #15
 800801e:	3301      	adds	r3, #1
 8008020:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	2b03      	cmp	r3, #3
 8008026:	d10c      	bne.n	8008042 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008028:	4a17      	ldr	r2, [pc, #92]	@ (8008088 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008030:	4a14      	ldr	r2, [pc, #80]	@ (8008084 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008032:	68d2      	ldr	r2, [r2, #12]
 8008034:	0a12      	lsrs	r2, r2, #8
 8008036:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800803a:	fb02 f303 	mul.w	r3, r2, r3
 800803e:	617b      	str	r3, [r7, #20]
    break;
 8008040:	e00c      	b.n	800805c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008042:	4a12      	ldr	r2, [pc, #72]	@ (800808c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	fbb2 f3f3 	udiv	r3, r2, r3
 800804a:	4a0e      	ldr	r2, [pc, #56]	@ (8008084 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800804c:	68d2      	ldr	r2, [r2, #12]
 800804e:	0a12      	lsrs	r2, r2, #8
 8008050:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008054:	fb02 f303 	mul.w	r3, r2, r3
 8008058:	617b      	str	r3, [r7, #20]
    break;
 800805a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800805c:	4b09      	ldr	r3, [pc, #36]	@ (8008084 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	0e5b      	lsrs	r3, r3, #25
 8008062:	f003 0303 	and.w	r3, r3, #3
 8008066:	3301      	adds	r3, #1
 8008068:	005b      	lsls	r3, r3, #1
 800806a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800806c:	697a      	ldr	r2, [r7, #20]
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	fbb2 f3f3 	udiv	r3, r2, r3
 8008074:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008076:	687b      	ldr	r3, [r7, #4]
}
 8008078:	4618      	mov	r0, r3
 800807a:	371c      	adds	r7, #28
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr
 8008084:	40021000 	.word	0x40021000
 8008088:	016e3600 	.word	0x016e3600
 800808c:	00f42400 	.word	0x00f42400

08008090 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008098:	2300      	movs	r3, #0
 800809a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800809c:	2300      	movs	r3, #0
 800809e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f000 8098 	beq.w	80081de <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080ae:	2300      	movs	r3, #0
 80080b0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80080b2:	4b43      	ldr	r3, [pc, #268]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80080b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10d      	bne.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080be:	4b40      	ldr	r3, [pc, #256]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80080c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080c2:	4a3f      	ldr	r2, [pc, #252]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80080c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80080ca:	4b3d      	ldr	r3, [pc, #244]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80080cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080d2:	60bb      	str	r3, [r7, #8]
 80080d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80080d6:	2301      	movs	r3, #1
 80080d8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80080da:	4b3a      	ldr	r3, [pc, #232]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a39      	ldr	r2, [pc, #228]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80080e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80080e6:	f7fb ff59 	bl	8003f9c <HAL_GetTick>
 80080ea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080ec:	e009      	b.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080ee:	f7fb ff55 	bl	8003f9c <HAL_GetTick>
 80080f2:	4602      	mov	r2, r0
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	1ad3      	subs	r3, r2, r3
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d902      	bls.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80080fc:	2303      	movs	r3, #3
 80080fe:	74fb      	strb	r3, [r7, #19]
        break;
 8008100:	e005      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008102:	4b30      	ldr	r3, [pc, #192]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800810a:	2b00      	cmp	r3, #0
 800810c:	d0ef      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800810e:	7cfb      	ldrb	r3, [r7, #19]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d159      	bne.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008114:	4b2a      	ldr	r3, [pc, #168]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800811a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800811e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d01e      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	429a      	cmp	r2, r3
 800812e:	d019      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008130:	4b23      	ldr	r3, [pc, #140]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008136:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800813a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800813c:	4b20      	ldr	r3, [pc, #128]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800813e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008142:	4a1f      	ldr	r2, [pc, #124]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008148:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800814c:	4b1c      	ldr	r3, [pc, #112]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800814e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008152:	4a1b      	ldr	r2, [pc, #108]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008154:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008158:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800815c:	4a18      	ldr	r2, [pc, #96]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	f003 0301 	and.w	r3, r3, #1
 800816a:	2b00      	cmp	r3, #0
 800816c:	d016      	beq.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800816e:	f7fb ff15 	bl	8003f9c <HAL_GetTick>
 8008172:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008174:	e00b      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008176:	f7fb ff11 	bl	8003f9c <HAL_GetTick>
 800817a:	4602      	mov	r2, r0
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	1ad3      	subs	r3, r2, r3
 8008180:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008184:	4293      	cmp	r3, r2
 8008186:	d902      	bls.n	800818e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008188:	2303      	movs	r3, #3
 800818a:	74fb      	strb	r3, [r7, #19]
            break;
 800818c:	e006      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800818e:	4b0c      	ldr	r3, [pc, #48]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008194:	f003 0302 	and.w	r3, r3, #2
 8008198:	2b00      	cmp	r3, #0
 800819a:	d0ec      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800819c:	7cfb      	ldrb	r3, [r7, #19]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d10b      	bne.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80081a2:	4b07      	ldr	r3, [pc, #28]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081b0:	4903      	ldr	r1, [pc, #12]	@ (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081b2:	4313      	orrs	r3, r2
 80081b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80081b8:	e008      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80081ba:	7cfb      	ldrb	r3, [r7, #19]
 80081bc:	74bb      	strb	r3, [r7, #18]
 80081be:	e005      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80081c0:	40021000 	.word	0x40021000
 80081c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c8:	7cfb      	ldrb	r3, [r7, #19]
 80081ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80081cc:	7c7b      	ldrb	r3, [r7, #17]
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d105      	bne.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80081d2:	4ba7      	ldr	r3, [pc, #668]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081d6:	4aa6      	ldr	r2, [pc, #664]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80081dc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 0301 	and.w	r3, r3, #1
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00a      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80081ea:	4ba1      	ldr	r3, [pc, #644]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081f0:	f023 0203 	bic.w	r2, r3, #3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	499d      	ldr	r1, [pc, #628]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081fa:	4313      	orrs	r3, r2
 80081fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 0302 	and.w	r3, r3, #2
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00a      	beq.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800820c:	4b98      	ldr	r3, [pc, #608]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800820e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008212:	f023 020c 	bic.w	r2, r3, #12
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	4995      	ldr	r1, [pc, #596]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800821c:	4313      	orrs	r3, r2
 800821e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 0304 	and.w	r3, r3, #4
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00a      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800822e:	4b90      	ldr	r3, [pc, #576]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008234:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	498c      	ldr	r1, [pc, #560]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800823e:	4313      	orrs	r3, r2
 8008240:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 0308 	and.w	r3, r3, #8
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00a      	beq.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008250:	4b87      	ldr	r3, [pc, #540]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008256:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	4984      	ldr	r1, [pc, #528]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008260:	4313      	orrs	r3, r2
 8008262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 0310 	and.w	r3, r3, #16
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00a      	beq.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008272:	4b7f      	ldr	r3, [pc, #508]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008278:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	695b      	ldr	r3, [r3, #20]
 8008280:	497b      	ldr	r1, [pc, #492]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008282:	4313      	orrs	r3, r2
 8008284:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 0320 	and.w	r3, r3, #32
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00a      	beq.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008294:	4b76      	ldr	r3, [pc, #472]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800829a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	4973      	ldr	r1, [pc, #460]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082a4:	4313      	orrs	r3, r2
 80082a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00a      	beq.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80082b6:	4b6e      	ldr	r3, [pc, #440]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082bc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	69db      	ldr	r3, [r3, #28]
 80082c4:	496a      	ldr	r1, [pc, #424]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082c6:	4313      	orrs	r3, r2
 80082c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00a      	beq.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80082d8:	4b65      	ldr	r3, [pc, #404]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082de:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a1b      	ldr	r3, [r3, #32]
 80082e6:	4962      	ldr	r1, [pc, #392]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082e8:	4313      	orrs	r3, r2
 80082ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00a      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80082fa:	4b5d      	ldr	r3, [pc, #372]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008300:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008308:	4959      	ldr	r1, [pc, #356]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800830a:	4313      	orrs	r3, r2
 800830c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00a      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800831c:	4b54      	ldr	r3, [pc, #336]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800831e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008322:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800832a:	4951      	ldr	r1, [pc, #324]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800832c:	4313      	orrs	r3, r2
 800832e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800833a:	2b00      	cmp	r3, #0
 800833c:	d015      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800833e:	4b4c      	ldr	r3, [pc, #304]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008344:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800834c:	4948      	ldr	r1, [pc, #288]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800834e:	4313      	orrs	r3, r2
 8008350:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008358:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800835c:	d105      	bne.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800835e:	4b44      	ldr	r3, [pc, #272]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	4a43      	ldr	r2, [pc, #268]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008364:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008368:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008372:	2b00      	cmp	r3, #0
 8008374:	d015      	beq.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008376:	4b3e      	ldr	r3, [pc, #248]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800837c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008384:	493a      	ldr	r1, [pc, #232]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008386:	4313      	orrs	r3, r2
 8008388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008390:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008394:	d105      	bne.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008396:	4b36      	ldr	r3, [pc, #216]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	4a35      	ldr	r2, [pc, #212]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800839c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80083a0:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d015      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80083ae:	4b30      	ldr	r3, [pc, #192]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083b4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083bc:	492c      	ldr	r1, [pc, #176]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083be:	4313      	orrs	r3, r2
 80083c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80083cc:	d105      	bne.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80083ce:	4b28      	ldr	r3, [pc, #160]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	4a27      	ldr	r2, [pc, #156]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80083d8:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d015      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80083e6:	4b22      	ldr	r3, [pc, #136]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083ec:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083f4:	491e      	ldr	r1, [pc, #120]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083f6:	4313      	orrs	r3, r2
 80083f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008400:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008404:	d105      	bne.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008406:	4b1a      	ldr	r3, [pc, #104]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	4a19      	ldr	r2, [pc, #100]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800840c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008410:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800841a:	2b00      	cmp	r3, #0
 800841c:	d015      	beq.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800841e:	4b14      	ldr	r3, [pc, #80]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008424:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800842c:	4910      	ldr	r1, [pc, #64]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800842e:	4313      	orrs	r3, r2
 8008430:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008438:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800843c:	d105      	bne.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800843e:	4b0c      	ldr	r3, [pc, #48]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	4a0b      	ldr	r2, [pc, #44]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008444:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008448:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008452:	2b00      	cmp	r3, #0
 8008454:	d018      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008456:	4b06      	ldr	r3, [pc, #24]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800845c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008464:	4902      	ldr	r1, [pc, #8]	@ (8008470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008466:	4313      	orrs	r3, r2
 8008468:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	e001      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008470:	40021000 	.word	0x40021000
 8008474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008476:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800847a:	d105      	bne.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800847c:	4b21      	ldr	r3, [pc, #132]	@ (8008504 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	4a20      	ldr	r2, [pc, #128]	@ (8008504 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008482:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008486:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008490:	2b00      	cmp	r3, #0
 8008492:	d015      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008494:	4b1b      	ldr	r3, [pc, #108]	@ (8008504 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800849a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084a2:	4918      	ldr	r1, [pc, #96]	@ (8008504 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80084a4:	4313      	orrs	r3, r2
 80084a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084b2:	d105      	bne.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80084b4:	4b13      	ldr	r3, [pc, #76]	@ (8008504 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	4a12      	ldr	r2, [pc, #72]	@ (8008504 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80084ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084be:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d015      	beq.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80084cc:	4b0d      	ldr	r3, [pc, #52]	@ (8008504 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80084ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80084d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084da:	490a      	ldr	r1, [pc, #40]	@ (8008504 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80084dc:	4313      	orrs	r3, r2
 80084de:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084ea:	d105      	bne.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084ec:	4b05      	ldr	r3, [pc, #20]	@ (8008504 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	4a04      	ldr	r2, [pc, #16]	@ (8008504 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80084f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80084f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3718      	adds	r7, #24
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	40021000 	.word	0x40021000

08008508 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_QSPI  QSPI peripheral clock (only for devices with QSPI)
  *            @arg @ref RCC_PERIPHCLK_RTC  RTC peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b088      	sub	sp, #32
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8008510:	2300      	movs	r3, #0
 8008512:	61fb      	str	r3, [r7, #28]
  uint32_t pllvco, plln, pllp;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800851a:	d136      	bne.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800851c:	4bb3      	ldr	r3, [pc, #716]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800851e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008522:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008526:	613b      	str	r3, [r7, #16]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008528:	4bb0      	ldr	r3, [pc, #704]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800852a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800852e:	f003 0302 	and.w	r3, r3, #2
 8008532:	2b02      	cmp	r3, #2
 8008534:	d108      	bne.n	8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800853c:	d104      	bne.n	8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 800853e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008542:	61fb      	str	r3, [r7, #28]
 8008544:	f000 bce6 	b.w	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008548:	4ba8      	ldr	r3, [pc, #672]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800854a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800854e:	f003 0302 	and.w	r3, r3, #2
 8008552:	2b02      	cmp	r3, #2
 8008554:	d108      	bne.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800855c:	d104      	bne.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    {
      frequency = LSI_VALUE;
 800855e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008562:	61fb      	str	r3, [r7, #28]
 8008564:	f000 bcd6 	b.w	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008568:	4ba0      	ldr	r3, [pc, #640]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008570:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008574:	f040 84ce 	bne.w	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800857e:	f040 84c9 	bne.w	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
    {
      frequency = HSE_VALUE / 32U;
 8008582:	4b9b      	ldr	r3, [pc, #620]	@ (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8008584:	61fb      	str	r3, [r7, #28]
 8008586:	f000 bcc5 	b.w	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)   /* HSI ? */
 800858a:	4b98      	ldr	r3, [pc, #608]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	f003 0303 	and.w	r3, r3, #3
 8008592:	2b02      	cmp	r3, #2
 8008594:	d10c      	bne.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008596:	4b95      	ldr	r3, [pc, #596]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800859e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085a2:	d102      	bne.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        pllvco = HSI_VALUE;
 80085a4:	4b93      	ldr	r3, [pc, #588]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80085a6:	61bb      	str	r3, [r7, #24]
 80085a8:	e017      	b.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 80085aa:	2300      	movs	r3, #0
 80085ac:	61bb      	str	r3, [r7, #24]
 80085ae:	e014      	b.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)   /* HSE ? */
 80085b0:	4b8e      	ldr	r3, [pc, #568]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	f003 0303 	and.w	r3, r3, #3
 80085b8:	2b03      	cmp	r3, #3
 80085ba:	d10c      	bne.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80085bc:	4b8b      	ldr	r3, [pc, #556]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085c8:	d102      	bne.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      {
        pllvco = HSE_VALUE;
 80085ca:	4b8b      	ldr	r3, [pc, #556]	@ (80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80085cc:	61bb      	str	r3, [r7, #24]
 80085ce:	e004      	b.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 80085d0:	2300      	movs	r3, #0
 80085d2:	61bb      	str	r3, [r7, #24]
 80085d4:	e001      	b.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else /* No source */
    {
      pllvco = 0U;
 80085d6:	2300      	movs	r3, #0
 80085d8:	61bb      	str	r3, [r7, #24]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80085da:	4b84      	ldr	r3, [pc, #528]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	091b      	lsrs	r3, r3, #4
 80085e0:	f003 030f 	and.w	r3, r3, #15
 80085e4:	3301      	adds	r3, #1
 80085e6:	69ba      	ldr	r2, [r7, #24]
 80085e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ec:	61bb      	str	r3, [r7, #24]

    switch(PeriphClk)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80085f4:	f000 843c 	beq.w	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80085fe:	f200 8464 	bhi.w	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008608:	f000 83f7 	beq.w	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008612:	f200 845a 	bhi.w	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800861c:	f000 83b0 	beq.w	8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x878>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008626:	f200 8450 	bhi.w	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008630:	f000 8378 	beq.w	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800863a:	f200 8446 	bhi.w	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008644:	f000 8335 	beq.w	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800864e:	f200 843c 	bhi.w	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008658:	f000 82f6 	beq.w	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x740>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008662:	f200 8432 	bhi.w	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800866c:	f000 82a8 	beq.w	8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008676:	f200 8428 	bhi.w	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008680:	f000 825a 	beq.w	8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800868a:	f200 841e 	bhi.w	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008694:	f000 8214 	beq.w	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800869e:	f200 8414 	bhi.w	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086a8:	f000 81e0 	beq.w	8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086b2:	f200 840a 	bhi.w	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2b80      	cmp	r3, #128	@ 0x80
 80086ba:	f000 81b2 	beq.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2b80      	cmp	r3, #128	@ 0x80
 80086c2:	f200 8402 	bhi.w	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2b20      	cmp	r3, #32
 80086ca:	d84b      	bhi.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f000 83fb 	beq.w	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	3b01      	subs	r3, #1
 80086d8:	2b1f      	cmp	r3, #31
 80086da:	f200 83f6 	bhi.w	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80086de:	a201      	add	r2, pc, #4	@ (adr r2, 80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 80086e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e4:	0800876f 	.word	0x0800876f
 80086e8:	080087d1 	.word	0x080087d1
 80086ec:	08008ecb 	.word	0x08008ecb
 80086f0:	08008845 	.word	0x08008845
 80086f4:	08008ecb 	.word	0x08008ecb
 80086f8:	08008ecb 	.word	0x08008ecb
 80086fc:	08008ecb 	.word	0x08008ecb
 8008700:	080088a7 	.word	0x080088a7
 8008704:	08008ecb 	.word	0x08008ecb
 8008708:	08008ecb 	.word	0x08008ecb
 800870c:	08008ecb 	.word	0x08008ecb
 8008710:	08008ecb 	.word	0x08008ecb
 8008714:	08008ecb 	.word	0x08008ecb
 8008718:	08008ecb 	.word	0x08008ecb
 800871c:	08008ecb 	.word	0x08008ecb
 8008720:	08008909 	.word	0x08008909
 8008724:	08008ecb 	.word	0x08008ecb
 8008728:	08008ecb 	.word	0x08008ecb
 800872c:	08008ecb 	.word	0x08008ecb
 8008730:	08008ecb 	.word	0x08008ecb
 8008734:	08008ecb 	.word	0x08008ecb
 8008738:	08008ecb 	.word	0x08008ecb
 800873c:	08008ecb 	.word	0x08008ecb
 8008740:	08008ecb 	.word	0x08008ecb
 8008744:	08008ecb 	.word	0x08008ecb
 8008748:	08008ecb 	.word	0x08008ecb
 800874c:	08008ecb 	.word	0x08008ecb
 8008750:	08008ecb 	.word	0x08008ecb
 8008754:	08008ecb 	.word	0x08008ecb
 8008758:	08008ecb 	.word	0x08008ecb
 800875c:	08008ecb 	.word	0x08008ecb
 8008760:	08008971 	.word	0x08008971
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2b40      	cmp	r3, #64	@ 0x40
 8008768:	f000 8136 	beq.w	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      break;

#endif /* QUADSPI */

    default:
      break;
 800876c:	e3ad      	b.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800876e:	4b1f      	ldr	r3, [pc, #124]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8008770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008774:	f003 0303 	and.w	r3, r3, #3
 8008778:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d103      	bne.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        frequency = HAL_RCC_GetPCLK2Freq();
 8008780:	f7ff fc2a 	bl	8007fd8 <HAL_RCC_GetPCLK2Freq>
 8008784:	61f8      	str	r0, [r7, #28]
      break;
 8008786:	e3a2      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      else if(srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	2b01      	cmp	r3, #1
 800878c:	d103      	bne.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
        frequency = HAL_RCC_GetSysClockFreq();
 800878e:	f7ff fb9f 	bl	8007ed0 <HAL_RCC_GetSysClockFreq>
 8008792:	61f8      	str	r0, [r7, #28]
      break;
 8008794:	e39b      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI) )
 8008796:	4b15      	ldr	r3, [pc, #84]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800879e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087a2:	d105      	bne.n	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	2b02      	cmp	r3, #2
 80087a8:	d102      	bne.n	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
        frequency = HSI_VALUE;
 80087aa:	4b12      	ldr	r3, [pc, #72]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80087ac:	61fb      	str	r3, [r7, #28]
      break;
 80087ae:	e38e      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80087b0:	4b0e      	ldr	r3, [pc, #56]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80087b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087b6:	f003 0302 	and.w	r3, r3, #2
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	f040 8387 	bne.w	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	2b03      	cmp	r3, #3
 80087c4:	f040 8383 	bne.w	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
        frequency = LSE_VALUE;
 80087c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087cc:	61fb      	str	r3, [r7, #28]
      break;
 80087ce:	e37e      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80087d0:	4b06      	ldr	r3, [pc, #24]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80087d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087d6:	f003 030c 	and.w	r3, r3, #12
 80087da:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d10c      	bne.n	80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
        frequency = HAL_RCC_GetPCLK1Freq();
 80087e2:	f7ff fbe3 	bl	8007fac <HAL_RCC_GetPCLK1Freq>
 80087e6:	61f8      	str	r0, [r7, #28]
      break;
 80087e8:	e373      	b.n	8008ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
 80087ea:	bf00      	nop
 80087ec:	40021000 	.word	0x40021000
 80087f0:	000b71b0 	.word	0x000b71b0
 80087f4:	00f42400 	.word	0x00f42400
 80087f8:	016e3600 	.word	0x016e3600
      else if(srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	2b04      	cmp	r3, #4
 8008800:	d103      	bne.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x302>
        frequency = HAL_RCC_GetSysClockFreq();
 8008802:	f7ff fb65 	bl	8007ed0 <HAL_RCC_GetSysClockFreq>
 8008806:	61f8      	str	r0, [r7, #28]
      break;
 8008808:	e363      	b.n	8008ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800880a:	4ba3      	ldr	r3, [pc, #652]	@ (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008812:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008816:	d105      	bne.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	2b08      	cmp	r3, #8
 800881c:	d102      	bne.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
        frequency = HSI_VALUE;
 800881e:	4b9f      	ldr	r3, [pc, #636]	@ (8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008820:	61fb      	str	r3, [r7, #28]
      break;
 8008822:	e356      	b.n	8008ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))  && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008824:	4b9c      	ldr	r3, [pc, #624]	@ (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800882a:	f003 0302 	and.w	r3, r3, #2
 800882e:	2b02      	cmp	r3, #2
 8008830:	f040 834f 	bne.w	8008ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	2b0c      	cmp	r3, #12
 8008838:	f040 834b 	bne.w	8008ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
        frequency = LSE_VALUE;
 800883c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008840:	61fb      	str	r3, [r7, #28]
      break;
 8008842:	e346      	b.n	8008ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008844:	4b94      	ldr	r3, [pc, #592]	@ (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800884a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800884e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d103      	bne.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x356>
        frequency = HAL_RCC_GetPCLK1Freq();
 8008856:	f7ff fba9 	bl	8007fac <HAL_RCC_GetPCLK1Freq>
 800885a:	61f8      	str	r0, [r7, #28]
      break;
 800885c:	e33b      	b.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      else if(srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	2b10      	cmp	r3, #16
 8008862:	d103      	bne.n	800886c <HAL_RCCEx_GetPeriphCLKFreq+0x364>
        frequency = HAL_RCC_GetSysClockFreq();
 8008864:	f7ff fb34 	bl	8007ed0 <HAL_RCC_GetSysClockFreq>
 8008868:	61f8      	str	r0, [r7, #28]
      break;
 800886a:	e334      	b.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800886c:	4b8a      	ldr	r3, [pc, #552]	@ (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008874:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008878:	d105      	bne.n	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	2b20      	cmp	r3, #32
 800887e:	d102      	bne.n	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
        frequency = HSI_VALUE;
 8008880:	4b86      	ldr	r3, [pc, #536]	@ (8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008882:	61fb      	str	r3, [r7, #28]
      break;
 8008884:	e327      	b.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008886:	4b84      	ldr	r3, [pc, #528]	@ (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008888:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800888c:	f003 0302 	and.w	r3, r3, #2
 8008890:	2b02      	cmp	r3, #2
 8008892:	f040 8320 	bne.w	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	2b30      	cmp	r3, #48	@ 0x30
 800889a:	f040 831c 	bne.w	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
        frequency = LSE_VALUE;
 800889e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088a2:	61fb      	str	r3, [r7, #28]
      break;
 80088a4:	e317      	b.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80088a6:	4b7c      	ldr	r3, [pc, #496]	@ (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80088a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088ac:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80088b0:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d103      	bne.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
        frequency = HAL_RCC_GetPCLK1Freq();
 80088b8:	f7ff fb78 	bl	8007fac <HAL_RCC_GetPCLK1Freq>
 80088bc:	61f8      	str	r0, [r7, #28]
      break;
 80088be:	e30c      	b.n	8008eda <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      else if(srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	2b40      	cmp	r3, #64	@ 0x40
 80088c4:	d103      	bne.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
        frequency = HAL_RCC_GetSysClockFreq();
 80088c6:	f7ff fb03 	bl	8007ed0 <HAL_RCC_GetSysClockFreq>
 80088ca:	61f8      	str	r0, [r7, #28]
      break;
 80088cc:	e305      	b.n	8008eda <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80088ce:	4b72      	ldr	r3, [pc, #456]	@ (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088da:	d105      	bne.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	2b80      	cmp	r3, #128	@ 0x80
 80088e0:	d102      	bne.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        frequency = HSI_VALUE;
 80088e2:	4b6e      	ldr	r3, [pc, #440]	@ (8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80088e4:	61fb      	str	r3, [r7, #28]
      break;
 80088e6:	e2f8      	b.n	8008eda <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80088e8:	4b6b      	ldr	r3, [pc, #428]	@ (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80088ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088ee:	f003 0302 	and.w	r3, r3, #2
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	f040 82f1 	bne.w	8008eda <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80088fc:	f040 82ed 	bne.w	8008eda <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
        frequency = LSE_VALUE;
 8008900:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008904:	61fb      	str	r3, [r7, #28]
      break;
 8008906:	e2e8      	b.n	8008eda <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008908:	4b63      	ldr	r3, [pc, #396]	@ (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800890a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800890e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008912:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d103      	bne.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        frequency = HAL_RCC_GetPCLK1Freq();
 800891a:	f7ff fb47 	bl	8007fac <HAL_RCC_GetPCLK1Freq>
 800891e:	61f8      	str	r0, [r7, #28]
      break;
 8008920:	e2dd      	b.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      else if(srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008928:	d103      	bne.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
        frequency = HAL_RCC_GetSysClockFreq();
 800892a:	f7ff fad1 	bl	8007ed0 <HAL_RCC_GetSysClockFreq>
 800892e:	61f8      	str	r0, [r7, #28]
      break;
 8008930:	e2d5      	b.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008932:	4b59      	ldr	r3, [pc, #356]	@ (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800893a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800893e:	d106      	bne.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008946:	d102      	bne.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
        frequency = HSI_VALUE;
 8008948:	4b54      	ldr	r3, [pc, #336]	@ (8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800894a:	61fb      	str	r3, [r7, #28]
      break;
 800894c:	e2c7      	b.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800894e:	4b52      	ldr	r3, [pc, #328]	@ (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008954:	f003 0302 	and.w	r3, r3, #2
 8008958:	2b02      	cmp	r3, #2
 800895a:	f040 82c0 	bne.w	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008964:	f040 82bb 	bne.w	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        frequency = LSE_VALUE;
 8008968:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800896c:	61fb      	str	r3, [r7, #28]
      break;
 800896e:	e2b6      	b.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008970:	4b49      	ldr	r3, [pc, #292]	@ (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008976:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800897a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d103      	bne.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x482>
        frequency = HAL_RCC_GetPCLK1Freq();
 8008982:	f7ff fb13 	bl	8007fac <HAL_RCC_GetPCLK1Freq>
 8008986:	61f8      	str	r0, [r7, #28]
      break;
 8008988:	e2ab      	b.n	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      else if(srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008990:	d103      	bne.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x492>
        frequency = HAL_RCC_GetSysClockFreq();
 8008992:	f7ff fa9d 	bl	8007ed0 <HAL_RCC_GetSysClockFreq>
 8008996:	61f8      	str	r0, [r7, #28]
      break;
 8008998:	e2a3      	b.n	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800899a:	4b3f      	ldr	r3, [pc, #252]	@ (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089a6:	d106      	bne.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089ae:	d102      	bne.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
        frequency = HSI_VALUE;
 80089b0:	4b3a      	ldr	r3, [pc, #232]	@ (8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80089b2:	61fb      	str	r3, [r7, #28]
      break;
 80089b4:	e295      	b.n	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80089b6:	4b38      	ldr	r3, [pc, #224]	@ (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80089b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089bc:	f003 0302 	and.w	r3, r3, #2
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	f040 828e 	bne.w	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80089cc:	f040 8289 	bne.w	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        frequency = LSE_VALUE;
 80089d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089d4:	61fb      	str	r3, [r7, #28]
      break;
 80089d6:	e284      	b.n	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80089d8:	4b2f      	ldr	r3, [pc, #188]	@ (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80089da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089de:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80089e2:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d103      	bne.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        frequency = HAL_RCC_GetPCLK1Freq();
 80089ea:	f7ff fadf 	bl	8007fac <HAL_RCC_GetPCLK1Freq>
 80089ee:	61f8      	str	r0, [r7, #28]
      break;
 80089f0:	e279      	b.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
      else if(srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089f8:	d103      	bne.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        frequency = HAL_RCC_GetSysClockFreq();
 80089fa:	f7ff fa69 	bl	8007ed0 <HAL_RCC_GetSysClockFreq>
 80089fe:	61f8      	str	r0, [r7, #28]
      break;
 8008a00:	e271      	b.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008a02:	4b25      	ldr	r3, [pc, #148]	@ (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a0e:	f040 826a 	bne.w	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a18:	f040 8265 	bne.w	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
        frequency = HSI_VALUE;
 8008a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008a1e:	61fb      	str	r3, [r7, #28]
      break;
 8008a20:	e261      	b.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008a22:	4b1d      	ldr	r3, [pc, #116]	@ (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a28:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008a2c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d103      	bne.n	8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x534>
        frequency = HAL_RCC_GetPCLK1Freq();
 8008a34:	f7ff faba 	bl	8007fac <HAL_RCC_GetPCLK1Freq>
 8008a38:	61f8      	str	r0, [r7, #28]
      break;
 8008a3a:	e256      	b.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
      else if(srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a42:	d103      	bne.n	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
        frequency = HAL_RCC_GetSysClockFreq();
 8008a44:	f7ff fa44 	bl	8007ed0 <HAL_RCC_GetSysClockFreq>
 8008a48:	61f8      	str	r0, [r7, #28]
      break;
 8008a4a:	e24e      	b.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008a4c:	4b12      	ldr	r3, [pc, #72]	@ (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a58:	f040 8247 	bne.w	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a62:	f040 8242 	bne.w	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
        frequency = HSI_VALUE;
 8008a66:	4b0d      	ldr	r3, [pc, #52]	@ (8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008a68:	61fb      	str	r3, [r7, #28]
      break;
 8008a6a:	e23e      	b.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008a76:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d103      	bne.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
        frequency = HAL_RCC_GetPCLK1Freq();
 8008a7e:	f7ff fa95 	bl	8007fac <HAL_RCC_GetPCLK1Freq>
 8008a82:	61f8      	str	r0, [r7, #28]
      break;
 8008a84:	e233      	b.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
      else if(srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a8c:	d108      	bne.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
        frequency = HAL_RCC_GetSysClockFreq();
 8008a8e:	f7ff fa1f 	bl	8007ed0 <HAL_RCC_GetSysClockFreq>
 8008a92:	61f8      	str	r0, [r7, #28]
      break;
 8008a94:	e22b      	b.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
 8008a96:	bf00      	nop
 8008a98:	40021000 	.word	0x40021000
 8008a9c:	00f42400 	.word	0x00f42400
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8008aa0:	4b9b      	ldr	r3, [pc, #620]	@ (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008aa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008aac:	f040 821f 	bne.w	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ab6:	f040 821a 	bne.w	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
        frequency = HSI_VALUE;
 8008aba:	4b96      	ldr	r3, [pc, #600]	@ (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8008abc:	61fb      	str	r3, [r7, #28]
      break;
 8008abe:	e216      	b.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008ac0:	4b93      	ldr	r3, [pc, #588]	@ (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ac6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008aca:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d103      	bne.n	8008ada <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
        frequency = HAL_RCC_GetPCLK1Freq();
 8008ad2:	f7ff fa6b 	bl	8007fac <HAL_RCC_GetPCLK1Freq>
 8008ad6:	61f8      	str	r0, [r7, #28]
      break;
 8008ad8:	e20b      	b.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
      else if((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8008ada:	4b8d      	ldr	r3, [pc, #564]	@ (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ae0:	f003 0302 	and.w	r3, r3, #2
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d107      	bne.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008aee:	d103      	bne.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        frequency = LSI_VALUE;
 8008af0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008af4:	61fb      	str	r3, [r7, #28]
 8008af6:	e01e      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8008af8:	4b85      	ldr	r3, [pc, #532]	@ (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b04:	d106      	bne.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008b0c:	d102      	bne.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
        frequency = HSI_VALUE;
 8008b0e:	4b81      	ldr	r3, [pc, #516]	@ (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8008b10:	61fb      	str	r3, [r7, #28]
 8008b12:	e010      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
      else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8008b14:	4b7e      	ldr	r3, [pc, #504]	@ (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b1a:	f003 0302 	and.w	r3, r3, #2
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	f040 81e7 	bne.w	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008b2a:	f040 81e2 	bne.w	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
        frequency = LSE_VALUE;
 8008b2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b32:	61fb      	str	r3, [r7, #28]
      break;
 8008b34:	e1dd      	b.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
 8008b36:	e1dc      	b.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008b38:	4b75      	ldr	r3, [pc, #468]	@ (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b3e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008b42:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_SAI1CLKSOURCE_SYSCLK)
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d103      	bne.n	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        frequency = HAL_RCC_GetSysClockFreq();
 8008b4a:	f7ff f9c1 	bl	8007ed0 <HAL_RCC_GetSysClockFreq>
 8008b4e:	61f8      	str	r0, [r7, #28]
      break;
 8008b50:	e1d1      	b.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      else if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b58:	d11b      	bne.n	8008b92 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8008b5a:	4b6d      	ldr	r3, [pc, #436]	@ (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f000 81c7 	beq.w	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008b68:	4b69      	ldr	r3, [pc, #420]	@ (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	0a1b      	lsrs	r3, r3, #8
 8008b6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b72:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	fb03 f202 	mul.w	r2, r3, r2
 8008b7c:	4b64      	ldr	r3, [pc, #400]	@ (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	0d5b      	lsrs	r3, r3, #21
 8008b82:	f003 0303 	and.w	r3, r3, #3
 8008b86:	3301      	adds	r3, #1
 8008b88:	005b      	lsls	r3, r3, #1
 8008b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b8e:	61fb      	str	r3, [r7, #28]
      break;
 8008b90:	e1b1      	b.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      else if(srcclk == RCC_SAI1CLKSOURCE_EXT)
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b98:	d102      	bne.n	8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b9a:	4b5f      	ldr	r3, [pc, #380]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8008b9c:	61fb      	str	r3, [r7, #28]
      break;
 8008b9e:	e1aa      	b.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SAI1CLKSOURCE_HSI))
 8008ba0:	4b5b      	ldr	r3, [pc, #364]	@ (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ba8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bac:	f040 81a3 	bne.w	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008bb6:	f040 819e 	bne.w	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
        frequency = HSI_VALUE;
 8008bba:	4b56      	ldr	r3, [pc, #344]	@ (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8008bbc:	61fb      	str	r3, [r7, #28]
      break;
 8008bbe:	e19a      	b.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8008bc0:	4b53      	ldr	r3, [pc, #332]	@ (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bc6:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008bca:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2SCLKSOURCE_SYSCLK)
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d103      	bne.n	8008bda <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
        frequency = HAL_RCC_GetSysClockFreq();
 8008bd2:	f7ff f97d 	bl	8007ed0 <HAL_RCC_GetSysClockFreq>
 8008bd6:	61f8      	str	r0, [r7, #28]
      break;
 8008bd8:	e18f      	b.n	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      else if(srcclk == RCC_I2SCLKSOURCE_PLL)
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008be0:	d11b      	bne.n	8008c1a <HAL_RCCEx_GetPeriphCLKFreq+0x712>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8008be2:	4b4b      	ldr	r3, [pc, #300]	@ (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	f000 8185 	beq.w	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008bf0:	4b47      	ldr	r3, [pc, #284]	@ (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	0a1b      	lsrs	r3, r3, #8
 8008bf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bfa:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	fb03 f202 	mul.w	r2, r3, r2
 8008c04:	4b42      	ldr	r3, [pc, #264]	@ (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	0d5b      	lsrs	r3, r3, #21
 8008c0a:	f003 0303 	and.w	r3, r3, #3
 8008c0e:	3301      	adds	r3, #1
 8008c10:	005b      	lsls	r3, r3, #1
 8008c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c16:	61fb      	str	r3, [r7, #28]
      break;
 8008c18:	e16f      	b.n	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      else if(srcclk == RCC_I2SCLKSOURCE_EXT)
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008c20:	d102      	bne.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008c22:	4b3d      	ldr	r3, [pc, #244]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8008c24:	61fb      	str	r3, [r7, #28]
      break;
 8008c26:	e168      	b.n	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2SCLKSOURCE_HSI))
 8008c28:	4b39      	ldr	r3, [pc, #228]	@ (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c34:	f040 8161 	bne.w	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008c3e:	f040 815c 	bne.w	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
        frequency = HSI_VALUE;
 8008c42:	4b34      	ldr	r3, [pc, #208]	@ (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8008c44:	61fb      	str	r3, [r7, #28]
      break;
 8008c46:	e158      	b.n	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008c48:	4b31      	ldr	r3, [pc, #196]	@ (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c4e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8008c52:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_FDCANCLKSOURCE_PCLK1)
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c5a:	d103      	bne.n	8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8008c5c:	f7ff f9a6 	bl	8007fac <HAL_RCC_GetPCLK1Freq>
 8008c60:	61f8      	str	r0, [r7, #28]
      break;
 8008c62:	e14c      	b.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
      else if(srcclk == RCC_FDCANCLKSOURCE_HSE)
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d102      	bne.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        frequency = HSE_VALUE;
 8008c6a:	4b2c      	ldr	r3, [pc, #176]	@ (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8008c6c:	61fb      	str	r3, [r7, #28]
      break;
 8008c6e:	e146      	b.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
      else if(srcclk == RCC_FDCANCLKSOURCE_PLL)
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c76:	f040 8142 	bne.w	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8008c7a:	4b25      	ldr	r3, [pc, #148]	@ (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	f000 813b 	beq.w	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008c88:	4b21      	ldr	r3, [pc, #132]	@ (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	0a1b      	lsrs	r3, r3, #8
 8008c8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c92:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	fb03 f202 	mul.w	r2, r3, r2
 8008c9c:	4b1c      	ldr	r3, [pc, #112]	@ (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	0d5b      	lsrs	r3, r3, #21
 8008ca2:	f003 0303 	and.w	r3, r3, #3
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	005b      	lsls	r3, r3, #1
 8008caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cae:	61fb      	str	r3, [r7, #28]
      break;
 8008cb0:	e125      	b.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
      srcclk = __HAL_RCC_GET_USB_SOURCE();
 8008cb2:	4b17      	ldr	r3, [pc, #92]	@ (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cb8:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008cbc:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USBCLKSOURCE_PLL)  /* PLL ? */
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cc4:	d114      	bne.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008cc6:	4b12      	ldr	r3, [pc, #72]	@ (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	0a1b      	lsrs	r3, r3, #8
 8008ccc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cd0:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	fb03 f202 	mul.w	r2, r3, r2
 8008cda:	4b0d      	ldr	r3, [pc, #52]	@ (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	0d5b      	lsrs	r3, r3, #21
 8008ce0:	f003 0303 	and.w	r3, r3, #3
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	005b      	lsls	r3, r3, #1
 8008ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cec:	61fb      	str	r3, [r7, #28]
      break;
 8008cee:	e108      	b.n	8008f02 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
      else if((HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48)) /* HSI48 ? */
 8008cf0:	4b07      	ldr	r3, [pc, #28]	@ (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008cf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008cf6:	f003 0302 	and.w	r3, r3, #2
 8008cfa:	2b02      	cmp	r3, #2
 8008cfc:	f040 8101 	bne.w	8008f02 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	f040 80fd 	bne.w	8008f02 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        frequency = HSI48_VALUE;
 8008d08:	4b05      	ldr	r3, [pc, #20]	@ (8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008d0a:	61fb      	str	r3, [r7, #28]
      break;
 8008d0c:	e0f9      	b.n	8008f02 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8008d0e:	bf00      	nop
 8008d10:	40021000 	.word	0x40021000
 8008d14:	00f42400 	.word	0x00f42400
 8008d18:	00bb8000 	.word	0x00bb8000
 8008d1c:	016e3600 	.word	0x016e3600
 8008d20:	02dc6c00 	.word	0x02dc6c00
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008d24:	4b7e      	ldr	r3, [pc, #504]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d2a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008d2e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_RNGCLKSOURCE_PLL)  /* PLL ? */
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d36:	d114      	bne.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008d38:	4b79      	ldr	r3, [pc, #484]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	0a1b      	lsrs	r3, r3, #8
 8008d3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d42:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	fb03 f202 	mul.w	r2, r3, r2
 8008d4c:	4b74      	ldr	r3, [pc, #464]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	0d5b      	lsrs	r3, r3, #21
 8008d52:	f003 0303 	and.w	r3, r3, #3
 8008d56:	3301      	adds	r3, #1
 8008d58:	005b      	lsls	r3, r3, #1
 8008d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d5e:	61fb      	str	r3, [r7, #28]
      break;
 8008d60:	e0d1      	b.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
      else if( (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48)) /* HSI48 ? */
 8008d62:	4b6f      	ldr	r3, [pc, #444]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008d64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008d68:	f003 0302 	and.w	r3, r3, #2
 8008d6c:	2b02      	cmp	r3, #2
 8008d6e:	f040 80ca 	bne.w	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	f040 80c6 	bne.w	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
        frequency = HSI48_VALUE;
 8008d7a:	4b6a      	ldr	r3, [pc, #424]	@ (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>)
 8008d7c:	61fb      	str	r3, [r7, #28]
      break;
 8008d7e:	e0c2      	b.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 8008d80:	4b67      	ldr	r3, [pc, #412]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d86:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008d8a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC12CLKSOURCE_PLL)
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d92:	d129      	bne.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 8008d94:	4b62      	ldr	r3, [pc, #392]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f000 80b4 	beq.w	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008da2:	4b5f      	ldr	r3, [pc, #380]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	0a1b      	lsrs	r3, r3, #8
 8008da8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dac:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8008dae:	4b5c      	ldr	r3, [pc, #368]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	0edb      	lsrs	r3, r3, #27
 8008db4:	f003 031f 	and.w	r3, r3, #31
 8008db8:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d10a      	bne.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8008dc0:	4b57      	ldr	r3, [pc, #348]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d002      	beq.n	8008dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
              pllp = 17U;
 8008dcc:	2311      	movs	r3, #17
 8008dce:	617b      	str	r3, [r7, #20]
 8008dd0:	e001      	b.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
              pllp = 7U;
 8008dd2:	2307      	movs	r3, #7
 8008dd4:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	fb03 f202 	mul.w	r2, r3, r2
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008de4:	61fb      	str	r3, [r7, #28]
      break;
 8008de6:	e090      	b.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
      else if(srcclk == RCC_ADC12CLKSOURCE_SYSCLK)
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008dee:	f040 808c 	bne.w	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
        frequency = HAL_RCC_GetSysClockFreq();
 8008df2:	f7ff f86d 	bl	8007ed0 <HAL_RCC_GetSysClockFreq>
 8008df6:	61f8      	str	r0, [r7, #28]
      break;
 8008df8:	e087      	b.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
      srcclk = __HAL_RCC_GET_ADC345_SOURCE();
 8008dfa:	4b49      	ldr	r3, [pc, #292]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e00:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008e04:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC345CLKSOURCE_PLL)
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e0c:	d128      	bne.n	8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 8008e0e:	4b44      	ldr	r3, [pc, #272]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d079      	beq.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008e1a:	4b41      	ldr	r3, [pc, #260]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	0a1b      	lsrs	r3, r3, #8
 8008e20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e24:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8008e26:	4b3e      	ldr	r3, [pc, #248]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	0edb      	lsrs	r3, r3, #27
 8008e2c:	f003 031f 	and.w	r3, r3, #31
 8008e30:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d10a      	bne.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8008e38:	4b39      	ldr	r3, [pc, #228]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d002      	beq.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
              pllp = 17U;
 8008e44:	2311      	movs	r3, #17
 8008e46:	617b      	str	r3, [r7, #20]
 8008e48:	e001      	b.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0x946>
              pllp = 7U;
 8008e4a:	2307      	movs	r3, #7
 8008e4c:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	68fa      	ldr	r2, [r7, #12]
 8008e52:	fb03 f202 	mul.w	r2, r3, r2
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e5c:	61fb      	str	r3, [r7, #28]
      break;
 8008e5e:	e056      	b.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
      else if(srcclk == RCC_ADC345CLKSOURCE_SYSCLK)
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e66:	d152      	bne.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
        frequency = HAL_RCC_GetSysClockFreq();
 8008e68:	f7ff f832 	bl	8007ed0 <HAL_RCC_GetSysClockFreq>
 8008e6c:	61f8      	str	r0, [r7, #28]
      break;
 8008e6e:	e04e      	b.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
      srcclk = __HAL_RCC_GET_QSPI_SOURCE();
 8008e70:	4b2b      	ldr	r3, [pc, #172]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008e72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008e76:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008e7a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_QSPICLKSOURCE_PLL)  /* PLL ? */
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e82:	d114      	bne.n	8008eae <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008e84:	4b26      	ldr	r3, [pc, #152]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	0a1b      	lsrs	r3, r3, #8
 8008e8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e8e:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	fb03 f202 	mul.w	r2, r3, r2
 8008e98:	4b21      	ldr	r3, [pc, #132]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	0d5b      	lsrs	r3, r3, #21
 8008e9e:	f003 0303 	and.w	r3, r3, #3
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	005b      	lsls	r3, r3, #1
 8008ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eaa:	61fb      	str	r3, [r7, #28]
      break;
 8008eac:	e031      	b.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
      else if(srcclk == RCC_QSPICLKSOURCE_HSI)
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008eb4:	d102      	bne.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
        frequency = HSI_VALUE;
 8008eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>)
 8008eb8:	61fb      	str	r3, [r7, #28]
      break;
 8008eba:	e02a      	b.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
      else if(srcclk == RCC_QSPICLKSOURCE_SYSCLK)
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d127      	bne.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
        frequency = HAL_RCC_GetSysClockFreq();
 8008ec2:	f7ff f805 	bl	8007ed0 <HAL_RCC_GetSysClockFreq>
 8008ec6:	61f8      	str	r0, [r7, #28]
      break;
 8008ec8:	e023      	b.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
      break;
 8008eca:	bf00      	nop
 8008ecc:	e022      	b.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008ece:	bf00      	nop
 8008ed0:	e020      	b.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008ed2:	bf00      	nop
 8008ed4:	e01e      	b.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008ed6:	bf00      	nop
 8008ed8:	e01c      	b.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008eda:	bf00      	nop
 8008edc:	e01a      	b.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008ede:	bf00      	nop
 8008ee0:	e018      	b.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008ee2:	bf00      	nop
 8008ee4:	e016      	b.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008ee6:	bf00      	nop
 8008ee8:	e014      	b.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008eea:	bf00      	nop
 8008eec:	e012      	b.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008eee:	bf00      	nop
 8008ef0:	e010      	b.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008ef2:	bf00      	nop
 8008ef4:	e00e      	b.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008ef6:	bf00      	nop
 8008ef8:	e00c      	b.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008efa:	bf00      	nop
 8008efc:	e00a      	b.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008efe:	bf00      	nop
 8008f00:	e008      	b.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008f02:	bf00      	nop
 8008f04:	e006      	b.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008f06:	bf00      	nop
 8008f08:	e004      	b.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008f0a:	bf00      	nop
 8008f0c:	e002      	b.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008f0e:	bf00      	nop
 8008f10:	e000      	b.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008f12:	bf00      	nop
    }
  }

  return(frequency);
 8008f14:	69fb      	ldr	r3, [r7, #28]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3720      	adds	r7, #32
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	40021000 	.word	0x40021000
 8008f24:	02dc6c00 	.word	0x02dc6c00
 8008f28:	00f42400 	.word	0x00f42400

08008f2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d101      	bne.n	8008f3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e09d      	b.n	800907a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d108      	bne.n	8008f58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008f4e:	d009      	beq.n	8008f64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	61da      	str	r2, [r3, #28]
 8008f56:	e005      	b.n	8008f64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2200      	movs	r2, #0
 8008f68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d106      	bne.n	8008f84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f7f9 ff32 	bl	8002de8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2202      	movs	r2, #2
 8008f88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008fa4:	d902      	bls.n	8008fac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	60fb      	str	r3, [r7, #12]
 8008faa:	e002      	b.n	8008fb2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008fac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008fb0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008fba:	d007      	beq.n	8008fcc <HAL_SPI_Init+0xa0>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008fc4:	d002      	beq.n	8008fcc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008fdc:	431a      	orrs	r2, r3
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	f003 0302 	and.w	r3, r3, #2
 8008fe6:	431a      	orrs	r2, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	695b      	ldr	r3, [r3, #20]
 8008fec:	f003 0301 	and.w	r3, r3, #1
 8008ff0:	431a      	orrs	r2, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	699b      	ldr	r3, [r3, #24]
 8008ff6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ffa:	431a      	orrs	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	69db      	ldr	r3, [r3, #28]
 8009000:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009004:	431a      	orrs	r2, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a1b      	ldr	r3, [r3, #32]
 800900a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800900e:	ea42 0103 	orr.w	r1, r2, r3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009016:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	430a      	orrs	r2, r1
 8009020:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	699b      	ldr	r3, [r3, #24]
 8009026:	0c1b      	lsrs	r3, r3, #16
 8009028:	f003 0204 	and.w	r2, r3, #4
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009030:	f003 0310 	and.w	r3, r3, #16
 8009034:	431a      	orrs	r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800903a:	f003 0308 	and.w	r3, r3, #8
 800903e:	431a      	orrs	r2, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009048:	ea42 0103 	orr.w	r1, r2, r3
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	430a      	orrs	r2, r1
 8009058:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	69da      	ldr	r2, [r3, #28]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009068:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	3710      	adds	r7, #16
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b088      	sub	sp, #32
 8009086:	af00      	add	r7, sp, #0
 8009088:	60f8      	str	r0, [r7, #12]
 800908a:	60b9      	str	r1, [r7, #8]
 800908c:	603b      	str	r3, [r7, #0]
 800908e:	4613      	mov	r3, r2
 8009090:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009092:	f7fa ff83 	bl	8003f9c <HAL_GetTick>
 8009096:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8009098:	88fb      	ldrh	r3, [r7, #6]
 800909a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d001      	beq.n	80090ac <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80090a8:	2302      	movs	r3, #2
 80090aa:	e15c      	b.n	8009366 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d002      	beq.n	80090b8 <HAL_SPI_Transmit+0x36>
 80090b2:	88fb      	ldrh	r3, [r7, #6]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d101      	bne.n	80090bc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80090b8:	2301      	movs	r3, #1
 80090ba:	e154      	b.n	8009366 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d101      	bne.n	80090ca <HAL_SPI_Transmit+0x48>
 80090c6:	2302      	movs	r3, #2
 80090c8:	e14d      	b.n	8009366 <HAL_SPI_Transmit+0x2e4>
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2201      	movs	r2, #1
 80090ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2203      	movs	r2, #3
 80090d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2200      	movs	r2, #0
 80090de:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	88fa      	ldrh	r2, [r7, #6]
 80090ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	88fa      	ldrh	r2, [r7, #6]
 80090f0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2200      	movs	r2, #0
 80090f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2200      	movs	r2, #0
 8009104:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2200      	movs	r2, #0
 800910c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2200      	movs	r2, #0
 8009112:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800911c:	d10f      	bne.n	800913e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800912c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800913c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009148:	2b40      	cmp	r3, #64	@ 0x40
 800914a:	d007      	beq.n	800915c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800915a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009164:	d952      	bls.n	800920c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d002      	beq.n	8009174 <HAL_SPI_Transmit+0xf2>
 800916e:	8b7b      	ldrh	r3, [r7, #26]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d145      	bne.n	8009200 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009178:	881a      	ldrh	r2, [r3, #0]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009184:	1c9a      	adds	r2, r3, #2
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800918e:	b29b      	uxth	r3, r3
 8009190:	3b01      	subs	r3, #1
 8009192:	b29a      	uxth	r2, r3
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009198:	e032      	b.n	8009200 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	f003 0302 	and.w	r3, r3, #2
 80091a4:	2b02      	cmp	r3, #2
 80091a6:	d112      	bne.n	80091ce <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ac:	881a      	ldrh	r2, [r3, #0]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091b8:	1c9a      	adds	r2, r3, #2
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	3b01      	subs	r3, #1
 80091c6:	b29a      	uxth	r2, r3
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80091cc:	e018      	b.n	8009200 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091ce:	f7fa fee5 	bl	8003f9c <HAL_GetTick>
 80091d2:	4602      	mov	r2, r0
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	683a      	ldr	r2, [r7, #0]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d803      	bhi.n	80091e6 <HAL_SPI_Transmit+0x164>
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e4:	d102      	bne.n	80091ec <HAL_SPI_Transmit+0x16a>
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d109      	bne.n	8009200 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2200      	movs	r2, #0
 80091f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80091fc:	2303      	movs	r3, #3
 80091fe:	e0b2      	b.n	8009366 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009204:	b29b      	uxth	r3, r3
 8009206:	2b00      	cmp	r3, #0
 8009208:	d1c7      	bne.n	800919a <HAL_SPI_Transmit+0x118>
 800920a:	e083      	b.n	8009314 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d002      	beq.n	800921a <HAL_SPI_Transmit+0x198>
 8009214:	8b7b      	ldrh	r3, [r7, #26]
 8009216:	2b01      	cmp	r3, #1
 8009218:	d177      	bne.n	800930a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800921e:	b29b      	uxth	r3, r3
 8009220:	2b01      	cmp	r3, #1
 8009222:	d912      	bls.n	800924a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009228:	881a      	ldrh	r2, [r3, #0]
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009234:	1c9a      	adds	r2, r3, #2
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800923e:	b29b      	uxth	r3, r3
 8009240:	3b02      	subs	r3, #2
 8009242:	b29a      	uxth	r2, r3
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009248:	e05f      	b.n	800930a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	330c      	adds	r3, #12
 8009254:	7812      	ldrb	r2, [r2, #0]
 8009256:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800925c:	1c5a      	adds	r2, r3, #1
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009266:	b29b      	uxth	r3, r3
 8009268:	3b01      	subs	r3, #1
 800926a:	b29a      	uxth	r2, r3
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009270:	e04b      	b.n	800930a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	f003 0302 	and.w	r3, r3, #2
 800927c:	2b02      	cmp	r3, #2
 800927e:	d12b      	bne.n	80092d8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009284:	b29b      	uxth	r3, r3
 8009286:	2b01      	cmp	r3, #1
 8009288:	d912      	bls.n	80092b0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800928e:	881a      	ldrh	r2, [r3, #0]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800929a:	1c9a      	adds	r2, r3, #2
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	3b02      	subs	r3, #2
 80092a8:	b29a      	uxth	r2, r3
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80092ae:	e02c      	b.n	800930a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	330c      	adds	r3, #12
 80092ba:	7812      	ldrb	r2, [r2, #0]
 80092bc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092c2:	1c5a      	adds	r2, r3, #1
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	3b01      	subs	r3, #1
 80092d0:	b29a      	uxth	r2, r3
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80092d6:	e018      	b.n	800930a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092d8:	f7fa fe60 	bl	8003f9c <HAL_GetTick>
 80092dc:	4602      	mov	r2, r0
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	1ad3      	subs	r3, r2, r3
 80092e2:	683a      	ldr	r2, [r7, #0]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d803      	bhi.n	80092f0 <HAL_SPI_Transmit+0x26e>
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ee:	d102      	bne.n	80092f6 <HAL_SPI_Transmit+0x274>
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d109      	bne.n	800930a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2201      	movs	r2, #1
 80092fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2200      	movs	r2, #0
 8009302:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8009306:	2303      	movs	r3, #3
 8009308:	e02d      	b.n	8009366 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800930e:	b29b      	uxth	r3, r3
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1ae      	bne.n	8009272 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009314:	69fa      	ldr	r2, [r7, #28]
 8009316:	6839      	ldr	r1, [r7, #0]
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f000 f947 	bl	80095ac <SPI_EndRxTxTransaction>
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d002      	beq.n	800932a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2220      	movs	r2, #32
 8009328:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d10a      	bne.n	8009348 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009332:	2300      	movs	r3, #0
 8009334:	617b      	str	r3, [r7, #20]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	617b      	str	r3, [r7, #20]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	617b      	str	r3, [r7, #20]
 8009346:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2200      	movs	r2, #0
 8009354:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800935c:	2b00      	cmp	r3, #0
 800935e:	d001      	beq.n	8009364 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	e000      	b.n	8009366 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8009364:	2300      	movs	r3, #0
  }
}
 8009366:	4618      	mov	r0, r3
 8009368:	3720      	adds	r7, #32
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
	...

08009370 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b088      	sub	sp, #32
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	603b      	str	r3, [r7, #0]
 800937c:	4613      	mov	r3, r2
 800937e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009380:	f7fa fe0c 	bl	8003f9c <HAL_GetTick>
 8009384:	4602      	mov	r2, r0
 8009386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009388:	1a9b      	subs	r3, r3, r2
 800938a:	683a      	ldr	r2, [r7, #0]
 800938c:	4413      	add	r3, r2
 800938e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009390:	f7fa fe04 	bl	8003f9c <HAL_GetTick>
 8009394:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009396:	4b39      	ldr	r3, [pc, #228]	@ (800947c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	015b      	lsls	r3, r3, #5
 800939c:	0d1b      	lsrs	r3, r3, #20
 800939e:	69fa      	ldr	r2, [r7, #28]
 80093a0:	fb02 f303 	mul.w	r3, r2, r3
 80093a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80093a6:	e054      	b.n	8009452 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ae:	d050      	beq.n	8009452 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80093b0:	f7fa fdf4 	bl	8003f9c <HAL_GetTick>
 80093b4:	4602      	mov	r2, r0
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	1ad3      	subs	r3, r2, r3
 80093ba:	69fa      	ldr	r2, [r7, #28]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d902      	bls.n	80093c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d13d      	bne.n	8009442 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	685a      	ldr	r2, [r3, #4]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80093d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80093de:	d111      	bne.n	8009404 <SPI_WaitFlagStateUntilTimeout+0x94>
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093e8:	d004      	beq.n	80093f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093f2:	d107      	bne.n	8009404 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009402:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009408:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800940c:	d10f      	bne.n	800942e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800941c:	601a      	str	r2, [r3, #0]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800942c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2201      	movs	r2, #1
 8009432:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2200      	movs	r2, #0
 800943a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800943e:	2303      	movs	r3, #3
 8009440:	e017      	b.n	8009472 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d101      	bne.n	800944c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009448:	2300      	movs	r3, #0
 800944a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	3b01      	subs	r3, #1
 8009450:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	689a      	ldr	r2, [r3, #8]
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	4013      	ands	r3, r2
 800945c:	68ba      	ldr	r2, [r7, #8]
 800945e:	429a      	cmp	r2, r3
 8009460:	bf0c      	ite	eq
 8009462:	2301      	moveq	r3, #1
 8009464:	2300      	movne	r3, #0
 8009466:	b2db      	uxtb	r3, r3
 8009468:	461a      	mov	r2, r3
 800946a:	79fb      	ldrb	r3, [r7, #7]
 800946c:	429a      	cmp	r2, r3
 800946e:	d19b      	bne.n	80093a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009470:	2300      	movs	r3, #0
}
 8009472:	4618      	mov	r0, r3
 8009474:	3720      	adds	r7, #32
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	20000000 	.word	0x20000000

08009480 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b08a      	sub	sp, #40	@ 0x28
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	607a      	str	r2, [r7, #4]
 800948c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800948e:	2300      	movs	r3, #0
 8009490:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009492:	f7fa fd83 	bl	8003f9c <HAL_GetTick>
 8009496:	4602      	mov	r2, r0
 8009498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800949a:	1a9b      	subs	r3, r3, r2
 800949c:	683a      	ldr	r2, [r7, #0]
 800949e:	4413      	add	r3, r2
 80094a0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80094a2:	f7fa fd7b 	bl	8003f9c <HAL_GetTick>
 80094a6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	330c      	adds	r3, #12
 80094ae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80094b0:	4b3d      	ldr	r3, [pc, #244]	@ (80095a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	4613      	mov	r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	4413      	add	r3, r2
 80094ba:	00da      	lsls	r2, r3, #3
 80094bc:	1ad3      	subs	r3, r2, r3
 80094be:	0d1b      	lsrs	r3, r3, #20
 80094c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094c2:	fb02 f303 	mul.w	r3, r2, r3
 80094c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80094c8:	e060      	b.n	800958c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80094d0:	d107      	bne.n	80094e2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d104      	bne.n	80094e2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80094e0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e8:	d050      	beq.n	800958c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80094ea:	f7fa fd57 	bl	8003f9c <HAL_GetTick>
 80094ee:	4602      	mov	r2, r0
 80094f0:	6a3b      	ldr	r3, [r7, #32]
 80094f2:	1ad3      	subs	r3, r2, r3
 80094f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d902      	bls.n	8009500 <SPI_WaitFifoStateUntilTimeout+0x80>
 80094fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d13d      	bne.n	800957c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	685a      	ldr	r2, [r3, #4]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800950e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009518:	d111      	bne.n	800953e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009522:	d004      	beq.n	800952e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800952c:	d107      	bne.n	800953e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800953c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009542:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009546:	d10f      	bne.n	8009568 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009556:	601a      	str	r2, [r3, #0]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009566:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2201      	movs	r2, #1
 800956c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2200      	movs	r2, #0
 8009574:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009578:	2303      	movs	r3, #3
 800957a:	e010      	b.n	800959e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d101      	bne.n	8009586 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009582:	2300      	movs	r3, #0
 8009584:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	3b01      	subs	r3, #1
 800958a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	689a      	ldr	r2, [r3, #8]
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	4013      	ands	r3, r2
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	429a      	cmp	r2, r3
 800959a:	d196      	bne.n	80094ca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3728      	adds	r7, #40	@ 0x28
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	20000000 	.word	0x20000000

080095ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b086      	sub	sp, #24
 80095b0:	af02      	add	r7, sp, #8
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	9300      	str	r3, [sp, #0]
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	2200      	movs	r2, #0
 80095c0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	f7ff ff5b 	bl	8009480 <SPI_WaitFifoStateUntilTimeout>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d007      	beq.n	80095e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095d4:	f043 0220 	orr.w	r2, r3, #32
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80095dc:	2303      	movs	r3, #3
 80095de:	e027      	b.n	8009630 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	9300      	str	r3, [sp, #0]
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	2200      	movs	r2, #0
 80095e8:	2180      	movs	r1, #128	@ 0x80
 80095ea:	68f8      	ldr	r0, [r7, #12]
 80095ec:	f7ff fec0 	bl	8009370 <SPI_WaitFlagStateUntilTimeout>
 80095f0:	4603      	mov	r3, r0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d007      	beq.n	8009606 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095fa:	f043 0220 	orr.w	r2, r3, #32
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009602:	2303      	movs	r3, #3
 8009604:	e014      	b.n	8009630 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	9300      	str	r3, [sp, #0]
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	2200      	movs	r2, #0
 800960e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f7ff ff34 	bl	8009480 <SPI_WaitFifoStateUntilTimeout>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d007      	beq.n	800962e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009622:	f043 0220 	orr.w	r2, r3, #32
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800962a:	2303      	movs	r3, #3
 800962c:	e000      	b.n	8009630 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	3710      	adds	r7, #16
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d101      	bne.n	800964a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	e049      	b.n	80096de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009650:	b2db      	uxtb	r3, r3
 8009652:	2b00      	cmp	r3, #0
 8009654:	d106      	bne.n	8009664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f7fa f996 	bl	8003990 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2202      	movs	r2, #2
 8009668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	3304      	adds	r3, #4
 8009674:	4619      	mov	r1, r3
 8009676:	4610      	mov	r0, r2
 8009678:	f000 fa4c 	bl	8009b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2201      	movs	r2, #1
 80096c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
	...

080096e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d001      	beq.n	8009700 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80096fc:	2301      	movs	r3, #1
 80096fe:	e04f      	b.n	80097a0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2202      	movs	r2, #2
 8009704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	68da      	ldr	r2, [r3, #12]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f042 0201 	orr.w	r2, r2, #1
 8009716:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a23      	ldr	r2, [pc, #140]	@ (80097ac <HAL_TIM_Base_Start_IT+0xc4>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d01d      	beq.n	800975e <HAL_TIM_Base_Start_IT+0x76>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800972a:	d018      	beq.n	800975e <HAL_TIM_Base_Start_IT+0x76>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a1f      	ldr	r2, [pc, #124]	@ (80097b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d013      	beq.n	800975e <HAL_TIM_Base_Start_IT+0x76>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a1e      	ldr	r2, [pc, #120]	@ (80097b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d00e      	beq.n	800975e <HAL_TIM_Base_Start_IT+0x76>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a1c      	ldr	r2, [pc, #112]	@ (80097b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d009      	beq.n	800975e <HAL_TIM_Base_Start_IT+0x76>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a1b      	ldr	r2, [pc, #108]	@ (80097bc <HAL_TIM_Base_Start_IT+0xd4>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d004      	beq.n	800975e <HAL_TIM_Base_Start_IT+0x76>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a19      	ldr	r2, [pc, #100]	@ (80097c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d115      	bne.n	800978a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	689a      	ldr	r2, [r3, #8]
 8009764:	4b17      	ldr	r3, [pc, #92]	@ (80097c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009766:	4013      	ands	r3, r2
 8009768:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2b06      	cmp	r3, #6
 800976e:	d015      	beq.n	800979c <HAL_TIM_Base_Start_IT+0xb4>
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009776:	d011      	beq.n	800979c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f042 0201 	orr.w	r2, r2, #1
 8009786:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009788:	e008      	b.n	800979c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f042 0201 	orr.w	r2, r2, #1
 8009798:	601a      	str	r2, [r3, #0]
 800979a:	e000      	b.n	800979e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800979c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3714      	adds	r7, #20
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr
 80097ac:	40012c00 	.word	0x40012c00
 80097b0:	40000400 	.word	0x40000400
 80097b4:	40000800 	.word	0x40000800
 80097b8:	40013400 	.word	0x40013400
 80097bc:	40014000 	.word	0x40014000
 80097c0:	40015000 	.word	0x40015000
 80097c4:	00010007 	.word	0x00010007

080097c8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	68da      	ldr	r2, [r3, #12]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f022 0201 	bic.w	r2, r2, #1
 80097de:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	6a1a      	ldr	r2, [r3, #32]
 80097e6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80097ea:	4013      	ands	r3, r2
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d10f      	bne.n	8009810 <HAL_TIM_Base_Stop_IT+0x48>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	6a1a      	ldr	r2, [r3, #32]
 80097f6:	f244 4344 	movw	r3, #17476	@ 0x4444
 80097fa:	4013      	ands	r3, r2
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d107      	bne.n	8009810 <HAL_TIM_Base_Stop_IT+0x48>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f022 0201 	bic.w	r2, r2, #1
 800980e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	370c      	adds	r7, #12
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr

08009826 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009826:	b580      	push	{r7, lr}
 8009828:	b084      	sub	sp, #16
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	f003 0302 	and.w	r3, r3, #2
 8009844:	2b00      	cmp	r3, #0
 8009846:	d020      	beq.n	800988a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f003 0302 	and.w	r3, r3, #2
 800984e:	2b00      	cmp	r3, #0
 8009850:	d01b      	beq.n	800988a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f06f 0202 	mvn.w	r2, #2
 800985a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2201      	movs	r2, #1
 8009860:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	699b      	ldr	r3, [r3, #24]
 8009868:	f003 0303 	and.w	r3, r3, #3
 800986c:	2b00      	cmp	r3, #0
 800986e:	d003      	beq.n	8009878 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 f931 	bl	8009ad8 <HAL_TIM_IC_CaptureCallback>
 8009876:	e005      	b.n	8009884 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 f923 	bl	8009ac4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 f934 	bl	8009aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	f003 0304 	and.w	r3, r3, #4
 8009890:	2b00      	cmp	r3, #0
 8009892:	d020      	beq.n	80098d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f003 0304 	and.w	r3, r3, #4
 800989a:	2b00      	cmp	r3, #0
 800989c:	d01b      	beq.n	80098d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f06f 0204 	mvn.w	r2, #4
 80098a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2202      	movs	r2, #2
 80098ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	699b      	ldr	r3, [r3, #24]
 80098b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d003      	beq.n	80098c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 f90b 	bl	8009ad8 <HAL_TIM_IC_CaptureCallback>
 80098c2:	e005      	b.n	80098d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 f8fd 	bl	8009ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 f90e 	bl	8009aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	f003 0308 	and.w	r3, r3, #8
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d020      	beq.n	8009922 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f003 0308 	and.w	r3, r3, #8
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d01b      	beq.n	8009922 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f06f 0208 	mvn.w	r2, #8
 80098f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2204      	movs	r2, #4
 80098f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	69db      	ldr	r3, [r3, #28]
 8009900:	f003 0303 	and.w	r3, r3, #3
 8009904:	2b00      	cmp	r3, #0
 8009906:	d003      	beq.n	8009910 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 f8e5 	bl	8009ad8 <HAL_TIM_IC_CaptureCallback>
 800990e:	e005      	b.n	800991c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 f8d7 	bl	8009ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 f8e8 	bl	8009aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	f003 0310 	and.w	r3, r3, #16
 8009928:	2b00      	cmp	r3, #0
 800992a:	d020      	beq.n	800996e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f003 0310 	and.w	r3, r3, #16
 8009932:	2b00      	cmp	r3, #0
 8009934:	d01b      	beq.n	800996e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f06f 0210 	mvn.w	r2, #16
 800993e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2208      	movs	r2, #8
 8009944:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	69db      	ldr	r3, [r3, #28]
 800994c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009950:	2b00      	cmp	r3, #0
 8009952:	d003      	beq.n	800995c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 f8bf 	bl	8009ad8 <HAL_TIM_IC_CaptureCallback>
 800995a:	e005      	b.n	8009968 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 f8b1 	bl	8009ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 f8c2 	bl	8009aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	f003 0301 	and.w	r3, r3, #1
 8009974:	2b00      	cmp	r3, #0
 8009976:	d00c      	beq.n	8009992 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f003 0301 	and.w	r3, r3, #1
 800997e:	2b00      	cmp	r3, #0
 8009980:	d007      	beq.n	8009992 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f06f 0201 	mvn.w	r2, #1
 800998a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f7f9 ff6b 	bl	8003868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009998:	2b00      	cmp	r3, #0
 800999a:	d104      	bne.n	80099a6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d00c      	beq.n	80099c0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d007      	beq.n	80099c0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80099b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 f9ec 	bl	8009d98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00c      	beq.n	80099e4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d007      	beq.n	80099e4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80099dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 f9e4 	bl	8009dac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00c      	beq.n	8009a08 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d007      	beq.n	8009a08 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 f87c 	bl	8009b00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	f003 0320 	and.w	r3, r3, #32
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00c      	beq.n	8009a2c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f003 0320 	and.w	r3, r3, #32
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d007      	beq.n	8009a2c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f06f 0220 	mvn.w	r2, #32
 8009a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 f9ac 	bl	8009d84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d00c      	beq.n	8009a50 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d007      	beq.n	8009a50 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 f9b8 	bl	8009dc0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d00c      	beq.n	8009a74 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d007      	beq.n	8009a74 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 f9b0 	bl	8009dd4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d00c      	beq.n	8009a98 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d007      	beq.n	8009a98 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 f9a8 	bl	8009de8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00c      	beq.n	8009abc <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d007      	beq.n	8009abc <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 f9a0 	bl	8009dfc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009abc:	bf00      	nop
 8009abe:	3710      	adds	r7, #16
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009acc:	bf00      	nop
 8009ace:	370c      	adds	r7, #12
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ae0:	bf00      	nop
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009af4:	bf00      	nop
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b08:	bf00      	nop
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b085      	sub	sp, #20
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	4a48      	ldr	r2, [pc, #288]	@ (8009c48 <TIM_Base_SetConfig+0x134>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d013      	beq.n	8009b54 <TIM_Base_SetConfig+0x40>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b32:	d00f      	beq.n	8009b54 <TIM_Base_SetConfig+0x40>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	4a45      	ldr	r2, [pc, #276]	@ (8009c4c <TIM_Base_SetConfig+0x138>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d00b      	beq.n	8009b54 <TIM_Base_SetConfig+0x40>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	4a44      	ldr	r2, [pc, #272]	@ (8009c50 <TIM_Base_SetConfig+0x13c>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d007      	beq.n	8009b54 <TIM_Base_SetConfig+0x40>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	4a43      	ldr	r2, [pc, #268]	@ (8009c54 <TIM_Base_SetConfig+0x140>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d003      	beq.n	8009b54 <TIM_Base_SetConfig+0x40>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	4a42      	ldr	r2, [pc, #264]	@ (8009c58 <TIM_Base_SetConfig+0x144>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d108      	bne.n	8009b66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	68fa      	ldr	r2, [r7, #12]
 8009b62:	4313      	orrs	r3, r2
 8009b64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	4a37      	ldr	r2, [pc, #220]	@ (8009c48 <TIM_Base_SetConfig+0x134>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d01f      	beq.n	8009bae <TIM_Base_SetConfig+0x9a>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b74:	d01b      	beq.n	8009bae <TIM_Base_SetConfig+0x9a>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	4a34      	ldr	r2, [pc, #208]	@ (8009c4c <TIM_Base_SetConfig+0x138>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d017      	beq.n	8009bae <TIM_Base_SetConfig+0x9a>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	4a33      	ldr	r2, [pc, #204]	@ (8009c50 <TIM_Base_SetConfig+0x13c>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d013      	beq.n	8009bae <TIM_Base_SetConfig+0x9a>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	4a32      	ldr	r2, [pc, #200]	@ (8009c54 <TIM_Base_SetConfig+0x140>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d00f      	beq.n	8009bae <TIM_Base_SetConfig+0x9a>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	4a32      	ldr	r2, [pc, #200]	@ (8009c5c <TIM_Base_SetConfig+0x148>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d00b      	beq.n	8009bae <TIM_Base_SetConfig+0x9a>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	4a31      	ldr	r2, [pc, #196]	@ (8009c60 <TIM_Base_SetConfig+0x14c>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d007      	beq.n	8009bae <TIM_Base_SetConfig+0x9a>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	4a30      	ldr	r2, [pc, #192]	@ (8009c64 <TIM_Base_SetConfig+0x150>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d003      	beq.n	8009bae <TIM_Base_SetConfig+0x9a>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	4a2b      	ldr	r2, [pc, #172]	@ (8009c58 <TIM_Base_SetConfig+0x144>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d108      	bne.n	8009bc0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	695b      	ldr	r3, [r3, #20]
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	68fa      	ldr	r2, [r7, #12]
 8009bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	689a      	ldr	r2, [r3, #8]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	4a18      	ldr	r2, [pc, #96]	@ (8009c48 <TIM_Base_SetConfig+0x134>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d013      	beq.n	8009c14 <TIM_Base_SetConfig+0x100>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	4a19      	ldr	r2, [pc, #100]	@ (8009c54 <TIM_Base_SetConfig+0x140>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d00f      	beq.n	8009c14 <TIM_Base_SetConfig+0x100>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4a19      	ldr	r2, [pc, #100]	@ (8009c5c <TIM_Base_SetConfig+0x148>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d00b      	beq.n	8009c14 <TIM_Base_SetConfig+0x100>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	4a18      	ldr	r2, [pc, #96]	@ (8009c60 <TIM_Base_SetConfig+0x14c>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d007      	beq.n	8009c14 <TIM_Base_SetConfig+0x100>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4a17      	ldr	r2, [pc, #92]	@ (8009c64 <TIM_Base_SetConfig+0x150>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d003      	beq.n	8009c14 <TIM_Base_SetConfig+0x100>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4a12      	ldr	r2, [pc, #72]	@ (8009c58 <TIM_Base_SetConfig+0x144>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d103      	bne.n	8009c1c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	691a      	ldr	r2, [r3, #16]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	691b      	ldr	r3, [r3, #16]
 8009c26:	f003 0301 	and.w	r3, r3, #1
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d105      	bne.n	8009c3a <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	f023 0201 	bic.w	r2, r3, #1
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	611a      	str	r2, [r3, #16]
  }
}
 8009c3a:	bf00      	nop
 8009c3c:	3714      	adds	r7, #20
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr
 8009c46:	bf00      	nop
 8009c48:	40012c00 	.word	0x40012c00
 8009c4c:	40000400 	.word	0x40000400
 8009c50:	40000800 	.word	0x40000800
 8009c54:	40013400 	.word	0x40013400
 8009c58:	40015000 	.word	0x40015000
 8009c5c:	40014000 	.word	0x40014000
 8009c60:	40014400 	.word	0x40014400
 8009c64:	40014800 	.word	0x40014800

08009c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b085      	sub	sp, #20
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d101      	bne.n	8009c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c7c:	2302      	movs	r3, #2
 8009c7e:	e06f      	b.n	8009d60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2201      	movs	r2, #1
 8009c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2202      	movs	r2, #2
 8009c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	689b      	ldr	r3, [r3, #8]
 8009c9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a31      	ldr	r2, [pc, #196]	@ (8009d6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d009      	beq.n	8009cbe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a30      	ldr	r2, [pc, #192]	@ (8009d70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d004      	beq.n	8009cbe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a2e      	ldr	r2, [pc, #184]	@ (8009d74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d108      	bne.n	8009cd0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009cc4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009cd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a1e      	ldr	r2, [pc, #120]	@ (8009d6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d01d      	beq.n	8009d34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d00:	d018      	beq.n	8009d34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a1c      	ldr	r2, [pc, #112]	@ (8009d78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d013      	beq.n	8009d34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a1a      	ldr	r2, [pc, #104]	@ (8009d7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d00e      	beq.n	8009d34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a15      	ldr	r2, [pc, #84]	@ (8009d70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d009      	beq.n	8009d34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a16      	ldr	r2, [pc, #88]	@ (8009d80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d004      	beq.n	8009d34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a11      	ldr	r2, [pc, #68]	@ (8009d74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d10c      	bne.n	8009d4e <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	68ba      	ldr	r2, [r7, #8]
 8009d42:	4313      	orrs	r3, r2
 8009d44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68ba      	ldr	r2, [r7, #8]
 8009d4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2201      	movs	r2, #1
 8009d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009d5e:	2300      	movs	r3, #0
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3714      	adds	r7, #20
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr
 8009d6c:	40012c00 	.word	0x40012c00
 8009d70:	40013400 	.word	0x40013400
 8009d74:	40015000 	.word	0x40015000
 8009d78:	40000400 	.word	0x40000400
 8009d7c:	40000800 	.word	0x40000800
 8009d80:	40014000 	.word	0x40014000

08009d84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d8c:	bf00      	nop
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009da0:	bf00      	nop
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009db4:	bf00      	nop
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009dc8:	bf00      	nop
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009ddc:	bf00      	nop
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009df0:	bf00      	nop
 8009df2:	370c      	adds	r7, #12
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr

08009dfc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009e04:	bf00      	nop
 8009e06:	370c      	adds	r7, #12
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr

08009e10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d101      	bne.n	8009e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e042      	b.n	8009ea8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d106      	bne.n	8009e3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f7f9 fe21 	bl	8003a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2224      	movs	r2, #36	@ 0x24
 8009e3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f022 0201 	bic.w	r2, r2, #1
 8009e50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d002      	beq.n	8009e60 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 ff60 	bl	800ad20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 fc61 	bl	800a728 <UART_SetConfig>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d101      	bne.n	8009e70 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e01b      	b.n	8009ea8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	685a      	ldr	r2, [r3, #4]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009e7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	689a      	ldr	r2, [r3, #8]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009e8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	681a      	ldr	r2, [r3, #0]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f042 0201 	orr.w	r2, r2, #1
 8009e9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 ffdf 	bl	800ae64 <UART_CheckIdleState>
 8009ea6:	4603      	mov	r3, r0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3708      	adds	r7, #8
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b08a      	sub	sp, #40	@ 0x28
 8009eb4:	af02      	add	r7, sp, #8
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	603b      	str	r3, [r7, #0]
 8009ebc:	4613      	mov	r3, r2
 8009ebe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ec6:	2b20      	cmp	r3, #32
 8009ec8:	d17b      	bne.n	8009fc2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d002      	beq.n	8009ed6 <HAL_UART_Transmit+0x26>
 8009ed0:	88fb      	ldrh	r3, [r7, #6]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d101      	bne.n	8009eda <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e074      	b.n	8009fc4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2200      	movs	r2, #0
 8009ede:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2221      	movs	r2, #33	@ 0x21
 8009ee6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009eea:	f7fa f857 	bl	8003f9c <HAL_GetTick>
 8009eee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	88fa      	ldrh	r2, [r7, #6]
 8009ef4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	88fa      	ldrh	r2, [r7, #6]
 8009efc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f08:	d108      	bne.n	8009f1c <HAL_UART_Transmit+0x6c>
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d104      	bne.n	8009f1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009f12:	2300      	movs	r3, #0
 8009f14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	61bb      	str	r3, [r7, #24]
 8009f1a:	e003      	b.n	8009f24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f20:	2300      	movs	r3, #0
 8009f22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009f24:	e030      	b.n	8009f88 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	9300      	str	r3, [sp, #0]
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	2180      	movs	r1, #128	@ 0x80
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f001 f841 	bl	800afb8 <UART_WaitOnFlagUntilTimeout>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d005      	beq.n	8009f48 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2220      	movs	r2, #32
 8009f40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009f44:	2303      	movs	r3, #3
 8009f46:	e03d      	b.n	8009fc4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d10b      	bne.n	8009f66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	881b      	ldrh	r3, [r3, #0]
 8009f52:	461a      	mov	r2, r3
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f5c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009f5e:	69bb      	ldr	r3, [r7, #24]
 8009f60:	3302      	adds	r3, #2
 8009f62:	61bb      	str	r3, [r7, #24]
 8009f64:	e007      	b.n	8009f76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009f66:	69fb      	ldr	r3, [r7, #28]
 8009f68:	781a      	ldrb	r2, [r3, #0]
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009f70:	69fb      	ldr	r3, [r7, #28]
 8009f72:	3301      	adds	r3, #1
 8009f74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	3b01      	subs	r3, #1
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d1c8      	bne.n	8009f26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	9300      	str	r3, [sp, #0]
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	2140      	movs	r1, #64	@ 0x40
 8009f9e:	68f8      	ldr	r0, [r7, #12]
 8009fa0:	f001 f80a 	bl	800afb8 <UART_WaitOnFlagUntilTimeout>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d005      	beq.n	8009fb6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2220      	movs	r2, #32
 8009fae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009fb2:	2303      	movs	r3, #3
 8009fb4:	e006      	b.n	8009fc4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2220      	movs	r2, #32
 8009fba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	e000      	b.n	8009fc4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009fc2:	2302      	movs	r3, #2
  }
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3720      	adds	r7, #32
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b08a      	sub	sp, #40	@ 0x28
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	4613      	mov	r3, r2
 8009fd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009fe0:	2b20      	cmp	r3, #32
 8009fe2:	d137      	bne.n	800a054 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d002      	beq.n	8009ff0 <HAL_UART_Receive_IT+0x24>
 8009fea:	88fb      	ldrh	r3, [r7, #6]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d101      	bne.n	8009ff4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e030      	b.n	800a056 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a18      	ldr	r2, [pc, #96]	@ (800a060 <HAL_UART_Receive_IT+0x94>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d01f      	beq.n	800a044 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d018      	beq.n	800a044 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	e853 3f00 	ldrex	r3, [r3]
 800a01e:	613b      	str	r3, [r7, #16]
   return(result);
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a026:	627b      	str	r3, [r7, #36]	@ 0x24
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	461a      	mov	r2, r3
 800a02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a030:	623b      	str	r3, [r7, #32]
 800a032:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a034:	69f9      	ldr	r1, [r7, #28]
 800a036:	6a3a      	ldr	r2, [r7, #32]
 800a038:	e841 2300 	strex	r3, r2, [r1]
 800a03c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a03e:	69bb      	ldr	r3, [r7, #24]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d1e6      	bne.n	800a012 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a044:	88fb      	ldrh	r3, [r7, #6]
 800a046:	461a      	mov	r2, r3
 800a048:	68b9      	ldr	r1, [r7, #8]
 800a04a:	68f8      	ldr	r0, [r7, #12]
 800a04c:	f001 f822 	bl	800b094 <UART_Start_Receive_IT>
 800a050:	4603      	mov	r3, r0
 800a052:	e000      	b.n	800a056 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a054:	2302      	movs	r3, #2
  }
}
 800a056:	4618      	mov	r0, r3
 800a058:	3728      	adds	r7, #40	@ 0x28
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	40008000 	.word	0x40008000

0800a064 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b0ba      	sub	sp, #232	@ 0xe8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	69db      	ldr	r3, [r3, #28]
 800a072:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a08a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a08e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a092:	4013      	ands	r3, r2
 800a094:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a098:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d11b      	bne.n	800a0d8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a0a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0a4:	f003 0320 	and.w	r3, r3, #32
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d015      	beq.n	800a0d8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a0ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0b0:	f003 0320 	and.w	r3, r3, #32
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d105      	bne.n	800a0c4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a0b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a0bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d009      	beq.n	800a0d8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	f000 8300 	beq.w	800a6ce <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	4798      	blx	r3
      }
      return;
 800a0d6:	e2fa      	b.n	800a6ce <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a0d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	f000 8123 	beq.w	800a328 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a0e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a0e6:	4b8d      	ldr	r3, [pc, #564]	@ (800a31c <HAL_UART_IRQHandler+0x2b8>)
 800a0e8:	4013      	ands	r3, r2
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d106      	bne.n	800a0fc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a0ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a0f2:	4b8b      	ldr	r3, [pc, #556]	@ (800a320 <HAL_UART_IRQHandler+0x2bc>)
 800a0f4:	4013      	ands	r3, r2
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	f000 8116 	beq.w	800a328 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a0fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a100:	f003 0301 	and.w	r3, r3, #1
 800a104:	2b00      	cmp	r3, #0
 800a106:	d011      	beq.n	800a12c <HAL_UART_IRQHandler+0xc8>
 800a108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a10c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a110:	2b00      	cmp	r3, #0
 800a112:	d00b      	beq.n	800a12c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	2201      	movs	r2, #1
 800a11a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a122:	f043 0201 	orr.w	r2, r3, #1
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a12c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a130:	f003 0302 	and.w	r3, r3, #2
 800a134:	2b00      	cmp	r3, #0
 800a136:	d011      	beq.n	800a15c <HAL_UART_IRQHandler+0xf8>
 800a138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a13c:	f003 0301 	and.w	r3, r3, #1
 800a140:	2b00      	cmp	r3, #0
 800a142:	d00b      	beq.n	800a15c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2202      	movs	r2, #2
 800a14a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a152:	f043 0204 	orr.w	r2, r3, #4
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a15c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a160:	f003 0304 	and.w	r3, r3, #4
 800a164:	2b00      	cmp	r3, #0
 800a166:	d011      	beq.n	800a18c <HAL_UART_IRQHandler+0x128>
 800a168:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a16c:	f003 0301 	and.w	r3, r3, #1
 800a170:	2b00      	cmp	r3, #0
 800a172:	d00b      	beq.n	800a18c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2204      	movs	r2, #4
 800a17a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a182:	f043 0202 	orr.w	r2, r3, #2
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a18c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a190:	f003 0308 	and.w	r3, r3, #8
 800a194:	2b00      	cmp	r3, #0
 800a196:	d017      	beq.n	800a1c8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a19c:	f003 0320 	and.w	r3, r3, #32
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d105      	bne.n	800a1b0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a1a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a1a8:	4b5c      	ldr	r3, [pc, #368]	@ (800a31c <HAL_UART_IRQHandler+0x2b8>)
 800a1aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d00b      	beq.n	800a1c8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2208      	movs	r2, #8
 800a1b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1be:	f043 0208 	orr.w	r2, r3, #8
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a1c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d012      	beq.n	800a1fa <HAL_UART_IRQHandler+0x196>
 800a1d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d00c      	beq.n	800a1fa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a1e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1f0:	f043 0220 	orr.w	r2, r3, #32
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a200:	2b00      	cmp	r3, #0
 800a202:	f000 8266 	beq.w	800a6d2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a20a:	f003 0320 	and.w	r3, r3, #32
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d013      	beq.n	800a23a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a216:	f003 0320 	and.w	r3, r3, #32
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d105      	bne.n	800a22a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a21e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a226:	2b00      	cmp	r3, #0
 800a228:	d007      	beq.n	800a23a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d003      	beq.n	800a23a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a240:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a24e:	2b40      	cmp	r3, #64	@ 0x40
 800a250:	d005      	beq.n	800a25e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a252:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a256:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d054      	beq.n	800a308 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f001 f83a 	bl	800b2d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a26e:	2b40      	cmp	r3, #64	@ 0x40
 800a270:	d146      	bne.n	800a300 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	3308      	adds	r3, #8
 800a278:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a27c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a280:	e853 3f00 	ldrex	r3, [r3]
 800a284:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a288:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a28c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a290:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	3308      	adds	r3, #8
 800a29a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a29e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a2a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a2aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a2ae:	e841 2300 	strex	r3, r2, [r1]
 800a2b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a2b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d1d9      	bne.n	800a272 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d017      	beq.n	800a2f8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2ce:	4a15      	ldr	r2, [pc, #84]	@ (800a324 <HAL_UART_IRQHandler+0x2c0>)
 800a2d0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7fa f89e 	bl	800441a <HAL_DMA_Abort_IT>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d019      	beq.n	800a318 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a2f2:	4610      	mov	r0, r2
 800a2f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2f6:	e00f      	b.n	800a318 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 f9ff 	bl	800a6fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2fe:	e00b      	b.n	800a318 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 f9fb 	bl	800a6fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a306:	e007      	b.n	800a318 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 f9f7 	bl	800a6fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2200      	movs	r2, #0
 800a312:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a316:	e1dc      	b.n	800a6d2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a318:	bf00      	nop
    return;
 800a31a:	e1da      	b.n	800a6d2 <HAL_UART_IRQHandler+0x66e>
 800a31c:	10000001 	.word	0x10000001
 800a320:	04000120 	.word	0x04000120
 800a324:	0800b3a5 	.word	0x0800b3a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	f040 8170 	bne.w	800a612 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a336:	f003 0310 	and.w	r3, r3, #16
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	f000 8169 	beq.w	800a612 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a344:	f003 0310 	and.w	r3, r3, #16
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f000 8162 	beq.w	800a612 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2210      	movs	r2, #16
 800a354:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a360:	2b40      	cmp	r3, #64	@ 0x40
 800a362:	f040 80d8 	bne.w	800a516 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a374:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a378:	2b00      	cmp	r3, #0
 800a37a:	f000 80af 	beq.w	800a4dc <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a384:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a388:	429a      	cmp	r2, r3
 800a38a:	f080 80a7 	bcs.w	800a4dc <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a394:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f003 0320 	and.w	r3, r3, #32
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	f040 8087 	bne.w	800a4ba <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a3b8:	e853 3f00 	ldrex	r3, [r3]
 800a3bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a3c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a3c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a3d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a3da:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a3e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a3e6:	e841 2300 	strex	r3, r2, [r1]
 800a3ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a3ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d1da      	bne.n	800a3ac <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	3308      	adds	r3, #8
 800a3fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a400:	e853 3f00 	ldrex	r3, [r3]
 800a404:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a406:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a408:	f023 0301 	bic.w	r3, r3, #1
 800a40c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	3308      	adds	r3, #8
 800a416:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a41a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a41e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a420:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a422:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a426:	e841 2300 	strex	r3, r2, [r1]
 800a42a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a42c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d1e1      	bne.n	800a3f6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	3308      	adds	r3, #8
 800a438:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a43a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a43c:	e853 3f00 	ldrex	r3, [r3]
 800a440:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a442:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a444:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a448:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	3308      	adds	r3, #8
 800a452:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a456:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a458:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a45a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a45c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a45e:	e841 2300 	strex	r3, r2, [r1]
 800a462:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a464:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a466:	2b00      	cmp	r3, #0
 800a468:	d1e3      	bne.n	800a432 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2220      	movs	r2, #32
 800a46e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2200      	movs	r2, #0
 800a476:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a47e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a480:	e853 3f00 	ldrex	r3, [r3]
 800a484:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a486:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a488:	f023 0310 	bic.w	r3, r3, #16
 800a48c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	461a      	mov	r2, r3
 800a496:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a49a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a49c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a49e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a4a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a4a2:	e841 2300 	strex	r3, r2, [r1]
 800a4a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a4a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d1e4      	bne.n	800a478 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f7f9 ff57 	bl	8004368 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2202      	movs	r2, #2
 800a4be:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	1ad3      	subs	r3, r2, r3
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	4619      	mov	r1, r3
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 f91b 	bl	800a710 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a4da:	e0fc      	b.n	800a6d6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a4e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	f040 80f5 	bne.w	800a6d6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f003 0320 	and.w	r3, r3, #32
 800a4fa:	2b20      	cmp	r3, #32
 800a4fc:	f040 80eb 	bne.w	800a6d6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2202      	movs	r2, #2
 800a504:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a50c:	4619      	mov	r1, r3
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 f8fe 	bl	800a710 <HAL_UARTEx_RxEventCallback>
      return;
 800a514:	e0df      	b.n	800a6d6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a522:	b29b      	uxth	r3, r3
 800a524:	1ad3      	subs	r3, r2, r3
 800a526:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a530:	b29b      	uxth	r3, r3
 800a532:	2b00      	cmp	r3, #0
 800a534:	f000 80d1 	beq.w	800a6da <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800a538:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f000 80cc 	beq.w	800a6da <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a54a:	e853 3f00 	ldrex	r3, [r3]
 800a54e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a552:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a556:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	461a      	mov	r2, r3
 800a560:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a564:	647b      	str	r3, [r7, #68]	@ 0x44
 800a566:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a568:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a56a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a56c:	e841 2300 	strex	r3, r2, [r1]
 800a570:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a574:	2b00      	cmp	r3, #0
 800a576:	d1e4      	bne.n	800a542 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	3308      	adds	r3, #8
 800a57e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a582:	e853 3f00 	ldrex	r3, [r3]
 800a586:	623b      	str	r3, [r7, #32]
   return(result);
 800a588:	6a3b      	ldr	r3, [r7, #32]
 800a58a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a58e:	f023 0301 	bic.w	r3, r3, #1
 800a592:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	3308      	adds	r3, #8
 800a59c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a5a0:	633a      	str	r2, [r7, #48]	@ 0x30
 800a5a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5a8:	e841 2300 	strex	r3, r2, [r1]
 800a5ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d1e1      	bne.n	800a578 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2220      	movs	r2, #32
 800a5b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	e853 3f00 	ldrex	r3, [r3]
 800a5d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f023 0310 	bic.w	r3, r3, #16
 800a5dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	461a      	mov	r2, r3
 800a5e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a5ea:	61fb      	str	r3, [r7, #28]
 800a5ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ee:	69b9      	ldr	r1, [r7, #24]
 800a5f0:	69fa      	ldr	r2, [r7, #28]
 800a5f2:	e841 2300 	strex	r3, r2, [r1]
 800a5f6:	617b      	str	r3, [r7, #20]
   return(result);
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d1e4      	bne.n	800a5c8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2202      	movs	r2, #2
 800a602:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a604:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a608:	4619      	mov	r1, r3
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 f880 	bl	800a710 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a610:	e063      	b.n	800a6da <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a616:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d00e      	beq.n	800a63c <HAL_UART_IRQHandler+0x5d8>
 800a61e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a622:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a626:	2b00      	cmp	r3, #0
 800a628:	d008      	beq.n	800a63c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a632:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f001 fc13 	bl	800be60 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a63a:	e051      	b.n	800a6e0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a63c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a640:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a644:	2b00      	cmp	r3, #0
 800a646:	d014      	beq.n	800a672 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a64c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a650:	2b00      	cmp	r3, #0
 800a652:	d105      	bne.n	800a660 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a658:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d008      	beq.n	800a672 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a664:	2b00      	cmp	r3, #0
 800a666:	d03a      	beq.n	800a6de <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	4798      	blx	r3
    }
    return;
 800a670:	e035      	b.n	800a6de <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d009      	beq.n	800a692 <HAL_UART_IRQHandler+0x62e>
 800a67e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a686:	2b00      	cmp	r3, #0
 800a688:	d003      	beq.n	800a692 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 fe9c 	bl	800b3c8 <UART_EndTransmit_IT>
    return;
 800a690:	e026      	b.n	800a6e0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a696:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d009      	beq.n	800a6b2 <HAL_UART_IRQHandler+0x64e>
 800a69e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6a2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d003      	beq.n	800a6b2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f001 fbec 	bl	800be88 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a6b0:	e016      	b.n	800a6e0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a6b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d010      	beq.n	800a6e0 <HAL_UART_IRQHandler+0x67c>
 800a6be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	da0c      	bge.n	800a6e0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f001 fbd4 	bl	800be74 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a6cc:	e008      	b.n	800a6e0 <HAL_UART_IRQHandler+0x67c>
      return;
 800a6ce:	bf00      	nop
 800a6d0:	e006      	b.n	800a6e0 <HAL_UART_IRQHandler+0x67c>
    return;
 800a6d2:	bf00      	nop
 800a6d4:	e004      	b.n	800a6e0 <HAL_UART_IRQHandler+0x67c>
      return;
 800a6d6:	bf00      	nop
 800a6d8:	e002      	b.n	800a6e0 <HAL_UART_IRQHandler+0x67c>
      return;
 800a6da:	bf00      	nop
 800a6dc:	e000      	b.n	800a6e0 <HAL_UART_IRQHandler+0x67c>
    return;
 800a6de:	bf00      	nop
  }
}
 800a6e0:	37e8      	adds	r7, #232	@ 0xe8
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop

0800a6e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a6f0:	bf00      	nop
 800a6f2:	370c      	adds	r7, #12
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr

0800a6fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a704:	bf00      	nop
 800a706:	370c      	adds	r7, #12
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	460b      	mov	r3, r1
 800a71a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a71c:	bf00      	nop
 800a71e:	370c      	adds	r7, #12
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr

0800a728 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a72c:	b08c      	sub	sp, #48	@ 0x30
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a732:	2300      	movs	r3, #0
 800a734:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	689a      	ldr	r2, [r3, #8]
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	691b      	ldr	r3, [r3, #16]
 800a740:	431a      	orrs	r2, r3
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	695b      	ldr	r3, [r3, #20]
 800a746:	431a      	orrs	r2, r3
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	69db      	ldr	r3, [r3, #28]
 800a74c:	4313      	orrs	r3, r2
 800a74e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	4baa      	ldr	r3, [pc, #680]	@ (800aa00 <UART_SetConfig+0x2d8>)
 800a758:	4013      	ands	r3, r2
 800a75a:	697a      	ldr	r2, [r7, #20]
 800a75c:	6812      	ldr	r2, [r2, #0]
 800a75e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a760:	430b      	orrs	r3, r1
 800a762:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	68da      	ldr	r2, [r3, #12]
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	430a      	orrs	r2, r1
 800a778:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	699b      	ldr	r3, [r3, #24]
 800a77e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a9f      	ldr	r2, [pc, #636]	@ (800aa04 <UART_SetConfig+0x2dc>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d004      	beq.n	800a794 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	6a1b      	ldr	r3, [r3, #32]
 800a78e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a790:	4313      	orrs	r3, r2
 800a792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a79e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a7a2:	697a      	ldr	r2, [r7, #20]
 800a7a4:	6812      	ldr	r2, [r2, #0]
 800a7a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a7a8:	430b      	orrs	r3, r1
 800a7aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7b2:	f023 010f 	bic.w	r1, r3, #15
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	430a      	orrs	r2, r1
 800a7c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a90      	ldr	r2, [pc, #576]	@ (800aa08 <UART_SetConfig+0x2e0>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d125      	bne.n	800a818 <UART_SetConfig+0xf0>
 800a7cc:	4b8f      	ldr	r3, [pc, #572]	@ (800aa0c <UART_SetConfig+0x2e4>)
 800a7ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7d2:	f003 0303 	and.w	r3, r3, #3
 800a7d6:	2b03      	cmp	r3, #3
 800a7d8:	d81a      	bhi.n	800a810 <UART_SetConfig+0xe8>
 800a7da:	a201      	add	r2, pc, #4	@ (adr r2, 800a7e0 <UART_SetConfig+0xb8>)
 800a7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e0:	0800a7f1 	.word	0x0800a7f1
 800a7e4:	0800a801 	.word	0x0800a801
 800a7e8:	0800a7f9 	.word	0x0800a7f9
 800a7ec:	0800a809 	.word	0x0800a809
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7f6:	e116      	b.n	800aa26 <UART_SetConfig+0x2fe>
 800a7f8:	2302      	movs	r3, #2
 800a7fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7fe:	e112      	b.n	800aa26 <UART_SetConfig+0x2fe>
 800a800:	2304      	movs	r3, #4
 800a802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a806:	e10e      	b.n	800aa26 <UART_SetConfig+0x2fe>
 800a808:	2308      	movs	r3, #8
 800a80a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a80e:	e10a      	b.n	800aa26 <UART_SetConfig+0x2fe>
 800a810:	2310      	movs	r3, #16
 800a812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a816:	e106      	b.n	800aa26 <UART_SetConfig+0x2fe>
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a7c      	ldr	r2, [pc, #496]	@ (800aa10 <UART_SetConfig+0x2e8>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d138      	bne.n	800a894 <UART_SetConfig+0x16c>
 800a822:	4b7a      	ldr	r3, [pc, #488]	@ (800aa0c <UART_SetConfig+0x2e4>)
 800a824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a828:	f003 030c 	and.w	r3, r3, #12
 800a82c:	2b0c      	cmp	r3, #12
 800a82e:	d82d      	bhi.n	800a88c <UART_SetConfig+0x164>
 800a830:	a201      	add	r2, pc, #4	@ (adr r2, 800a838 <UART_SetConfig+0x110>)
 800a832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a836:	bf00      	nop
 800a838:	0800a86d 	.word	0x0800a86d
 800a83c:	0800a88d 	.word	0x0800a88d
 800a840:	0800a88d 	.word	0x0800a88d
 800a844:	0800a88d 	.word	0x0800a88d
 800a848:	0800a87d 	.word	0x0800a87d
 800a84c:	0800a88d 	.word	0x0800a88d
 800a850:	0800a88d 	.word	0x0800a88d
 800a854:	0800a88d 	.word	0x0800a88d
 800a858:	0800a875 	.word	0x0800a875
 800a85c:	0800a88d 	.word	0x0800a88d
 800a860:	0800a88d 	.word	0x0800a88d
 800a864:	0800a88d 	.word	0x0800a88d
 800a868:	0800a885 	.word	0x0800a885
 800a86c:	2300      	movs	r3, #0
 800a86e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a872:	e0d8      	b.n	800aa26 <UART_SetConfig+0x2fe>
 800a874:	2302      	movs	r3, #2
 800a876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a87a:	e0d4      	b.n	800aa26 <UART_SetConfig+0x2fe>
 800a87c:	2304      	movs	r3, #4
 800a87e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a882:	e0d0      	b.n	800aa26 <UART_SetConfig+0x2fe>
 800a884:	2308      	movs	r3, #8
 800a886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a88a:	e0cc      	b.n	800aa26 <UART_SetConfig+0x2fe>
 800a88c:	2310      	movs	r3, #16
 800a88e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a892:	e0c8      	b.n	800aa26 <UART_SetConfig+0x2fe>
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a5e      	ldr	r2, [pc, #376]	@ (800aa14 <UART_SetConfig+0x2ec>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d125      	bne.n	800a8ea <UART_SetConfig+0x1c2>
 800a89e:	4b5b      	ldr	r3, [pc, #364]	@ (800aa0c <UART_SetConfig+0x2e4>)
 800a8a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a8a8:	2b30      	cmp	r3, #48	@ 0x30
 800a8aa:	d016      	beq.n	800a8da <UART_SetConfig+0x1b2>
 800a8ac:	2b30      	cmp	r3, #48	@ 0x30
 800a8ae:	d818      	bhi.n	800a8e2 <UART_SetConfig+0x1ba>
 800a8b0:	2b20      	cmp	r3, #32
 800a8b2:	d00a      	beq.n	800a8ca <UART_SetConfig+0x1a2>
 800a8b4:	2b20      	cmp	r3, #32
 800a8b6:	d814      	bhi.n	800a8e2 <UART_SetConfig+0x1ba>
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d002      	beq.n	800a8c2 <UART_SetConfig+0x19a>
 800a8bc:	2b10      	cmp	r3, #16
 800a8be:	d008      	beq.n	800a8d2 <UART_SetConfig+0x1aa>
 800a8c0:	e00f      	b.n	800a8e2 <UART_SetConfig+0x1ba>
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8c8:	e0ad      	b.n	800aa26 <UART_SetConfig+0x2fe>
 800a8ca:	2302      	movs	r3, #2
 800a8cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8d0:	e0a9      	b.n	800aa26 <UART_SetConfig+0x2fe>
 800a8d2:	2304      	movs	r3, #4
 800a8d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8d8:	e0a5      	b.n	800aa26 <UART_SetConfig+0x2fe>
 800a8da:	2308      	movs	r3, #8
 800a8dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8e0:	e0a1      	b.n	800aa26 <UART_SetConfig+0x2fe>
 800a8e2:	2310      	movs	r3, #16
 800a8e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8e8:	e09d      	b.n	800aa26 <UART_SetConfig+0x2fe>
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a4a      	ldr	r2, [pc, #296]	@ (800aa18 <UART_SetConfig+0x2f0>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d125      	bne.n	800a940 <UART_SetConfig+0x218>
 800a8f4:	4b45      	ldr	r3, [pc, #276]	@ (800aa0c <UART_SetConfig+0x2e4>)
 800a8f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a8fe:	2bc0      	cmp	r3, #192	@ 0xc0
 800a900:	d016      	beq.n	800a930 <UART_SetConfig+0x208>
 800a902:	2bc0      	cmp	r3, #192	@ 0xc0
 800a904:	d818      	bhi.n	800a938 <UART_SetConfig+0x210>
 800a906:	2b80      	cmp	r3, #128	@ 0x80
 800a908:	d00a      	beq.n	800a920 <UART_SetConfig+0x1f8>
 800a90a:	2b80      	cmp	r3, #128	@ 0x80
 800a90c:	d814      	bhi.n	800a938 <UART_SetConfig+0x210>
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d002      	beq.n	800a918 <UART_SetConfig+0x1f0>
 800a912:	2b40      	cmp	r3, #64	@ 0x40
 800a914:	d008      	beq.n	800a928 <UART_SetConfig+0x200>
 800a916:	e00f      	b.n	800a938 <UART_SetConfig+0x210>
 800a918:	2300      	movs	r3, #0
 800a91a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a91e:	e082      	b.n	800aa26 <UART_SetConfig+0x2fe>
 800a920:	2302      	movs	r3, #2
 800a922:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a926:	e07e      	b.n	800aa26 <UART_SetConfig+0x2fe>
 800a928:	2304      	movs	r3, #4
 800a92a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a92e:	e07a      	b.n	800aa26 <UART_SetConfig+0x2fe>
 800a930:	2308      	movs	r3, #8
 800a932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a936:	e076      	b.n	800aa26 <UART_SetConfig+0x2fe>
 800a938:	2310      	movs	r3, #16
 800a93a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a93e:	e072      	b.n	800aa26 <UART_SetConfig+0x2fe>
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a35      	ldr	r2, [pc, #212]	@ (800aa1c <UART_SetConfig+0x2f4>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d12a      	bne.n	800a9a0 <UART_SetConfig+0x278>
 800a94a:	4b30      	ldr	r3, [pc, #192]	@ (800aa0c <UART_SetConfig+0x2e4>)
 800a94c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a950:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a954:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a958:	d01a      	beq.n	800a990 <UART_SetConfig+0x268>
 800a95a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a95e:	d81b      	bhi.n	800a998 <UART_SetConfig+0x270>
 800a960:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a964:	d00c      	beq.n	800a980 <UART_SetConfig+0x258>
 800a966:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a96a:	d815      	bhi.n	800a998 <UART_SetConfig+0x270>
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d003      	beq.n	800a978 <UART_SetConfig+0x250>
 800a970:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a974:	d008      	beq.n	800a988 <UART_SetConfig+0x260>
 800a976:	e00f      	b.n	800a998 <UART_SetConfig+0x270>
 800a978:	2300      	movs	r3, #0
 800a97a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a97e:	e052      	b.n	800aa26 <UART_SetConfig+0x2fe>
 800a980:	2302      	movs	r3, #2
 800a982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a986:	e04e      	b.n	800aa26 <UART_SetConfig+0x2fe>
 800a988:	2304      	movs	r3, #4
 800a98a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a98e:	e04a      	b.n	800aa26 <UART_SetConfig+0x2fe>
 800a990:	2308      	movs	r3, #8
 800a992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a996:	e046      	b.n	800aa26 <UART_SetConfig+0x2fe>
 800a998:	2310      	movs	r3, #16
 800a99a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a99e:	e042      	b.n	800aa26 <UART_SetConfig+0x2fe>
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4a17      	ldr	r2, [pc, #92]	@ (800aa04 <UART_SetConfig+0x2dc>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d13a      	bne.n	800aa20 <UART_SetConfig+0x2f8>
 800a9aa:	4b18      	ldr	r3, [pc, #96]	@ (800aa0c <UART_SetConfig+0x2e4>)
 800a9ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a9b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a9b8:	d01a      	beq.n	800a9f0 <UART_SetConfig+0x2c8>
 800a9ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a9be:	d81b      	bhi.n	800a9f8 <UART_SetConfig+0x2d0>
 800a9c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a9c4:	d00c      	beq.n	800a9e0 <UART_SetConfig+0x2b8>
 800a9c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a9ca:	d815      	bhi.n	800a9f8 <UART_SetConfig+0x2d0>
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d003      	beq.n	800a9d8 <UART_SetConfig+0x2b0>
 800a9d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a9d4:	d008      	beq.n	800a9e8 <UART_SetConfig+0x2c0>
 800a9d6:	e00f      	b.n	800a9f8 <UART_SetConfig+0x2d0>
 800a9d8:	2300      	movs	r3, #0
 800a9da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9de:	e022      	b.n	800aa26 <UART_SetConfig+0x2fe>
 800a9e0:	2302      	movs	r3, #2
 800a9e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9e6:	e01e      	b.n	800aa26 <UART_SetConfig+0x2fe>
 800a9e8:	2304      	movs	r3, #4
 800a9ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9ee:	e01a      	b.n	800aa26 <UART_SetConfig+0x2fe>
 800a9f0:	2308      	movs	r3, #8
 800a9f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9f6:	e016      	b.n	800aa26 <UART_SetConfig+0x2fe>
 800a9f8:	2310      	movs	r3, #16
 800a9fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9fe:	e012      	b.n	800aa26 <UART_SetConfig+0x2fe>
 800aa00:	cfff69f3 	.word	0xcfff69f3
 800aa04:	40008000 	.word	0x40008000
 800aa08:	40013800 	.word	0x40013800
 800aa0c:	40021000 	.word	0x40021000
 800aa10:	40004400 	.word	0x40004400
 800aa14:	40004800 	.word	0x40004800
 800aa18:	40004c00 	.word	0x40004c00
 800aa1c:	40005000 	.word	0x40005000
 800aa20:	2310      	movs	r3, #16
 800aa22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4aae      	ldr	r2, [pc, #696]	@ (800ace4 <UART_SetConfig+0x5bc>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	f040 8097 	bne.w	800ab60 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aa32:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aa36:	2b08      	cmp	r3, #8
 800aa38:	d823      	bhi.n	800aa82 <UART_SetConfig+0x35a>
 800aa3a:	a201      	add	r2, pc, #4	@ (adr r2, 800aa40 <UART_SetConfig+0x318>)
 800aa3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa40:	0800aa65 	.word	0x0800aa65
 800aa44:	0800aa83 	.word	0x0800aa83
 800aa48:	0800aa6d 	.word	0x0800aa6d
 800aa4c:	0800aa83 	.word	0x0800aa83
 800aa50:	0800aa73 	.word	0x0800aa73
 800aa54:	0800aa83 	.word	0x0800aa83
 800aa58:	0800aa83 	.word	0x0800aa83
 800aa5c:	0800aa83 	.word	0x0800aa83
 800aa60:	0800aa7b 	.word	0x0800aa7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa64:	f7fd faa2 	bl	8007fac <HAL_RCC_GetPCLK1Freq>
 800aa68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aa6a:	e010      	b.n	800aa8e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa6c:	4b9e      	ldr	r3, [pc, #632]	@ (800ace8 <UART_SetConfig+0x5c0>)
 800aa6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aa70:	e00d      	b.n	800aa8e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa72:	f7fd fa2d 	bl	8007ed0 <HAL_RCC_GetSysClockFreq>
 800aa76:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aa78:	e009      	b.n	800aa8e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aa80:	e005      	b.n	800aa8e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800aa82:	2300      	movs	r3, #0
 800aa84:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800aa86:	2301      	movs	r3, #1
 800aa88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800aa8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aa8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	f000 8130 	beq.w	800acf6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa9a:	4a94      	ldr	r2, [pc, #592]	@ (800acec <UART_SetConfig+0x5c4>)
 800aa9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa4:	fbb3 f3f2 	udiv	r3, r3, r2
 800aaa8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	685a      	ldr	r2, [r3, #4]
 800aaae:	4613      	mov	r3, r2
 800aab0:	005b      	lsls	r3, r3, #1
 800aab2:	4413      	add	r3, r2
 800aab4:	69ba      	ldr	r2, [r7, #24]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d305      	bcc.n	800aac6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aac0:	69ba      	ldr	r2, [r7, #24]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d903      	bls.n	800aace <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800aac6:	2301      	movs	r3, #1
 800aac8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aacc:	e113      	b.n	800acf6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad0:	2200      	movs	r2, #0
 800aad2:	60bb      	str	r3, [r7, #8]
 800aad4:	60fa      	str	r2, [r7, #12]
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aada:	4a84      	ldr	r2, [pc, #528]	@ (800acec <UART_SetConfig+0x5c4>)
 800aadc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	2200      	movs	r2, #0
 800aae4:	603b      	str	r3, [r7, #0]
 800aae6:	607a      	str	r2, [r7, #4]
 800aae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aaec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aaf0:	f7f5 ffd8 	bl	8000aa4 <__aeabi_uldivmod>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	4610      	mov	r0, r2
 800aafa:	4619      	mov	r1, r3
 800aafc:	f04f 0200 	mov.w	r2, #0
 800ab00:	f04f 0300 	mov.w	r3, #0
 800ab04:	020b      	lsls	r3, r1, #8
 800ab06:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ab0a:	0202      	lsls	r2, r0, #8
 800ab0c:	6979      	ldr	r1, [r7, #20]
 800ab0e:	6849      	ldr	r1, [r1, #4]
 800ab10:	0849      	lsrs	r1, r1, #1
 800ab12:	2000      	movs	r0, #0
 800ab14:	460c      	mov	r4, r1
 800ab16:	4605      	mov	r5, r0
 800ab18:	eb12 0804 	adds.w	r8, r2, r4
 800ab1c:	eb43 0905 	adc.w	r9, r3, r5
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	469a      	mov	sl, r3
 800ab28:	4693      	mov	fp, r2
 800ab2a:	4652      	mov	r2, sl
 800ab2c:	465b      	mov	r3, fp
 800ab2e:	4640      	mov	r0, r8
 800ab30:	4649      	mov	r1, r9
 800ab32:	f7f5 ffb7 	bl	8000aa4 <__aeabi_uldivmod>
 800ab36:	4602      	mov	r2, r0
 800ab38:	460b      	mov	r3, r1
 800ab3a:	4613      	mov	r3, r2
 800ab3c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ab3e:	6a3b      	ldr	r3, [r7, #32]
 800ab40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab44:	d308      	bcc.n	800ab58 <UART_SetConfig+0x430>
 800ab46:	6a3b      	ldr	r3, [r7, #32]
 800ab48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab4c:	d204      	bcs.n	800ab58 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	6a3a      	ldr	r2, [r7, #32]
 800ab54:	60da      	str	r2, [r3, #12]
 800ab56:	e0ce      	b.n	800acf6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ab5e:	e0ca      	b.n	800acf6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	69db      	ldr	r3, [r3, #28]
 800ab64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ab68:	d166      	bne.n	800ac38 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800ab6a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ab6e:	2b08      	cmp	r3, #8
 800ab70:	d827      	bhi.n	800abc2 <UART_SetConfig+0x49a>
 800ab72:	a201      	add	r2, pc, #4	@ (adr r2, 800ab78 <UART_SetConfig+0x450>)
 800ab74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab78:	0800ab9d 	.word	0x0800ab9d
 800ab7c:	0800aba5 	.word	0x0800aba5
 800ab80:	0800abad 	.word	0x0800abad
 800ab84:	0800abc3 	.word	0x0800abc3
 800ab88:	0800abb3 	.word	0x0800abb3
 800ab8c:	0800abc3 	.word	0x0800abc3
 800ab90:	0800abc3 	.word	0x0800abc3
 800ab94:	0800abc3 	.word	0x0800abc3
 800ab98:	0800abbb 	.word	0x0800abbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab9c:	f7fd fa06 	bl	8007fac <HAL_RCC_GetPCLK1Freq>
 800aba0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aba2:	e014      	b.n	800abce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aba4:	f7fd fa18 	bl	8007fd8 <HAL_RCC_GetPCLK2Freq>
 800aba8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800abaa:	e010      	b.n	800abce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800abac:	4b4e      	ldr	r3, [pc, #312]	@ (800ace8 <UART_SetConfig+0x5c0>)
 800abae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800abb0:	e00d      	b.n	800abce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800abb2:	f7fd f98d 	bl	8007ed0 <HAL_RCC_GetSysClockFreq>
 800abb6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800abb8:	e009      	b.n	800abce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800abbe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800abc0:	e005      	b.n	800abce <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800abc2:	2300      	movs	r3, #0
 800abc4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800abc6:	2301      	movs	r3, #1
 800abc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800abcc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800abce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	f000 8090 	beq.w	800acf6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abda:	4a44      	ldr	r2, [pc, #272]	@ (800acec <UART_SetConfig+0x5c4>)
 800abdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abe0:	461a      	mov	r2, r3
 800abe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe4:	fbb3 f3f2 	udiv	r3, r3, r2
 800abe8:	005a      	lsls	r2, r3, #1
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	085b      	lsrs	r3, r3, #1
 800abf0:	441a      	add	r2, r3
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800abfa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800abfc:	6a3b      	ldr	r3, [r7, #32]
 800abfe:	2b0f      	cmp	r3, #15
 800ac00:	d916      	bls.n	800ac30 <UART_SetConfig+0x508>
 800ac02:	6a3b      	ldr	r3, [r7, #32]
 800ac04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac08:	d212      	bcs.n	800ac30 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac0a:	6a3b      	ldr	r3, [r7, #32]
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	f023 030f 	bic.w	r3, r3, #15
 800ac12:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac14:	6a3b      	ldr	r3, [r7, #32]
 800ac16:	085b      	lsrs	r3, r3, #1
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	f003 0307 	and.w	r3, r3, #7
 800ac1e:	b29a      	uxth	r2, r3
 800ac20:	8bfb      	ldrh	r3, [r7, #30]
 800ac22:	4313      	orrs	r3, r2
 800ac24:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	8bfa      	ldrh	r2, [r7, #30]
 800ac2c:	60da      	str	r2, [r3, #12]
 800ac2e:	e062      	b.n	800acf6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ac30:	2301      	movs	r3, #1
 800ac32:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ac36:	e05e      	b.n	800acf6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ac38:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ac3c:	2b08      	cmp	r3, #8
 800ac3e:	d828      	bhi.n	800ac92 <UART_SetConfig+0x56a>
 800ac40:	a201      	add	r2, pc, #4	@ (adr r2, 800ac48 <UART_SetConfig+0x520>)
 800ac42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac46:	bf00      	nop
 800ac48:	0800ac6d 	.word	0x0800ac6d
 800ac4c:	0800ac75 	.word	0x0800ac75
 800ac50:	0800ac7d 	.word	0x0800ac7d
 800ac54:	0800ac93 	.word	0x0800ac93
 800ac58:	0800ac83 	.word	0x0800ac83
 800ac5c:	0800ac93 	.word	0x0800ac93
 800ac60:	0800ac93 	.word	0x0800ac93
 800ac64:	0800ac93 	.word	0x0800ac93
 800ac68:	0800ac8b 	.word	0x0800ac8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac6c:	f7fd f99e 	bl	8007fac <HAL_RCC_GetPCLK1Freq>
 800ac70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ac72:	e014      	b.n	800ac9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac74:	f7fd f9b0 	bl	8007fd8 <HAL_RCC_GetPCLK2Freq>
 800ac78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ac7a:	e010      	b.n	800ac9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac7c:	4b1a      	ldr	r3, [pc, #104]	@ (800ace8 <UART_SetConfig+0x5c0>)
 800ac7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ac80:	e00d      	b.n	800ac9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac82:	f7fd f925 	bl	8007ed0 <HAL_RCC_GetSysClockFreq>
 800ac86:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ac88:	e009      	b.n	800ac9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ac90:	e005      	b.n	800ac9e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800ac92:	2300      	movs	r3, #0
 800ac94:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ac9c:	bf00      	nop
    }

    if (pclk != 0U)
 800ac9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d028      	beq.n	800acf6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aca8:	4a10      	ldr	r2, [pc, #64]	@ (800acec <UART_SetConfig+0x5c4>)
 800acaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acae:	461a      	mov	r2, r3
 800acb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acb2:	fbb3 f2f2 	udiv	r2, r3, r2
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	085b      	lsrs	r3, r3, #1
 800acbc:	441a      	add	r2, r3
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800acc6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800acc8:	6a3b      	ldr	r3, [r7, #32]
 800acca:	2b0f      	cmp	r3, #15
 800accc:	d910      	bls.n	800acf0 <UART_SetConfig+0x5c8>
 800acce:	6a3b      	ldr	r3, [r7, #32]
 800acd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acd4:	d20c      	bcs.n	800acf0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800acd6:	6a3b      	ldr	r3, [r7, #32]
 800acd8:	b29a      	uxth	r2, r3
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	60da      	str	r2, [r3, #12]
 800ace0:	e009      	b.n	800acf6 <UART_SetConfig+0x5ce>
 800ace2:	bf00      	nop
 800ace4:	40008000 	.word	0x40008000
 800ace8:	00f42400 	.word	0x00f42400
 800acec:	08010b5c 	.word	0x08010b5c
      }
      else
      {
        ret = HAL_ERROR;
 800acf0:	2301      	movs	r3, #1
 800acf2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	2201      	movs	r2, #1
 800acfa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	2201      	movs	r2, #1
 800ad02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ad12:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3730      	adds	r7, #48	@ 0x30
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ad20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b083      	sub	sp, #12
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad2c:	f003 0308 	and.w	r3, r3, #8
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d00a      	beq.n	800ad4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	430a      	orrs	r2, r1
 800ad48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad4e:	f003 0301 	and.w	r3, r3, #1
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d00a      	beq.n	800ad6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	430a      	orrs	r2, r1
 800ad6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad70:	f003 0302 	and.w	r3, r3, #2
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d00a      	beq.n	800ad8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	430a      	orrs	r2, r1
 800ad8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad92:	f003 0304 	and.w	r3, r3, #4
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d00a      	beq.n	800adb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	430a      	orrs	r2, r1
 800adae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adb4:	f003 0310 	and.w	r3, r3, #16
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d00a      	beq.n	800add2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	689b      	ldr	r3, [r3, #8]
 800adc2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	430a      	orrs	r2, r1
 800add0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800add6:	f003 0320 	and.w	r3, r3, #32
 800adda:	2b00      	cmp	r3, #0
 800addc:	d00a      	beq.n	800adf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	689b      	ldr	r3, [r3, #8]
 800ade4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	430a      	orrs	r2, r1
 800adf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d01a      	beq.n	800ae36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	430a      	orrs	r2, r1
 800ae14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae1e:	d10a      	bne.n	800ae36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	430a      	orrs	r2, r1
 800ae34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d00a      	beq.n	800ae58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	430a      	orrs	r2, r1
 800ae56:	605a      	str	r2, [r3, #4]
  }
}
 800ae58:	bf00      	nop
 800ae5a:	370c      	adds	r7, #12
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b098      	sub	sp, #96	@ 0x60
 800ae68:	af02      	add	r7, sp, #8
 800ae6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae74:	f7f9 f892 	bl	8003f9c <HAL_GetTick>
 800ae78:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f003 0308 	and.w	r3, r3, #8
 800ae84:	2b08      	cmp	r3, #8
 800ae86:	d12f      	bne.n	800aee8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ae8c:	9300      	str	r3, [sp, #0]
 800ae8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae90:	2200      	movs	r2, #0
 800ae92:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 f88e 	bl	800afb8 <UART_WaitOnFlagUntilTimeout>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d022      	beq.n	800aee8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeaa:	e853 3f00 	ldrex	r3, [r3]
 800aeae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aeb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aeb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aeb6:	653b      	str	r3, [r7, #80]	@ 0x50
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	461a      	mov	r2, r3
 800aebe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aec0:	647b      	str	r3, [r7, #68]	@ 0x44
 800aec2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aec6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aec8:	e841 2300 	strex	r3, r2, [r1]
 800aecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d1e6      	bne.n	800aea2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2220      	movs	r2, #32
 800aed8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aee4:	2303      	movs	r3, #3
 800aee6:	e063      	b.n	800afb0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f003 0304 	and.w	r3, r3, #4
 800aef2:	2b04      	cmp	r3, #4
 800aef4:	d149      	bne.n	800af8a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aef6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aefa:	9300      	str	r3, [sp, #0]
 800aefc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aefe:	2200      	movs	r2, #0
 800af00:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f000 f857 	bl	800afb8 <UART_WaitOnFlagUntilTimeout>
 800af0a:	4603      	mov	r3, r0
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d03c      	beq.n	800af8a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af18:	e853 3f00 	ldrex	r3, [r3]
 800af1c:	623b      	str	r3, [r7, #32]
   return(result);
 800af1e:	6a3b      	ldr	r3, [r7, #32]
 800af20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	461a      	mov	r2, r3
 800af2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af2e:	633b      	str	r3, [r7, #48]	@ 0x30
 800af30:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af36:	e841 2300 	strex	r3, r2, [r1]
 800af3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d1e6      	bne.n	800af10 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	3308      	adds	r3, #8
 800af48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	e853 3f00 	ldrex	r3, [r3]
 800af50:	60fb      	str	r3, [r7, #12]
   return(result);
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f023 0301 	bic.w	r3, r3, #1
 800af58:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	3308      	adds	r3, #8
 800af60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af62:	61fa      	str	r2, [r7, #28]
 800af64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af66:	69b9      	ldr	r1, [r7, #24]
 800af68:	69fa      	ldr	r2, [r7, #28]
 800af6a:	e841 2300 	strex	r3, r2, [r1]
 800af6e:	617b      	str	r3, [r7, #20]
   return(result);
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d1e5      	bne.n	800af42 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2220      	movs	r2, #32
 800af7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2200      	movs	r2, #0
 800af82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af86:	2303      	movs	r3, #3
 800af88:	e012      	b.n	800afb0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2220      	movs	r2, #32
 800af8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2220      	movs	r2, #32
 800af96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2200      	movs	r2, #0
 800af9e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2200      	movs	r2, #0
 800afa4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800afae:	2300      	movs	r3, #0
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3758      	adds	r7, #88	@ 0x58
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	60f8      	str	r0, [r7, #12]
 800afc0:	60b9      	str	r1, [r7, #8]
 800afc2:	603b      	str	r3, [r7, #0]
 800afc4:	4613      	mov	r3, r2
 800afc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afc8:	e04f      	b.n	800b06a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afca:	69bb      	ldr	r3, [r7, #24]
 800afcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afd0:	d04b      	beq.n	800b06a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afd2:	f7f8 ffe3 	bl	8003f9c <HAL_GetTick>
 800afd6:	4602      	mov	r2, r0
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	1ad3      	subs	r3, r2, r3
 800afdc:	69ba      	ldr	r2, [r7, #24]
 800afde:	429a      	cmp	r2, r3
 800afe0:	d302      	bcc.n	800afe8 <UART_WaitOnFlagUntilTimeout+0x30>
 800afe2:	69bb      	ldr	r3, [r7, #24]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d101      	bne.n	800afec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800afe8:	2303      	movs	r3, #3
 800afea:	e04e      	b.n	800b08a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f003 0304 	and.w	r3, r3, #4
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d037      	beq.n	800b06a <UART_WaitOnFlagUntilTimeout+0xb2>
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	2b80      	cmp	r3, #128	@ 0x80
 800affe:	d034      	beq.n	800b06a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	2b40      	cmp	r3, #64	@ 0x40
 800b004:	d031      	beq.n	800b06a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	69db      	ldr	r3, [r3, #28]
 800b00c:	f003 0308 	and.w	r3, r3, #8
 800b010:	2b08      	cmp	r3, #8
 800b012:	d110      	bne.n	800b036 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	2208      	movs	r2, #8
 800b01a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b01c:	68f8      	ldr	r0, [r7, #12]
 800b01e:	f000 f95b 	bl	800b2d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2208      	movs	r2, #8
 800b026:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2200      	movs	r2, #0
 800b02e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b032:	2301      	movs	r3, #1
 800b034:	e029      	b.n	800b08a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	69db      	ldr	r3, [r3, #28]
 800b03c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b040:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b044:	d111      	bne.n	800b06a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b04e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b050:	68f8      	ldr	r0, [r7, #12]
 800b052:	f000 f941 	bl	800b2d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2220      	movs	r2, #32
 800b05a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2200      	movs	r2, #0
 800b062:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b066:	2303      	movs	r3, #3
 800b068:	e00f      	b.n	800b08a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	69da      	ldr	r2, [r3, #28]
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	4013      	ands	r3, r2
 800b074:	68ba      	ldr	r2, [r7, #8]
 800b076:	429a      	cmp	r2, r3
 800b078:	bf0c      	ite	eq
 800b07a:	2301      	moveq	r3, #1
 800b07c:	2300      	movne	r3, #0
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	461a      	mov	r2, r3
 800b082:	79fb      	ldrb	r3, [r7, #7]
 800b084:	429a      	cmp	r2, r3
 800b086:	d0a0      	beq.n	800afca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b088:	2300      	movs	r3, #0
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3710      	adds	r7, #16
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
	...

0800b094 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b094:	b480      	push	{r7}
 800b096:	b0a3      	sub	sp, #140	@ 0x8c
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	4613      	mov	r3, r2
 800b0a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	68ba      	ldr	r2, [r7, #8]
 800b0a6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	88fa      	ldrh	r2, [r7, #6]
 800b0ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	88fa      	ldrh	r2, [r7, #6]
 800b0b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	689b      	ldr	r3, [r3, #8]
 800b0c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0c6:	d10e      	bne.n	800b0e6 <UART_Start_Receive_IT+0x52>
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	691b      	ldr	r3, [r3, #16]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d105      	bne.n	800b0dc <UART_Start_Receive_IT+0x48>
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b0d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b0da:	e02d      	b.n	800b138 <UART_Start_Receive_IT+0xa4>
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	22ff      	movs	r2, #255	@ 0xff
 800b0e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b0e4:	e028      	b.n	800b138 <UART_Start_Receive_IT+0xa4>
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	689b      	ldr	r3, [r3, #8]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d10d      	bne.n	800b10a <UART_Start_Receive_IT+0x76>
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	691b      	ldr	r3, [r3, #16]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d104      	bne.n	800b100 <UART_Start_Receive_IT+0x6c>
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	22ff      	movs	r2, #255	@ 0xff
 800b0fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b0fe:	e01b      	b.n	800b138 <UART_Start_Receive_IT+0xa4>
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	227f      	movs	r2, #127	@ 0x7f
 800b104:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b108:	e016      	b.n	800b138 <UART_Start_Receive_IT+0xa4>
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	689b      	ldr	r3, [r3, #8]
 800b10e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b112:	d10d      	bne.n	800b130 <UART_Start_Receive_IT+0x9c>
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	691b      	ldr	r3, [r3, #16]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d104      	bne.n	800b126 <UART_Start_Receive_IT+0x92>
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	227f      	movs	r2, #127	@ 0x7f
 800b120:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b124:	e008      	b.n	800b138 <UART_Start_Receive_IT+0xa4>
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	223f      	movs	r2, #63	@ 0x3f
 800b12a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b12e:	e003      	b.n	800b138 <UART_Start_Receive_IT+0xa4>
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	2200      	movs	r2, #0
 800b134:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	2200      	movs	r2, #0
 800b13c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2222      	movs	r2, #34	@ 0x22
 800b144:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	3308      	adds	r3, #8
 800b14e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b150:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b152:	e853 3f00 	ldrex	r3, [r3]
 800b156:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b158:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b15a:	f043 0301 	orr.w	r3, r3, #1
 800b15e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	3308      	adds	r3, #8
 800b168:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b16c:	673a      	str	r2, [r7, #112]	@ 0x70
 800b16e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b170:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b172:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b174:	e841 2300 	strex	r3, r2, [r1]
 800b178:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800b17a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d1e3      	bne.n	800b148 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b184:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b188:	d14f      	bne.n	800b22a <UART_Start_Receive_IT+0x196>
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b190:	88fa      	ldrh	r2, [r7, #6]
 800b192:	429a      	cmp	r2, r3
 800b194:	d349      	bcc.n	800b22a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b19e:	d107      	bne.n	800b1b0 <UART_Start_Receive_IT+0x11c>
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	691b      	ldr	r3, [r3, #16]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d103      	bne.n	800b1b0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	4a47      	ldr	r2, [pc, #284]	@ (800b2c8 <UART_Start_Receive_IT+0x234>)
 800b1ac:	675a      	str	r2, [r3, #116]	@ 0x74
 800b1ae:	e002      	b.n	800b1b6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	4a46      	ldr	r2, [pc, #280]	@ (800b2cc <UART_Start_Receive_IT+0x238>)
 800b1b4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	691b      	ldr	r3, [r3, #16]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d01a      	beq.n	800b1f4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1c6:	e853 3f00 	ldrex	r3, [r3]
 800b1ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b1cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b1d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	461a      	mov	r2, r3
 800b1dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b1e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b1e2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b1e6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b1e8:	e841 2300 	strex	r3, r2, [r1]
 800b1ec:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800b1ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d1e4      	bne.n	800b1be <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	3308      	adds	r3, #8
 800b1fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1fe:	e853 3f00 	ldrex	r3, [r3]
 800b202:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b20a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	3308      	adds	r3, #8
 800b212:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b214:	64ba      	str	r2, [r7, #72]	@ 0x48
 800b216:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b218:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b21a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b21c:	e841 2300 	strex	r3, r2, [r1]
 800b220:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b222:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b224:	2b00      	cmp	r3, #0
 800b226:	d1e5      	bne.n	800b1f4 <UART_Start_Receive_IT+0x160>
 800b228:	e046      	b.n	800b2b8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	689b      	ldr	r3, [r3, #8]
 800b22e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b232:	d107      	bne.n	800b244 <UART_Start_Receive_IT+0x1b0>
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	691b      	ldr	r3, [r3, #16]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d103      	bne.n	800b244 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	4a24      	ldr	r2, [pc, #144]	@ (800b2d0 <UART_Start_Receive_IT+0x23c>)
 800b240:	675a      	str	r2, [r3, #116]	@ 0x74
 800b242:	e002      	b.n	800b24a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	4a23      	ldr	r2, [pc, #140]	@ (800b2d4 <UART_Start_Receive_IT+0x240>)
 800b248:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	691b      	ldr	r3, [r3, #16]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d019      	beq.n	800b286 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b25a:	e853 3f00 	ldrex	r3, [r3]
 800b25e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b262:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800b266:	677b      	str	r3, [r7, #116]	@ 0x74
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	461a      	mov	r2, r3
 800b26e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b270:	637b      	str	r3, [r7, #52]	@ 0x34
 800b272:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b274:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b276:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b278:	e841 2300 	strex	r3, r2, [r1]
 800b27c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b27e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b280:	2b00      	cmp	r3, #0
 800b282:	d1e6      	bne.n	800b252 <UART_Start_Receive_IT+0x1be>
 800b284:	e018      	b.n	800b2b8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	e853 3f00 	ldrex	r3, [r3]
 800b292:	613b      	str	r3, [r7, #16]
   return(result);
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	f043 0320 	orr.w	r3, r3, #32
 800b29a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b2a4:	623b      	str	r3, [r7, #32]
 800b2a6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a8:	69f9      	ldr	r1, [r7, #28]
 800b2aa:	6a3a      	ldr	r2, [r7, #32]
 800b2ac:	e841 2300 	strex	r3, r2, [r1]
 800b2b0:	61bb      	str	r3, [r7, #24]
   return(result);
 800b2b2:	69bb      	ldr	r3, [r7, #24]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d1e6      	bne.n	800b286 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b2b8:	2300      	movs	r3, #0
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	378c      	adds	r7, #140	@ 0x8c
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr
 800b2c6:	bf00      	nop
 800b2c8:	0800baf5 	.word	0x0800baf5
 800b2cc:	0800b791 	.word	0x0800b791
 800b2d0:	0800b5d9 	.word	0x0800b5d9
 800b2d4:	0800b421 	.word	0x0800b421

0800b2d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b095      	sub	sp, #84	@ 0x54
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2e8:	e853 3f00 	ldrex	r3, [r3]
 800b2ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b2ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b2f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2fe:	643b      	str	r3, [r7, #64]	@ 0x40
 800b300:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b302:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b304:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b306:	e841 2300 	strex	r3, r2, [r1]
 800b30a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d1e6      	bne.n	800b2e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	3308      	adds	r3, #8
 800b318:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b31a:	6a3b      	ldr	r3, [r7, #32]
 800b31c:	e853 3f00 	ldrex	r3, [r3]
 800b320:	61fb      	str	r3, [r7, #28]
   return(result);
 800b322:	69fb      	ldr	r3, [r7, #28]
 800b324:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b328:	f023 0301 	bic.w	r3, r3, #1
 800b32c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	3308      	adds	r3, #8
 800b334:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b336:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b338:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b33a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b33c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b33e:	e841 2300 	strex	r3, r2, [r1]
 800b342:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b346:	2b00      	cmp	r3, #0
 800b348:	d1e3      	bne.n	800b312 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b34e:	2b01      	cmp	r3, #1
 800b350:	d118      	bne.n	800b384 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	e853 3f00 	ldrex	r3, [r3]
 800b35e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	f023 0310 	bic.w	r3, r3, #16
 800b366:	647b      	str	r3, [r7, #68]	@ 0x44
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	461a      	mov	r2, r3
 800b36e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b370:	61bb      	str	r3, [r7, #24]
 800b372:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b374:	6979      	ldr	r1, [r7, #20]
 800b376:	69ba      	ldr	r2, [r7, #24]
 800b378:	e841 2300 	strex	r3, r2, [r1]
 800b37c:	613b      	str	r3, [r7, #16]
   return(result);
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d1e6      	bne.n	800b352 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2220      	movs	r2, #32
 800b388:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2200      	movs	r2, #0
 800b390:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2200      	movs	r2, #0
 800b396:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b398:	bf00      	nop
 800b39a:	3754      	adds	r7, #84	@ 0x54
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b3ba:	68f8      	ldr	r0, [r7, #12]
 800b3bc:	f7ff f99e 	bl	800a6fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3c0:	bf00      	nop
 800b3c2:	3710      	adds	r7, #16
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b088      	sub	sp, #32
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	e853 3f00 	ldrex	r3, [r3]
 800b3dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3e4:	61fb      	str	r3, [r7, #28]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	69fb      	ldr	r3, [r7, #28]
 800b3ee:	61bb      	str	r3, [r7, #24]
 800b3f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f2:	6979      	ldr	r1, [r7, #20]
 800b3f4:	69ba      	ldr	r2, [r7, #24]
 800b3f6:	e841 2300 	strex	r3, r2, [r1]
 800b3fa:	613b      	str	r3, [r7, #16]
   return(result);
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d1e6      	bne.n	800b3d0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2220      	movs	r2, #32
 800b406:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2200      	movs	r2, #0
 800b40e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f7ff f969 	bl	800a6e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b416:	bf00      	nop
 800b418:	3720      	adds	r7, #32
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
	...

0800b420 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b09c      	sub	sp, #112	@ 0x70
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b42e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b438:	2b22      	cmp	r3, #34	@ 0x22
 800b43a:	f040 80be 	bne.w	800b5ba <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b444:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b448:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b44c:	b2d9      	uxtb	r1, r3
 800b44e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b452:	b2da      	uxtb	r2, r3
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b458:	400a      	ands	r2, r1
 800b45a:	b2d2      	uxtb	r2, r2
 800b45c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b462:	1c5a      	adds	r2, r3, #1
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b46e:	b29b      	uxth	r3, r3
 800b470:	3b01      	subs	r3, #1
 800b472:	b29a      	uxth	r2, r3
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b480:	b29b      	uxth	r3, r3
 800b482:	2b00      	cmp	r3, #0
 800b484:	f040 80a1 	bne.w	800b5ca <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b48e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b490:	e853 3f00 	ldrex	r3, [r3]
 800b494:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b496:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b498:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b49c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b4a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b4a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b4ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b4ae:	e841 2300 	strex	r3, r2, [r1]
 800b4b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b4b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d1e6      	bne.n	800b488 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	3308      	adds	r3, #8
 800b4c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c4:	e853 3f00 	ldrex	r3, [r3]
 800b4c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b4ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4cc:	f023 0301 	bic.w	r3, r3, #1
 800b4d0:	667b      	str	r3, [r7, #100]	@ 0x64
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	3308      	adds	r3, #8
 800b4d8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b4da:	647a      	str	r2, [r7, #68]	@ 0x44
 800b4dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b4e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b4e2:	e841 2300 	strex	r3, r2, [r1]
 800b4e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b4e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d1e5      	bne.n	800b4ba <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2220      	movs	r2, #32
 800b4f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a33      	ldr	r2, [pc, #204]	@ (800b5d4 <UART_RxISR_8BIT+0x1b4>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d01f      	beq.n	800b54c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b516:	2b00      	cmp	r3, #0
 800b518:	d018      	beq.n	800b54c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b522:	e853 3f00 	ldrex	r3, [r3]
 800b526:	623b      	str	r3, [r7, #32]
   return(result);
 800b528:	6a3b      	ldr	r3, [r7, #32]
 800b52a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b52e:	663b      	str	r3, [r7, #96]	@ 0x60
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	461a      	mov	r2, r3
 800b536:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b538:	633b      	str	r3, [r7, #48]	@ 0x30
 800b53a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b53c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b53e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b540:	e841 2300 	strex	r3, r2, [r1]
 800b544:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d1e6      	bne.n	800b51a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b550:	2b01      	cmp	r3, #1
 800b552:	d12e      	bne.n	800b5b2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2200      	movs	r2, #0
 800b558:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	e853 3f00 	ldrex	r3, [r3]
 800b566:	60fb      	str	r3, [r7, #12]
   return(result);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f023 0310 	bic.w	r3, r3, #16
 800b56e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	461a      	mov	r2, r3
 800b576:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b578:	61fb      	str	r3, [r7, #28]
 800b57a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b57c:	69b9      	ldr	r1, [r7, #24]
 800b57e:	69fa      	ldr	r2, [r7, #28]
 800b580:	e841 2300 	strex	r3, r2, [r1]
 800b584:	617b      	str	r3, [r7, #20]
   return(result);
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d1e6      	bne.n	800b55a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	69db      	ldr	r3, [r3, #28]
 800b592:	f003 0310 	and.w	r3, r3, #16
 800b596:	2b10      	cmp	r3, #16
 800b598:	d103      	bne.n	800b5a2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	2210      	movs	r2, #16
 800b5a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f7ff f8b0 	bl	800a710 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b5b0:	e00b      	b.n	800b5ca <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f7f5 ff86 	bl	80014c4 <HAL_UART_RxCpltCallback>
}
 800b5b8:	e007      	b.n	800b5ca <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	699a      	ldr	r2, [r3, #24]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f042 0208 	orr.w	r2, r2, #8
 800b5c8:	619a      	str	r2, [r3, #24]
}
 800b5ca:	bf00      	nop
 800b5cc:	3770      	adds	r7, #112	@ 0x70
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	40008000 	.word	0x40008000

0800b5d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b09c      	sub	sp, #112	@ 0x70
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b5e6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b5f0:	2b22      	cmp	r3, #34	@ 0x22
 800b5f2:	f040 80be 	bne.w	800b772 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b604:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b606:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800b60a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b60e:	4013      	ands	r3, r2
 800b610:	b29a      	uxth	r2, r3
 800b612:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b614:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b61a:	1c9a      	adds	r2, r3, #2
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b626:	b29b      	uxth	r3, r3
 800b628:	3b01      	subs	r3, #1
 800b62a:	b29a      	uxth	r2, r3
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b638:	b29b      	uxth	r3, r3
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	f040 80a1 	bne.w	800b782 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b646:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b648:	e853 3f00 	ldrex	r3, [r3]
 800b64c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b64e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b650:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b654:	667b      	str	r3, [r7, #100]	@ 0x64
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	461a      	mov	r2, r3
 800b65c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b65e:	657b      	str	r3, [r7, #84]	@ 0x54
 800b660:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b662:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b664:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b666:	e841 2300 	strex	r3, r2, [r1]
 800b66a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b66c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d1e6      	bne.n	800b640 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	3308      	adds	r3, #8
 800b678:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b67a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b67c:	e853 3f00 	ldrex	r3, [r3]
 800b680:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b684:	f023 0301 	bic.w	r3, r3, #1
 800b688:	663b      	str	r3, [r7, #96]	@ 0x60
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	3308      	adds	r3, #8
 800b690:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b692:	643a      	str	r2, [r7, #64]	@ 0x40
 800b694:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b696:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b698:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b69a:	e841 2300 	strex	r3, r2, [r1]
 800b69e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b6a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d1e5      	bne.n	800b672 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2220      	movs	r2, #32
 800b6aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4a33      	ldr	r2, [pc, #204]	@ (800b78c <UART_RxISR_16BIT+0x1b4>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d01f      	beq.n	800b704 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d018      	beq.n	800b704 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6d8:	6a3b      	ldr	r3, [r7, #32]
 800b6da:	e853 3f00 	ldrex	r3, [r3]
 800b6de:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6e0:	69fb      	ldr	r3, [r7, #28]
 800b6e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b6e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b6f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b6f2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b6f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b6f8:	e841 2300 	strex	r3, r2, [r1]
 800b6fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b6fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b700:	2b00      	cmp	r3, #0
 800b702:	d1e6      	bne.n	800b6d2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d12e      	bne.n	800b76a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	e853 3f00 	ldrex	r3, [r3]
 800b71e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	f023 0310 	bic.w	r3, r3, #16
 800b726:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	461a      	mov	r2, r3
 800b72e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b730:	61bb      	str	r3, [r7, #24]
 800b732:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b734:	6979      	ldr	r1, [r7, #20]
 800b736:	69ba      	ldr	r2, [r7, #24]
 800b738:	e841 2300 	strex	r3, r2, [r1]
 800b73c:	613b      	str	r3, [r7, #16]
   return(result);
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d1e6      	bne.n	800b712 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	69db      	ldr	r3, [r3, #28]
 800b74a:	f003 0310 	and.w	r3, r3, #16
 800b74e:	2b10      	cmp	r3, #16
 800b750:	d103      	bne.n	800b75a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	2210      	movs	r2, #16
 800b758:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b760:	4619      	mov	r1, r3
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f7fe ffd4 	bl	800a710 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b768:	e00b      	b.n	800b782 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f7f5 feaa 	bl	80014c4 <HAL_UART_RxCpltCallback>
}
 800b770:	e007      	b.n	800b782 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	699a      	ldr	r2, [r3, #24]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f042 0208 	orr.w	r2, r2, #8
 800b780:	619a      	str	r2, [r3, #24]
}
 800b782:	bf00      	nop
 800b784:	3770      	adds	r7, #112	@ 0x70
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop
 800b78c:	40008000 	.word	0x40008000

0800b790 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b0ac      	sub	sp, #176	@ 0xb0
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b79e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	69db      	ldr	r3, [r3, #28]
 800b7a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	689b      	ldr	r3, [r3, #8]
 800b7bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b7c6:	2b22      	cmp	r3, #34	@ 0x22
 800b7c8:	f040 8183 	bne.w	800bad2 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b7d2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b7d6:	e126      	b.n	800ba26 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7de:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b7e2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800b7e6:	b2d9      	uxtb	r1, r3
 800b7e8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800b7ec:	b2da      	uxtb	r2, r3
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7f2:	400a      	ands	r2, r1
 800b7f4:	b2d2      	uxtb	r2, r2
 800b7f6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7fc:	1c5a      	adds	r2, r3, #1
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b808:	b29b      	uxth	r3, r3
 800b80a:	3b01      	subs	r3, #1
 800b80c:	b29a      	uxth	r2, r3
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	69db      	ldr	r3, [r3, #28]
 800b81a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b81e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b822:	f003 0307 	and.w	r3, r3, #7
 800b826:	2b00      	cmp	r3, #0
 800b828:	d053      	beq.n	800b8d2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b82a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b82e:	f003 0301 	and.w	r3, r3, #1
 800b832:	2b00      	cmp	r3, #0
 800b834:	d011      	beq.n	800b85a <UART_RxISR_8BIT_FIFOEN+0xca>
 800b836:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b83a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d00b      	beq.n	800b85a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2201      	movs	r2, #1
 800b848:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b850:	f043 0201 	orr.w	r2, r3, #1
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b85a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b85e:	f003 0302 	and.w	r3, r3, #2
 800b862:	2b00      	cmp	r3, #0
 800b864:	d011      	beq.n	800b88a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b866:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b86a:	f003 0301 	and.w	r3, r3, #1
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d00b      	beq.n	800b88a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	2202      	movs	r2, #2
 800b878:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b880:	f043 0204 	orr.w	r2, r3, #4
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b88a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b88e:	f003 0304 	and.w	r3, r3, #4
 800b892:	2b00      	cmp	r3, #0
 800b894:	d011      	beq.n	800b8ba <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b896:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b89a:	f003 0301 	and.w	r3, r3, #1
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d00b      	beq.n	800b8ba <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2204      	movs	r2, #4
 800b8a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8b0:	f043 0202 	orr.w	r2, r3, #2
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d006      	beq.n	800b8d2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f7fe ff19 	bl	800a6fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b8d8:	b29b      	uxth	r3, r3
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	f040 80a3 	bne.w	800ba26 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b8e8:	e853 3f00 	ldrex	r3, [r3]
 800b8ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800b8ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b8f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b902:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b904:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b906:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800b908:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b90a:	e841 2300 	strex	r3, r2, [r1]
 800b90e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800b910:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b912:	2b00      	cmp	r3, #0
 800b914:	d1e4      	bne.n	800b8e0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	3308      	adds	r3, #8
 800b91c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b91e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b920:	e853 3f00 	ldrex	r3, [r3]
 800b924:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800b926:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b928:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b92c:	f023 0301 	bic.w	r3, r3, #1
 800b930:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	3308      	adds	r3, #8
 800b93a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b93e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b940:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b942:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b944:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b946:	e841 2300 	strex	r3, r2, [r1]
 800b94a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b94c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d1e1      	bne.n	800b916 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2220      	movs	r2, #32
 800b956:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2200      	movs	r2, #0
 800b95e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2200      	movs	r2, #0
 800b964:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	4a60      	ldr	r2, [pc, #384]	@ (800baec <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d021      	beq.n	800b9b4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d01a      	beq.n	800b9b4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b984:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b986:	e853 3f00 	ldrex	r3, [r3]
 800b98a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b98c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b98e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b992:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	461a      	mov	r2, r3
 800b99c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b9a0:	657b      	str	r3, [r7, #84]	@ 0x54
 800b9a2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9a4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b9a6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b9a8:	e841 2300 	strex	r3, r2, [r1]
 800b9ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b9ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d1e4      	bne.n	800b97e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d130      	bne.n	800ba1e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9ca:	e853 3f00 	ldrex	r3, [r3]
 800b9ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b9d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9d2:	f023 0310 	bic.w	r3, r3, #16
 800b9d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	461a      	mov	r2, r3
 800b9e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b9e4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b9e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b9ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b9ec:	e841 2300 	strex	r3, r2, [r1]
 800b9f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b9f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d1e4      	bne.n	800b9c2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	69db      	ldr	r3, [r3, #28]
 800b9fe:	f003 0310 	and.w	r3, r3, #16
 800ba02:	2b10      	cmp	r3, #16
 800ba04:	d103      	bne.n	800ba0e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	2210      	movs	r2, #16
 800ba0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ba14:	4619      	mov	r1, r3
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f7fe fe7a 	bl	800a710 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800ba1c:	e00e      	b.n	800ba3c <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f7f5 fd50 	bl	80014c4 <HAL_UART_RxCpltCallback>
        break;
 800ba24:	e00a      	b.n	800ba3c <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ba26:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d006      	beq.n	800ba3c <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800ba2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ba32:	f003 0320 	and.w	r3, r3, #32
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	f47f aece 	bne.w	800b7d8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ba42:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ba46:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d049      	beq.n	800bae2 <UART_RxISR_8BIT_FIFOEN+0x352>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ba54:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d242      	bcs.n	800bae2 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	3308      	adds	r3, #8
 800ba62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba64:	6a3b      	ldr	r3, [r7, #32]
 800ba66:	e853 3f00 	ldrex	r3, [r3]
 800ba6a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba6c:	69fb      	ldr	r3, [r7, #28]
 800ba6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ba72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	3308      	adds	r3, #8
 800ba7c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ba80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba88:	e841 2300 	strex	r3, r2, [r1]
 800ba8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d1e3      	bne.n	800ba5c <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	4a16      	ldr	r2, [pc, #88]	@ (800baf0 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800ba98:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	e853 3f00 	ldrex	r3, [r3]
 800baa6:	60bb      	str	r3, [r7, #8]
   return(result);
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	f043 0320 	orr.w	r3, r3, #32
 800baae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	461a      	mov	r2, r3
 800bab8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800babc:	61bb      	str	r3, [r7, #24]
 800babe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bac0:	6979      	ldr	r1, [r7, #20]
 800bac2:	69ba      	ldr	r2, [r7, #24]
 800bac4:	e841 2300 	strex	r3, r2, [r1]
 800bac8:	613b      	str	r3, [r7, #16]
   return(result);
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d1e4      	bne.n	800ba9a <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bad0:	e007      	b.n	800bae2 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	699a      	ldr	r2, [r3, #24]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f042 0208 	orr.w	r2, r2, #8
 800bae0:	619a      	str	r2, [r3, #24]
}
 800bae2:	bf00      	nop
 800bae4:	37b0      	adds	r7, #176	@ 0xb0
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	40008000 	.word	0x40008000
 800baf0:	0800b421 	.word	0x0800b421

0800baf4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b0ae      	sub	sp, #184	@ 0xb8
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bb02:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	69db      	ldr	r3, [r3, #28]
 800bb0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	689b      	ldr	r3, [r3, #8]
 800bb20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bb2a:	2b22      	cmp	r3, #34	@ 0x22
 800bb2c:	f040 8187 	bne.w	800be3e <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800bb36:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bb3a:	e12a      	b.n	800bd92 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb42:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800bb4e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800bb52:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800bb56:	4013      	ands	r3, r2
 800bb58:	b29a      	uxth	r2, r3
 800bb5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bb5e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb64:	1c9a      	adds	r2, r3, #2
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	3b01      	subs	r3, #1
 800bb74:	b29a      	uxth	r2, r3
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	69db      	ldr	r3, [r3, #28]
 800bb82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800bb86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bb8a:	f003 0307 	and.w	r3, r3, #7
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d053      	beq.n	800bc3a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bb92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bb96:	f003 0301 	and.w	r3, r3, #1
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d011      	beq.n	800bbc2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800bb9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d00b      	beq.n	800bbc2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	2201      	movs	r2, #1
 800bbb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbb8:	f043 0201 	orr.w	r2, r3, #1
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bbc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bbc6:	f003 0302 	and.w	r3, r3, #2
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d011      	beq.n	800bbf2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800bbce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bbd2:	f003 0301 	and.w	r3, r3, #1
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d00b      	beq.n	800bbf2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	2202      	movs	r2, #2
 800bbe0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbe8:	f043 0204 	orr.w	r2, r3, #4
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bbf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bbf6:	f003 0304 	and.w	r3, r3, #4
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d011      	beq.n	800bc22 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800bbfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bc02:	f003 0301 	and.w	r3, r3, #1
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d00b      	beq.n	800bc22 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	2204      	movs	r2, #4
 800bc10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc18:	f043 0202 	orr.w	r2, r3, #2
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d006      	beq.n	800bc3a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f7fe fd65 	bl	800a6fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2200      	movs	r2, #0
 800bc36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	f040 80a5 	bne.w	800bd92 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bc50:	e853 3f00 	ldrex	r3, [r3]
 800bc54:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bc56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bc58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	461a      	mov	r2, r3
 800bc66:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bc6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bc6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc70:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bc72:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bc76:	e841 2300 	strex	r3, r2, [r1]
 800bc7a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bc7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d1e2      	bne.n	800bc48 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	3308      	adds	r3, #8
 800bc88:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc8c:	e853 3f00 	ldrex	r3, [r3]
 800bc90:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bc92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bc98:	f023 0301 	bic.w	r3, r3, #1
 800bc9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	3308      	adds	r3, #8
 800bca6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800bcaa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bcac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bcb0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bcb2:	e841 2300 	strex	r3, r2, [r1]
 800bcb6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bcb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d1e1      	bne.n	800bc82 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2220      	movs	r2, #32
 800bcc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4a60      	ldr	r2, [pc, #384]	@ (800be58 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d021      	beq.n	800bd20 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d01a      	beq.n	800bd20 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bcf2:	e853 3f00 	ldrex	r3, [r3]
 800bcf6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bcf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bcfa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bcfe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	461a      	mov	r2, r3
 800bd08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bd0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bd0e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bd12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bd14:	e841 2300 	strex	r3, r2, [r1]
 800bd18:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bd1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d1e4      	bne.n	800bcea <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd24:	2b01      	cmp	r3, #1
 800bd26:	d130      	bne.n	800bd8a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd36:	e853 3f00 	ldrex	r3, [r3]
 800bd3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bd3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd3e:	f023 0310 	bic.w	r3, r3, #16
 800bd42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bd50:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd52:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bd56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd58:	e841 2300 	strex	r3, r2, [r1]
 800bd5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bd5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d1e4      	bne.n	800bd2e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	69db      	ldr	r3, [r3, #28]
 800bd6a:	f003 0310 	and.w	r3, r3, #16
 800bd6e:	2b10      	cmp	r3, #16
 800bd70:	d103      	bne.n	800bd7a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	2210      	movs	r2, #16
 800bd78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bd80:	4619      	mov	r1, r3
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f7fe fcc4 	bl	800a710 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800bd88:	e00e      	b.n	800bda8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f7f5 fb9a 	bl	80014c4 <HAL_UART_RxCpltCallback>
        break;
 800bd90:	e00a      	b.n	800bda8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bd92:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d006      	beq.n	800bda8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800bd9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bd9e:	f003 0320 	and.w	r3, r3, #32
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	f47f aeca 	bne.w	800bb3c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bdae:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bdb2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d049      	beq.n	800be4e <UART_RxISR_16BIT_FIFOEN+0x35a>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800bdc0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d242      	bcs.n	800be4e <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	3308      	adds	r3, #8
 800bdce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdd2:	e853 3f00 	ldrex	r3, [r3]
 800bdd6:	623b      	str	r3, [r7, #32]
   return(result);
 800bdd8:	6a3b      	ldr	r3, [r7, #32]
 800bdda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bdde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	3308      	adds	r3, #8
 800bde8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800bdec:	633a      	str	r2, [r7, #48]	@ 0x30
 800bdee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdf0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bdf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bdf4:	e841 2300 	strex	r3, r2, [r1]
 800bdf8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bdfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d1e3      	bne.n	800bdc8 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	4a16      	ldr	r2, [pc, #88]	@ (800be5c <UART_RxISR_16BIT_FIFOEN+0x368>)
 800be04:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	e853 3f00 	ldrex	r3, [r3]
 800be12:	60fb      	str	r3, [r7, #12]
   return(result);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f043 0320 	orr.w	r3, r3, #32
 800be1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	461a      	mov	r2, r3
 800be24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800be28:	61fb      	str	r3, [r7, #28]
 800be2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be2c:	69b9      	ldr	r1, [r7, #24]
 800be2e:	69fa      	ldr	r2, [r7, #28]
 800be30:	e841 2300 	strex	r3, r2, [r1]
 800be34:	617b      	str	r3, [r7, #20]
   return(result);
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d1e4      	bne.n	800be06 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800be3c:	e007      	b.n	800be4e <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	699a      	ldr	r2, [r3, #24]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f042 0208 	orr.w	r2, r2, #8
 800be4c:	619a      	str	r2, [r3, #24]
}
 800be4e:	bf00      	nop
 800be50:	37b8      	adds	r7, #184	@ 0xb8
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
 800be56:	bf00      	nop
 800be58:	40008000 	.word	0x40008000
 800be5c:	0800b5d9 	.word	0x0800b5d9

0800be60 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800be60:	b480      	push	{r7}
 800be62:	b083      	sub	sp, #12
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800be68:	bf00      	nop
 800be6a:	370c      	adds	r7, #12
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr

0800be74 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800be74:	b480      	push	{r7}
 800be76:	b083      	sub	sp, #12
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800be7c:	bf00      	nop
 800be7e:	370c      	adds	r7, #12
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr

0800be88 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800be88:	b480      	push	{r7}
 800be8a:	b083      	sub	sp, #12
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800be90:	bf00      	nop
 800be92:	370c      	adds	r7, #12
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr

0800be9c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b085      	sub	sp, #20
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800beaa:	2b01      	cmp	r3, #1
 800beac:	d101      	bne.n	800beb2 <HAL_UARTEx_DisableFifoMode+0x16>
 800beae:	2302      	movs	r3, #2
 800beb0:	e027      	b.n	800bf02 <HAL_UARTEx_DisableFifoMode+0x66>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2201      	movs	r2, #1
 800beb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2224      	movs	r2, #36	@ 0x24
 800bebe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f022 0201 	bic.w	r2, r2, #1
 800bed8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bee0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2200      	movs	r2, #0
 800bee6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	68fa      	ldr	r2, [r7, #12]
 800beee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2220      	movs	r2, #32
 800bef4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bf00:	2300      	movs	r3, #0
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3714      	adds	r7, #20
 800bf06:	46bd      	mov	sp, r7
 800bf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0c:	4770      	bx	lr

0800bf0e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf0e:	b580      	push	{r7, lr}
 800bf10:	b084      	sub	sp, #16
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	6078      	str	r0, [r7, #4]
 800bf16:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bf1e:	2b01      	cmp	r3, #1
 800bf20:	d101      	bne.n	800bf26 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bf22:	2302      	movs	r3, #2
 800bf24:	e02d      	b.n	800bf82 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2201      	movs	r2, #1
 800bf2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2224      	movs	r2, #36	@ 0x24
 800bf32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	681a      	ldr	r2, [r3, #0]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f022 0201 	bic.w	r2, r2, #1
 800bf4c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	683a      	ldr	r2, [r7, #0]
 800bf5e:	430a      	orrs	r2, r1
 800bf60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f000 f850 	bl	800c008 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	68fa      	ldr	r2, [r7, #12]
 800bf6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2220      	movs	r2, #32
 800bf74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bf80:	2300      	movs	r3, #0
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3710      	adds	r7, #16
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}

0800bf8a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf8a:	b580      	push	{r7, lr}
 800bf8c:	b084      	sub	sp, #16
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
 800bf92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	d101      	bne.n	800bfa2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bf9e:	2302      	movs	r3, #2
 800bfa0:	e02d      	b.n	800bffe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2201      	movs	r2, #1
 800bfa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2224      	movs	r2, #36	@ 0x24
 800bfae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	681a      	ldr	r2, [r3, #0]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f022 0201 	bic.w	r2, r2, #1
 800bfc8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	689b      	ldr	r3, [r3, #8]
 800bfd0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	683a      	ldr	r2, [r7, #0]
 800bfda:	430a      	orrs	r2, r1
 800bfdc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f000 f812 	bl	800c008 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	68fa      	ldr	r2, [r7, #12]
 800bfea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2220      	movs	r2, #32
 800bff0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2200      	movs	r2, #0
 800bff8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bffc:	2300      	movs	r3, #0
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3710      	adds	r7, #16
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
	...

0800c008 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c008:	b480      	push	{r7}
 800c00a:	b085      	sub	sp, #20
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c014:	2b00      	cmp	r3, #0
 800c016:	d108      	bne.n	800c02a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2201      	movs	r2, #1
 800c01c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2201      	movs	r2, #1
 800c024:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c028:	e031      	b.n	800c08e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c02a:	2308      	movs	r3, #8
 800c02c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c02e:	2308      	movs	r3, #8
 800c030:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	689b      	ldr	r3, [r3, #8]
 800c038:	0e5b      	lsrs	r3, r3, #25
 800c03a:	b2db      	uxtb	r3, r3
 800c03c:	f003 0307 	and.w	r3, r3, #7
 800c040:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	689b      	ldr	r3, [r3, #8]
 800c048:	0f5b      	lsrs	r3, r3, #29
 800c04a:	b2db      	uxtb	r3, r3
 800c04c:	f003 0307 	and.w	r3, r3, #7
 800c050:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c052:	7bbb      	ldrb	r3, [r7, #14]
 800c054:	7b3a      	ldrb	r2, [r7, #12]
 800c056:	4911      	ldr	r1, [pc, #68]	@ (800c09c <UARTEx_SetNbDataToProcess+0x94>)
 800c058:	5c8a      	ldrb	r2, [r1, r2]
 800c05a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c05e:	7b3a      	ldrb	r2, [r7, #12]
 800c060:	490f      	ldr	r1, [pc, #60]	@ (800c0a0 <UARTEx_SetNbDataToProcess+0x98>)
 800c062:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c064:	fb93 f3f2 	sdiv	r3, r3, r2
 800c068:	b29a      	uxth	r2, r3
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c070:	7bfb      	ldrb	r3, [r7, #15]
 800c072:	7b7a      	ldrb	r2, [r7, #13]
 800c074:	4909      	ldr	r1, [pc, #36]	@ (800c09c <UARTEx_SetNbDataToProcess+0x94>)
 800c076:	5c8a      	ldrb	r2, [r1, r2]
 800c078:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c07c:	7b7a      	ldrb	r2, [r7, #13]
 800c07e:	4908      	ldr	r1, [pc, #32]	@ (800c0a0 <UARTEx_SetNbDataToProcess+0x98>)
 800c080:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c082:	fb93 f3f2 	sdiv	r3, r3, r2
 800c086:	b29a      	uxth	r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c08e:	bf00      	nop
 800c090:	3714      	adds	r7, #20
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr
 800c09a:	bf00      	nop
 800c09c:	08010b74 	.word	0x08010b74
 800c0a0:	08010b7c 	.word	0x08010b7c

0800c0a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b085      	sub	sp, #20
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c0b4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c0b8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	b29a      	uxth	r2, r3
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c0c4:	2300      	movs	r3, #0
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3714      	adds	r7, #20
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d0:	4770      	bx	lr

0800c0d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c0d2:	b480      	push	{r7}
 800c0d4:	b085      	sub	sp, #20
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c0da:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c0de:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800c0e6:	b29a      	uxth	r2, r3
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	b29b      	uxth	r3, r3
 800c0ec:	43db      	mvns	r3, r3
 800c0ee:	b29b      	uxth	r3, r3
 800c0f0:	4013      	ands	r3, r2
 800c0f2:	b29a      	uxth	r2, r3
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c0fa:	2300      	movs	r3, #0
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3714      	adds	r7, #20
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr

0800c108 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c108:	b480      	push	{r7}
 800c10a:	b085      	sub	sp, #20
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	60f8      	str	r0, [r7, #12]
 800c110:	1d3b      	adds	r3, r7, #4
 800c112:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	2201      	movs	r2, #1
 800c11a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2200      	movs	r2, #0
 800c122:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2200      	movs	r2, #0
 800c12a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2200      	movs	r2, #0
 800c132:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800c136:	2300      	movs	r3, #0
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3714      	adds	r7, #20
 800c13c:	46bd      	mov	sp, r7
 800c13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c142:	4770      	bx	lr

0800c144 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c144:	b480      	push	{r7}
 800c146:	b0a7      	sub	sp, #156	@ 0x9c
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800c14e:	2300      	movs	r3, #0
 800c150:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800c154:	687a      	ldr	r2, [r7, #4]
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	781b      	ldrb	r3, [r3, #0]
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	4413      	add	r3, r2
 800c15e:	881b      	ldrh	r3, [r3, #0]
 800c160:	b29b      	uxth	r3, r3
 800c162:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800c166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c16a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	78db      	ldrb	r3, [r3, #3]
 800c172:	2b03      	cmp	r3, #3
 800c174:	d81f      	bhi.n	800c1b6 <USB_ActivateEndpoint+0x72>
 800c176:	a201      	add	r2, pc, #4	@ (adr r2, 800c17c <USB_ActivateEndpoint+0x38>)
 800c178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c17c:	0800c18d 	.word	0x0800c18d
 800c180:	0800c1a9 	.word	0x0800c1a9
 800c184:	0800c1bf 	.word	0x0800c1bf
 800c188:	0800c19b 	.word	0x0800c19b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800c18c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800c190:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c194:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800c198:	e012      	b.n	800c1c0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800c19a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800c19e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800c1a2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800c1a6:	e00b      	b.n	800c1c0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800c1a8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800c1ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c1b0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800c1b4:	e004      	b.n	800c1c0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800c1bc:	e000      	b.n	800c1c0 <USB_ActivateEndpoint+0x7c>
      break;
 800c1be:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	441a      	add	r2, r3
 800c1ca:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800c1ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c1d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c1d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1de:	b29b      	uxth	r3, r3
 800c1e0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	009b      	lsls	r3, r3, #2
 800c1ea:	4413      	add	r3, r2
 800c1ec:	881b      	ldrh	r3, [r3, #0]
 800c1ee:	b29b      	uxth	r3, r3
 800c1f0:	b21b      	sxth	r3, r3
 800c1f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c1f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1fa:	b21a      	sxth	r2, r3
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	b21b      	sxth	r3, r3
 800c202:	4313      	orrs	r3, r2
 800c204:	b21b      	sxth	r3, r3
 800c206:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800c20a:	687a      	ldr	r2, [r7, #4]
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	441a      	add	r2, r3
 800c214:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800c218:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c21c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c220:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c228:	b29b      	uxth	r3, r3
 800c22a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	7b1b      	ldrb	r3, [r3, #12]
 800c230:	2b00      	cmp	r3, #0
 800c232:	f040 8180 	bne.w	800c536 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	785b      	ldrb	r3, [r3, #1]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	f000 8084 	beq.w	800c348 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	61bb      	str	r3, [r7, #24]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c24a:	b29b      	uxth	r3, r3
 800c24c:	461a      	mov	r2, r3
 800c24e:	69bb      	ldr	r3, [r7, #24]
 800c250:	4413      	add	r3, r2
 800c252:	61bb      	str	r3, [r7, #24]
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	00da      	lsls	r2, r3, #3
 800c25a:	69bb      	ldr	r3, [r7, #24]
 800c25c:	4413      	add	r3, r2
 800c25e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c262:	617b      	str	r3, [r7, #20]
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	88db      	ldrh	r3, [r3, #6]
 800c268:	085b      	lsrs	r3, r3, #1
 800c26a:	b29b      	uxth	r3, r3
 800c26c:	005b      	lsls	r3, r3, #1
 800c26e:	b29a      	uxth	r2, r3
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	009b      	lsls	r3, r3, #2
 800c27c:	4413      	add	r3, r2
 800c27e:	881b      	ldrh	r3, [r3, #0]
 800c280:	827b      	strh	r3, [r7, #18]
 800c282:	8a7b      	ldrh	r3, [r7, #18]
 800c284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d01b      	beq.n	800c2c4 <USB_ActivateEndpoint+0x180>
 800c28c:	687a      	ldr	r2, [r7, #4]
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	4413      	add	r3, r2
 800c296:	881b      	ldrh	r3, [r3, #0]
 800c298:	b29b      	uxth	r3, r3
 800c29a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c29e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2a2:	823b      	strh	r3, [r7, #16]
 800c2a4:	687a      	ldr	r2, [r7, #4]
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	781b      	ldrb	r3, [r3, #0]
 800c2aa:	009b      	lsls	r3, r3, #2
 800c2ac:	441a      	add	r2, r3
 800c2ae:	8a3b      	ldrh	r3, [r7, #16]
 800c2b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c2bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c2c0:	b29b      	uxth	r3, r3
 800c2c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	78db      	ldrb	r3, [r3, #3]
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	d020      	beq.n	800c30e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	009b      	lsls	r3, r3, #2
 800c2d4:	4413      	add	r3, r2
 800c2d6:	881b      	ldrh	r3, [r3, #0]
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c2de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c2e2:	81bb      	strh	r3, [r7, #12]
 800c2e4:	89bb      	ldrh	r3, [r7, #12]
 800c2e6:	f083 0320 	eor.w	r3, r3, #32
 800c2ea:	81bb      	strh	r3, [r7, #12]
 800c2ec:	687a      	ldr	r2, [r7, #4]
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	781b      	ldrb	r3, [r3, #0]
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	441a      	add	r2, r3
 800c2f6:	89bb      	ldrh	r3, [r7, #12]
 800c2f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c300:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c304:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c308:	b29b      	uxth	r3, r3
 800c30a:	8013      	strh	r3, [r2, #0]
 800c30c:	e3f9      	b.n	800cb02 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c30e:	687a      	ldr	r2, [r7, #4]
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	781b      	ldrb	r3, [r3, #0]
 800c314:	009b      	lsls	r3, r3, #2
 800c316:	4413      	add	r3, r2
 800c318:	881b      	ldrh	r3, [r3, #0]
 800c31a:	b29b      	uxth	r3, r3
 800c31c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c320:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c324:	81fb      	strh	r3, [r7, #14]
 800c326:	687a      	ldr	r2, [r7, #4]
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	781b      	ldrb	r3, [r3, #0]
 800c32c:	009b      	lsls	r3, r3, #2
 800c32e:	441a      	add	r2, r3
 800c330:	89fb      	ldrh	r3, [r7, #14]
 800c332:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c336:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c33a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c33e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c342:	b29b      	uxth	r3, r3
 800c344:	8013      	strh	r3, [r2, #0]
 800c346:	e3dc      	b.n	800cb02 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c352:	b29b      	uxth	r3, r3
 800c354:	461a      	mov	r2, r3
 800c356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c358:	4413      	add	r3, r2
 800c35a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	00da      	lsls	r2, r3, #3
 800c362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c364:	4413      	add	r3, r2
 800c366:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c36a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	88db      	ldrh	r3, [r3, #6]
 800c370:	085b      	lsrs	r3, r3, #1
 800c372:	b29b      	uxth	r3, r3
 800c374:	005b      	lsls	r3, r3, #1
 800c376:	b29a      	uxth	r2, r3
 800c378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c37a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c386:	b29b      	uxth	r3, r3
 800c388:	461a      	mov	r2, r3
 800c38a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c38c:	4413      	add	r3, r2
 800c38e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	781b      	ldrb	r3, [r3, #0]
 800c394:	00da      	lsls	r2, r3, #3
 800c396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c398:	4413      	add	r3, r2
 800c39a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c39e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a2:	881b      	ldrh	r3, [r3, #0]
 800c3a4:	b29b      	uxth	r3, r3
 800c3a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c3aa:	b29a      	uxth	r2, r3
 800c3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ae:	801a      	strh	r2, [r3, #0]
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	691b      	ldr	r3, [r3, #16]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d10a      	bne.n	800c3ce <USB_ActivateEndpoint+0x28a>
 800c3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ba:	881b      	ldrh	r3, [r3, #0]
 800c3bc:	b29b      	uxth	r3, r3
 800c3be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3c6:	b29a      	uxth	r2, r3
 800c3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ca:	801a      	strh	r2, [r3, #0]
 800c3cc:	e041      	b.n	800c452 <USB_ActivateEndpoint+0x30e>
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	691b      	ldr	r3, [r3, #16]
 800c3d2:	2b3e      	cmp	r3, #62	@ 0x3e
 800c3d4:	d81c      	bhi.n	800c410 <USB_ActivateEndpoint+0x2cc>
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	691b      	ldr	r3, [r3, #16]
 800c3da:	085b      	lsrs	r3, r3, #1
 800c3dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	691b      	ldr	r3, [r3, #16]
 800c3e4:	f003 0301 	and.w	r3, r3, #1
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d004      	beq.n	800c3f6 <USB_ActivateEndpoint+0x2b2>
 800c3ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3f8:	881b      	ldrh	r3, [r3, #0]
 800c3fa:	b29a      	uxth	r2, r3
 800c3fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c400:	b29b      	uxth	r3, r3
 800c402:	029b      	lsls	r3, r3, #10
 800c404:	b29b      	uxth	r3, r3
 800c406:	4313      	orrs	r3, r2
 800c408:	b29a      	uxth	r2, r3
 800c40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c40c:	801a      	strh	r2, [r3, #0]
 800c40e:	e020      	b.n	800c452 <USB_ActivateEndpoint+0x30e>
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	691b      	ldr	r3, [r3, #16]
 800c414:	095b      	lsrs	r3, r3, #5
 800c416:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	691b      	ldr	r3, [r3, #16]
 800c41e:	f003 031f 	and.w	r3, r3, #31
 800c422:	2b00      	cmp	r3, #0
 800c424:	d104      	bne.n	800c430 <USB_ActivateEndpoint+0x2ec>
 800c426:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c42a:	3b01      	subs	r3, #1
 800c42c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c432:	881b      	ldrh	r3, [r3, #0]
 800c434:	b29a      	uxth	r2, r3
 800c436:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	029b      	lsls	r3, r3, #10
 800c43e:	b29b      	uxth	r3, r3
 800c440:	4313      	orrs	r3, r2
 800c442:	b29b      	uxth	r3, r3
 800c444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c44c:	b29a      	uxth	r2, r3
 800c44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c450:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c452:	687a      	ldr	r2, [r7, #4]
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	009b      	lsls	r3, r3, #2
 800c45a:	4413      	add	r3, r2
 800c45c:	881b      	ldrh	r3, [r3, #0]
 800c45e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c460:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c462:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c466:	2b00      	cmp	r3, #0
 800c468:	d01b      	beq.n	800c4a2 <USB_ActivateEndpoint+0x35e>
 800c46a:	687a      	ldr	r2, [r7, #4]
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	009b      	lsls	r3, r3, #2
 800c472:	4413      	add	r3, r2
 800c474:	881b      	ldrh	r3, [r3, #0]
 800c476:	b29b      	uxth	r3, r3
 800c478:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c47c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c480:	843b      	strh	r3, [r7, #32]
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	009b      	lsls	r3, r3, #2
 800c48a:	441a      	add	r2, r3
 800c48c:	8c3b      	ldrh	r3, [r7, #32]
 800c48e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c492:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c496:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c49a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c49e:	b29b      	uxth	r3, r3
 800c4a0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	781b      	ldrb	r3, [r3, #0]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d124      	bne.n	800c4f4 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c4aa:	687a      	ldr	r2, [r7, #4]
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	009b      	lsls	r3, r3, #2
 800c4b2:	4413      	add	r3, r2
 800c4b4:	881b      	ldrh	r3, [r3, #0]
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c4bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4c0:	83bb      	strh	r3, [r7, #28]
 800c4c2:	8bbb      	ldrh	r3, [r7, #28]
 800c4c4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c4c8:	83bb      	strh	r3, [r7, #28]
 800c4ca:	8bbb      	ldrh	r3, [r7, #28]
 800c4cc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c4d0:	83bb      	strh	r3, [r7, #28]
 800c4d2:	687a      	ldr	r2, [r7, #4]
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	009b      	lsls	r3, r3, #2
 800c4da:	441a      	add	r2, r3
 800c4dc:	8bbb      	ldrh	r3, [r7, #28]
 800c4de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4ee:	b29b      	uxth	r3, r3
 800c4f0:	8013      	strh	r3, [r2, #0]
 800c4f2:	e306      	b.n	800cb02 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	009b      	lsls	r3, r3, #2
 800c4fc:	4413      	add	r3, r2
 800c4fe:	881b      	ldrh	r3, [r3, #0]
 800c500:	b29b      	uxth	r3, r3
 800c502:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c50a:	83fb      	strh	r3, [r7, #30]
 800c50c:	8bfb      	ldrh	r3, [r7, #30]
 800c50e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c512:	83fb      	strh	r3, [r7, #30]
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	009b      	lsls	r3, r3, #2
 800c51c:	441a      	add	r2, r3
 800c51e:	8bfb      	ldrh	r3, [r7, #30]
 800c520:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c524:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c528:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c52c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c530:	b29b      	uxth	r3, r3
 800c532:	8013      	strh	r3, [r2, #0]
 800c534:	e2e5      	b.n	800cb02 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	78db      	ldrb	r3, [r3, #3]
 800c53a:	2b02      	cmp	r3, #2
 800c53c:	d11e      	bne.n	800c57c <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c53e:	687a      	ldr	r2, [r7, #4]
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	781b      	ldrb	r3, [r3, #0]
 800c544:	009b      	lsls	r3, r3, #2
 800c546:	4413      	add	r3, r2
 800c548:	881b      	ldrh	r3, [r3, #0]
 800c54a:	b29b      	uxth	r3, r3
 800c54c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c550:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c554:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800c558:	687a      	ldr	r2, [r7, #4]
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	781b      	ldrb	r3, [r3, #0]
 800c55e:	009b      	lsls	r3, r3, #2
 800c560:	441a      	add	r2, r3
 800c562:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800c566:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c56a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c56e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c572:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c576:	b29b      	uxth	r3, r3
 800c578:	8013      	strh	r3, [r2, #0]
 800c57a:	e01d      	b.n	800c5b8 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c57c:	687a      	ldr	r2, [r7, #4]
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	009b      	lsls	r3, r3, #2
 800c584:	4413      	add	r3, r2
 800c586:	881b      	ldrh	r3, [r3, #0]
 800c588:	b29b      	uxth	r3, r3
 800c58a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c58e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c592:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800c596:	687a      	ldr	r2, [r7, #4]
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	009b      	lsls	r3, r3, #2
 800c59e:	441a      	add	r2, r3
 800c5a0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800c5a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c5a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5b4:	b29b      	uxth	r3, r3
 800c5b6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	461a      	mov	r2, r3
 800c5c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c5c8:	4413      	add	r3, r2
 800c5ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	00da      	lsls	r2, r3, #3
 800c5d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c5d4:	4413      	add	r3, r2
 800c5d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c5da:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	891b      	ldrh	r3, [r3, #8]
 800c5e0:	085b      	lsrs	r3, r3, #1
 800c5e2:	b29b      	uxth	r3, r3
 800c5e4:	005b      	lsls	r3, r3, #1
 800c5e6:	b29a      	uxth	r2, r3
 800c5e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c5ea:	801a      	strh	r2, [r3, #0]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	677b      	str	r3, [r7, #116]	@ 0x74
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c5f6:	b29b      	uxth	r3, r3
 800c5f8:	461a      	mov	r2, r3
 800c5fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c5fc:	4413      	add	r3, r2
 800c5fe:	677b      	str	r3, [r7, #116]	@ 0x74
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	781b      	ldrb	r3, [r3, #0]
 800c604:	00da      	lsls	r2, r3, #3
 800c606:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c608:	4413      	add	r3, r2
 800c60a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c60e:	673b      	str	r3, [r7, #112]	@ 0x70
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	895b      	ldrh	r3, [r3, #10]
 800c614:	085b      	lsrs	r3, r3, #1
 800c616:	b29b      	uxth	r3, r3
 800c618:	005b      	lsls	r3, r3, #1
 800c61a:	b29a      	uxth	r2, r3
 800c61c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c61e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	785b      	ldrb	r3, [r3, #1]
 800c624:	2b00      	cmp	r3, #0
 800c626:	f040 81af 	bne.w	800c988 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c62a:	687a      	ldr	r2, [r7, #4]
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	009b      	lsls	r3, r3, #2
 800c632:	4413      	add	r3, r2
 800c634:	881b      	ldrh	r3, [r3, #0]
 800c636:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800c63a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800c63e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c642:	2b00      	cmp	r3, #0
 800c644:	d01d      	beq.n	800c682 <USB_ActivateEndpoint+0x53e>
 800c646:	687a      	ldr	r2, [r7, #4]
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	009b      	lsls	r3, r3, #2
 800c64e:	4413      	add	r3, r2
 800c650:	881b      	ldrh	r3, [r3, #0]
 800c652:	b29b      	uxth	r3, r3
 800c654:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c658:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c65c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800c660:	687a      	ldr	r2, [r7, #4]
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	009b      	lsls	r3, r3, #2
 800c668:	441a      	add	r2, r3
 800c66a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800c66e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c672:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c676:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c67a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c67e:	b29b      	uxth	r3, r3
 800c680:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c682:	687a      	ldr	r2, [r7, #4]
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	009b      	lsls	r3, r3, #2
 800c68a:	4413      	add	r3, r2
 800c68c:	881b      	ldrh	r3, [r3, #0]
 800c68e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800c692:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800c696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d01d      	beq.n	800c6da <USB_ActivateEndpoint+0x596>
 800c69e:	687a      	ldr	r2, [r7, #4]
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	781b      	ldrb	r3, [r3, #0]
 800c6a4:	009b      	lsls	r3, r3, #2
 800c6a6:	4413      	add	r3, r2
 800c6a8:	881b      	ldrh	r3, [r3, #0]
 800c6aa:	b29b      	uxth	r3, r3
 800c6ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c6b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6b4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800c6b8:	687a      	ldr	r2, [r7, #4]
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	009b      	lsls	r3, r3, #2
 800c6c0:	441a      	add	r2, r3
 800c6c2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800c6c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6d2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c6d6:	b29b      	uxth	r3, r3
 800c6d8:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	785b      	ldrb	r3, [r3, #1]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d16b      	bne.n	800c7ba <USB_ActivateEndpoint+0x676>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c6ec:	b29b      	uxth	r3, r3
 800c6ee:	461a      	mov	r2, r3
 800c6f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6f2:	4413      	add	r3, r2
 800c6f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	781b      	ldrb	r3, [r3, #0]
 800c6fa:	00da      	lsls	r2, r3, #3
 800c6fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6fe:	4413      	add	r3, r2
 800c700:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c704:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c706:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c708:	881b      	ldrh	r3, [r3, #0]
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c710:	b29a      	uxth	r2, r3
 800c712:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c714:	801a      	strh	r2, [r3, #0]
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	691b      	ldr	r3, [r3, #16]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d10a      	bne.n	800c734 <USB_ActivateEndpoint+0x5f0>
 800c71e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c720:	881b      	ldrh	r3, [r3, #0]
 800c722:	b29b      	uxth	r3, r3
 800c724:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c728:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c72c:	b29a      	uxth	r2, r3
 800c72e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c730:	801a      	strh	r2, [r3, #0]
 800c732:	e05d      	b.n	800c7f0 <USB_ActivateEndpoint+0x6ac>
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	691b      	ldr	r3, [r3, #16]
 800c738:	2b3e      	cmp	r3, #62	@ 0x3e
 800c73a:	d81c      	bhi.n	800c776 <USB_ActivateEndpoint+0x632>
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	691b      	ldr	r3, [r3, #16]
 800c740:	085b      	lsrs	r3, r3, #1
 800c742:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	691b      	ldr	r3, [r3, #16]
 800c74a:	f003 0301 	and.w	r3, r3, #1
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d004      	beq.n	800c75c <USB_ActivateEndpoint+0x618>
 800c752:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c756:	3301      	adds	r3, #1
 800c758:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c75c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c75e:	881b      	ldrh	r3, [r3, #0]
 800c760:	b29a      	uxth	r2, r3
 800c762:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c766:	b29b      	uxth	r3, r3
 800c768:	029b      	lsls	r3, r3, #10
 800c76a:	b29b      	uxth	r3, r3
 800c76c:	4313      	orrs	r3, r2
 800c76e:	b29a      	uxth	r2, r3
 800c770:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c772:	801a      	strh	r2, [r3, #0]
 800c774:	e03c      	b.n	800c7f0 <USB_ActivateEndpoint+0x6ac>
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	691b      	ldr	r3, [r3, #16]
 800c77a:	095b      	lsrs	r3, r3, #5
 800c77c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	691b      	ldr	r3, [r3, #16]
 800c784:	f003 031f 	and.w	r3, r3, #31
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d104      	bne.n	800c796 <USB_ActivateEndpoint+0x652>
 800c78c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c790:	3b01      	subs	r3, #1
 800c792:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c796:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c798:	881b      	ldrh	r3, [r3, #0]
 800c79a:	b29a      	uxth	r2, r3
 800c79c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c7a0:	b29b      	uxth	r3, r3
 800c7a2:	029b      	lsls	r3, r3, #10
 800c7a4:	b29b      	uxth	r3, r3
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	b29b      	uxth	r3, r3
 800c7aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c7ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c7b2:	b29a      	uxth	r2, r3
 800c7b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c7b6:	801a      	strh	r2, [r3, #0]
 800c7b8:	e01a      	b.n	800c7f0 <USB_ActivateEndpoint+0x6ac>
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	785b      	ldrb	r3, [r3, #1]
 800c7be:	2b01      	cmp	r3, #1
 800c7c0:	d116      	bne.n	800c7f0 <USB_ActivateEndpoint+0x6ac>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	657b      	str	r3, [r7, #84]	@ 0x54
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c7cc:	b29b      	uxth	r3, r3
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7d2:	4413      	add	r3, r2
 800c7d4:	657b      	str	r3, [r7, #84]	@ 0x54
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	781b      	ldrb	r3, [r3, #0]
 800c7da:	00da      	lsls	r2, r3, #3
 800c7dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7de:	4413      	add	r3, r2
 800c7e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c7e4:	653b      	str	r3, [r7, #80]	@ 0x50
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	691b      	ldr	r3, [r3, #16]
 800c7ea:	b29a      	uxth	r2, r3
 800c7ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7ee:	801a      	strh	r2, [r3, #0]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	785b      	ldrb	r3, [r3, #1]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d16b      	bne.n	800c8d4 <USB_ActivateEndpoint+0x790>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c806:	b29b      	uxth	r3, r3
 800c808:	461a      	mov	r2, r3
 800c80a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c80c:	4413      	add	r3, r2
 800c80e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	781b      	ldrb	r3, [r3, #0]
 800c814:	00da      	lsls	r2, r3, #3
 800c816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c818:	4413      	add	r3, r2
 800c81a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c81e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c822:	881b      	ldrh	r3, [r3, #0]
 800c824:	b29b      	uxth	r3, r3
 800c826:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c82a:	b29a      	uxth	r2, r3
 800c82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c82e:	801a      	strh	r2, [r3, #0]
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	691b      	ldr	r3, [r3, #16]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d10a      	bne.n	800c84e <USB_ActivateEndpoint+0x70a>
 800c838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c83a:	881b      	ldrh	r3, [r3, #0]
 800c83c:	b29b      	uxth	r3, r3
 800c83e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c846:	b29a      	uxth	r2, r3
 800c848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c84a:	801a      	strh	r2, [r3, #0]
 800c84c:	e05b      	b.n	800c906 <USB_ActivateEndpoint+0x7c2>
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	691b      	ldr	r3, [r3, #16]
 800c852:	2b3e      	cmp	r3, #62	@ 0x3e
 800c854:	d81c      	bhi.n	800c890 <USB_ActivateEndpoint+0x74c>
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	691b      	ldr	r3, [r3, #16]
 800c85a:	085b      	lsrs	r3, r3, #1
 800c85c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	691b      	ldr	r3, [r3, #16]
 800c864:	f003 0301 	and.w	r3, r3, #1
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d004      	beq.n	800c876 <USB_ActivateEndpoint+0x732>
 800c86c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c870:	3301      	adds	r3, #1
 800c872:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c878:	881b      	ldrh	r3, [r3, #0]
 800c87a:	b29a      	uxth	r2, r3
 800c87c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c880:	b29b      	uxth	r3, r3
 800c882:	029b      	lsls	r3, r3, #10
 800c884:	b29b      	uxth	r3, r3
 800c886:	4313      	orrs	r3, r2
 800c888:	b29a      	uxth	r2, r3
 800c88a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c88c:	801a      	strh	r2, [r3, #0]
 800c88e:	e03a      	b.n	800c906 <USB_ActivateEndpoint+0x7c2>
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	691b      	ldr	r3, [r3, #16]
 800c894:	095b      	lsrs	r3, r3, #5
 800c896:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	691b      	ldr	r3, [r3, #16]
 800c89e:	f003 031f 	and.w	r3, r3, #31
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d104      	bne.n	800c8b0 <USB_ActivateEndpoint+0x76c>
 800c8a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c8aa:	3b01      	subs	r3, #1
 800c8ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8b2:	881b      	ldrh	r3, [r3, #0]
 800c8b4:	b29a      	uxth	r2, r3
 800c8b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c8ba:	b29b      	uxth	r3, r3
 800c8bc:	029b      	lsls	r3, r3, #10
 800c8be:	b29b      	uxth	r3, r3
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c8c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c8cc:	b29a      	uxth	r2, r3
 800c8ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8d0:	801a      	strh	r2, [r3, #0]
 800c8d2:	e018      	b.n	800c906 <USB_ActivateEndpoint+0x7c2>
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	785b      	ldrb	r3, [r3, #1]
 800c8d8:	2b01      	cmp	r3, #1
 800c8da:	d114      	bne.n	800c906 <USB_ActivateEndpoint+0x7c2>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8e8:	4413      	add	r3, r2
 800c8ea:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	00da      	lsls	r2, r3, #3
 800c8f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8f4:	4413      	add	r3, r2
 800c8f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c8fa:	643b      	str	r3, [r7, #64]	@ 0x40
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	691b      	ldr	r3, [r3, #16]
 800c900:	b29a      	uxth	r2, r3
 800c902:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c904:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c906:	687a      	ldr	r2, [r7, #4]
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	781b      	ldrb	r3, [r3, #0]
 800c90c:	009b      	lsls	r3, r3, #2
 800c90e:	4413      	add	r3, r2
 800c910:	881b      	ldrh	r3, [r3, #0]
 800c912:	b29b      	uxth	r3, r3
 800c914:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c918:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c91c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c91e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c920:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c924:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c926:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c928:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c92c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c92e:	687a      	ldr	r2, [r7, #4]
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	009b      	lsls	r3, r3, #2
 800c936:	441a      	add	r2, r3
 800c938:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c93a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c93e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c942:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c946:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c94a:	b29b      	uxth	r3, r3
 800c94c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c94e:	687a      	ldr	r2, [r7, #4]
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	781b      	ldrb	r3, [r3, #0]
 800c954:	009b      	lsls	r3, r3, #2
 800c956:	4413      	add	r3, r2
 800c958:	881b      	ldrh	r3, [r3, #0]
 800c95a:	b29b      	uxth	r3, r3
 800c95c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c960:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c964:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800c966:	687a      	ldr	r2, [r7, #4]
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	781b      	ldrb	r3, [r3, #0]
 800c96c:	009b      	lsls	r3, r3, #2
 800c96e:	441a      	add	r2, r3
 800c970:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800c972:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c976:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c97a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c97e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c982:	b29b      	uxth	r3, r3
 800c984:	8013      	strh	r3, [r2, #0]
 800c986:	e0bc      	b.n	800cb02 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c988:	687a      	ldr	r2, [r7, #4]
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	009b      	lsls	r3, r3, #2
 800c990:	4413      	add	r3, r2
 800c992:	881b      	ldrh	r3, [r3, #0]
 800c994:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800c998:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c99c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d01d      	beq.n	800c9e0 <USB_ActivateEndpoint+0x89c>
 800c9a4:	687a      	ldr	r2, [r7, #4]
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	009b      	lsls	r3, r3, #2
 800c9ac:	4413      	add	r3, r2
 800c9ae:	881b      	ldrh	r3, [r3, #0]
 800c9b0:	b29b      	uxth	r3, r3
 800c9b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c9b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9ba:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	009b      	lsls	r3, r3, #2
 800c9c6:	441a      	add	r2, r3
 800c9c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c9cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c9d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c9d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9dc:	b29b      	uxth	r3, r3
 800c9de:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	009b      	lsls	r3, r3, #2
 800c9e8:	4413      	add	r3, r2
 800c9ea:	881b      	ldrh	r3, [r3, #0]
 800c9ec:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800c9f0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800c9f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d01d      	beq.n	800ca38 <USB_ActivateEndpoint+0x8f4>
 800c9fc:	687a      	ldr	r2, [r7, #4]
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	009b      	lsls	r3, r3, #2
 800ca04:	4413      	add	r3, r2
 800ca06:	881b      	ldrh	r3, [r3, #0]
 800ca08:	b29b      	uxth	r3, r3
 800ca0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca12:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800ca16:	687a      	ldr	r2, [r7, #4]
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	009b      	lsls	r3, r3, #2
 800ca1e:	441a      	add	r2, r3
 800ca20:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800ca24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca30:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ca34:	b29b      	uxth	r3, r3
 800ca36:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	78db      	ldrb	r3, [r3, #3]
 800ca3c:	2b01      	cmp	r3, #1
 800ca3e:	d024      	beq.n	800ca8a <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ca40:	687a      	ldr	r2, [r7, #4]
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	009b      	lsls	r3, r3, #2
 800ca48:	4413      	add	r3, r2
 800ca4a:	881b      	ldrh	r3, [r3, #0]
 800ca4c:	b29b      	uxth	r3, r3
 800ca4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca56:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800ca5a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800ca5e:	f083 0320 	eor.w	r3, r3, #32
 800ca62:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	009b      	lsls	r3, r3, #2
 800ca6e:	441a      	add	r2, r3
 800ca70:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800ca74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca84:	b29b      	uxth	r3, r3
 800ca86:	8013      	strh	r3, [r2, #0]
 800ca88:	e01d      	b.n	800cac6 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ca8a:	687a      	ldr	r2, [r7, #4]
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	009b      	lsls	r3, r3, #2
 800ca92:	4413      	add	r3, r2
 800ca94:	881b      	ldrh	r3, [r3, #0]
 800ca96:	b29b      	uxth	r3, r3
 800ca98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800caa0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800caa4:	687a      	ldr	r2, [r7, #4]
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	781b      	ldrb	r3, [r3, #0]
 800caaa:	009b      	lsls	r3, r3, #2
 800caac:	441a      	add	r2, r3
 800caae:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800cab2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cab6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800caba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cabe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cac2:	b29b      	uxth	r3, r3
 800cac4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cac6:	687a      	ldr	r2, [r7, #4]
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	781b      	ldrb	r3, [r3, #0]
 800cacc:	009b      	lsls	r3, r3, #2
 800cace:	4413      	add	r3, r2
 800cad0:	881b      	ldrh	r3, [r3, #0]
 800cad2:	b29b      	uxth	r3, r3
 800cad4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cad8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cadc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800cae0:	687a      	ldr	r2, [r7, #4]
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	781b      	ldrb	r3, [r3, #0]
 800cae6:	009b      	lsls	r3, r3, #2
 800cae8:	441a      	add	r2, r3
 800caea:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800caee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800caf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800caf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cafa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cafe:	b29b      	uxth	r3, r3
 800cb00:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800cb02:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	379c      	adds	r7, #156	@ 0x9c
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb10:	4770      	bx	lr
 800cb12:	bf00      	nop

0800cb14 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cb14:	b480      	push	{r7}
 800cb16:	b08d      	sub	sp, #52	@ 0x34
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	7b1b      	ldrb	r3, [r3, #12]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	f040 808e 	bne.w	800cc44 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	785b      	ldrb	r3, [r3, #1]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d044      	beq.n	800cbba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	009b      	lsls	r3, r3, #2
 800cb38:	4413      	add	r3, r2
 800cb3a:	881b      	ldrh	r3, [r3, #0]
 800cb3c:	81bb      	strh	r3, [r7, #12]
 800cb3e:	89bb      	ldrh	r3, [r7, #12]
 800cb40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d01b      	beq.n	800cb80 <USB_DeactivateEndpoint+0x6c>
 800cb48:	687a      	ldr	r2, [r7, #4]
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	009b      	lsls	r3, r3, #2
 800cb50:	4413      	add	r3, r2
 800cb52:	881b      	ldrh	r3, [r3, #0]
 800cb54:	b29b      	uxth	r3, r3
 800cb56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb5e:	817b      	strh	r3, [r7, #10]
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	781b      	ldrb	r3, [r3, #0]
 800cb66:	009b      	lsls	r3, r3, #2
 800cb68:	441a      	add	r2, r3
 800cb6a:	897b      	ldrh	r3, [r7, #10]
 800cb6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb78:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cb7c:	b29b      	uxth	r3, r3
 800cb7e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	781b      	ldrb	r3, [r3, #0]
 800cb86:	009b      	lsls	r3, r3, #2
 800cb88:	4413      	add	r3, r2
 800cb8a:	881b      	ldrh	r3, [r3, #0]
 800cb8c:	b29b      	uxth	r3, r3
 800cb8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb96:	813b      	strh	r3, [r7, #8]
 800cb98:	687a      	ldr	r2, [r7, #4]
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	009b      	lsls	r3, r3, #2
 800cba0:	441a      	add	r2, r3
 800cba2:	893b      	ldrh	r3, [r7, #8]
 800cba4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cba8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cbac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cbb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbb4:	b29b      	uxth	r3, r3
 800cbb6:	8013      	strh	r3, [r2, #0]
 800cbb8:	e192      	b.n	800cee0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cbba:	687a      	ldr	r2, [r7, #4]
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	781b      	ldrb	r3, [r3, #0]
 800cbc0:	009b      	lsls	r3, r3, #2
 800cbc2:	4413      	add	r3, r2
 800cbc4:	881b      	ldrh	r3, [r3, #0]
 800cbc6:	827b      	strh	r3, [r7, #18]
 800cbc8:	8a7b      	ldrh	r3, [r7, #18]
 800cbca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d01b      	beq.n	800cc0a <USB_DeactivateEndpoint+0xf6>
 800cbd2:	687a      	ldr	r2, [r7, #4]
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	009b      	lsls	r3, r3, #2
 800cbda:	4413      	add	r3, r2
 800cbdc:	881b      	ldrh	r3, [r3, #0]
 800cbde:	b29b      	uxth	r3, r3
 800cbe0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cbe4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbe8:	823b      	strh	r3, [r7, #16]
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	781b      	ldrb	r3, [r3, #0]
 800cbf0:	009b      	lsls	r3, r3, #2
 800cbf2:	441a      	add	r2, r3
 800cbf4:	8a3b      	ldrh	r3, [r7, #16]
 800cbf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cbfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cbfe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cc02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc06:	b29b      	uxth	r3, r3
 800cc08:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cc0a:	687a      	ldr	r2, [r7, #4]
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	781b      	ldrb	r3, [r3, #0]
 800cc10:	009b      	lsls	r3, r3, #2
 800cc12:	4413      	add	r3, r2
 800cc14:	881b      	ldrh	r3, [r3, #0]
 800cc16:	b29b      	uxth	r3, r3
 800cc18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cc1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc20:	81fb      	strh	r3, [r7, #14]
 800cc22:	687a      	ldr	r2, [r7, #4]
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	781b      	ldrb	r3, [r3, #0]
 800cc28:	009b      	lsls	r3, r3, #2
 800cc2a:	441a      	add	r2, r3
 800cc2c:	89fb      	ldrh	r3, [r7, #14]
 800cc2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc3e:	b29b      	uxth	r3, r3
 800cc40:	8013      	strh	r3, [r2, #0]
 800cc42:	e14d      	b.n	800cee0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	785b      	ldrb	r3, [r3, #1]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	f040 80a5 	bne.w	800cd98 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cc4e:	687a      	ldr	r2, [r7, #4]
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	781b      	ldrb	r3, [r3, #0]
 800cc54:	009b      	lsls	r3, r3, #2
 800cc56:	4413      	add	r3, r2
 800cc58:	881b      	ldrh	r3, [r3, #0]
 800cc5a:	843b      	strh	r3, [r7, #32]
 800cc5c:	8c3b      	ldrh	r3, [r7, #32]
 800cc5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d01b      	beq.n	800cc9e <USB_DeactivateEndpoint+0x18a>
 800cc66:	687a      	ldr	r2, [r7, #4]
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	781b      	ldrb	r3, [r3, #0]
 800cc6c:	009b      	lsls	r3, r3, #2
 800cc6e:	4413      	add	r3, r2
 800cc70:	881b      	ldrh	r3, [r3, #0]
 800cc72:	b29b      	uxth	r3, r3
 800cc74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc7c:	83fb      	strh	r3, [r7, #30]
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	009b      	lsls	r3, r3, #2
 800cc86:	441a      	add	r2, r3
 800cc88:	8bfb      	ldrh	r3, [r7, #30]
 800cc8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cc96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc9a:	b29b      	uxth	r3, r3
 800cc9c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cc9e:	687a      	ldr	r2, [r7, #4]
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	009b      	lsls	r3, r3, #2
 800cca6:	4413      	add	r3, r2
 800cca8:	881b      	ldrh	r3, [r3, #0]
 800ccaa:	83bb      	strh	r3, [r7, #28]
 800ccac:	8bbb      	ldrh	r3, [r7, #28]
 800ccae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d01b      	beq.n	800ccee <USB_DeactivateEndpoint+0x1da>
 800ccb6:	687a      	ldr	r2, [r7, #4]
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	009b      	lsls	r3, r3, #2
 800ccbe:	4413      	add	r3, r2
 800ccc0:	881b      	ldrh	r3, [r3, #0]
 800ccc2:	b29b      	uxth	r3, r3
 800ccc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ccc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cccc:	837b      	strh	r3, [r7, #26]
 800ccce:	687a      	ldr	r2, [r7, #4]
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	009b      	lsls	r3, r3, #2
 800ccd6:	441a      	add	r2, r3
 800ccd8:	8b7b      	ldrh	r3, [r7, #26]
 800ccda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ccde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cce2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cce6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ccea:	b29b      	uxth	r3, r3
 800ccec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	781b      	ldrb	r3, [r3, #0]
 800ccf4:	009b      	lsls	r3, r3, #2
 800ccf6:	4413      	add	r3, r2
 800ccf8:	881b      	ldrh	r3, [r3, #0]
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cd00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd04:	833b      	strh	r3, [r7, #24]
 800cd06:	687a      	ldr	r2, [r7, #4]
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	781b      	ldrb	r3, [r3, #0]
 800cd0c:	009b      	lsls	r3, r3, #2
 800cd0e:	441a      	add	r2, r3
 800cd10:	8b3b      	ldrh	r3, [r7, #24]
 800cd12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cd1e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cd22:	b29b      	uxth	r3, r3
 800cd24:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cd26:	687a      	ldr	r2, [r7, #4]
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	781b      	ldrb	r3, [r3, #0]
 800cd2c:	009b      	lsls	r3, r3, #2
 800cd2e:	4413      	add	r3, r2
 800cd30:	881b      	ldrh	r3, [r3, #0]
 800cd32:	b29b      	uxth	r3, r3
 800cd34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cd38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd3c:	82fb      	strh	r3, [r7, #22]
 800cd3e:	687a      	ldr	r2, [r7, #4]
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	009b      	lsls	r3, r3, #2
 800cd46:	441a      	add	r2, r3
 800cd48:	8afb      	ldrh	r3, [r7, #22]
 800cd4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cd56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd5a:	b29b      	uxth	r3, r3
 800cd5c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	009b      	lsls	r3, r3, #2
 800cd66:	4413      	add	r3, r2
 800cd68:	881b      	ldrh	r3, [r3, #0]
 800cd6a:	b29b      	uxth	r3, r3
 800cd6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cd70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cd74:	82bb      	strh	r3, [r7, #20]
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	009b      	lsls	r3, r3, #2
 800cd7e:	441a      	add	r2, r3
 800cd80:	8abb      	ldrh	r3, [r7, #20]
 800cd82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cd8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd92:	b29b      	uxth	r3, r3
 800cd94:	8013      	strh	r3, [r2, #0]
 800cd96:	e0a3      	b.n	800cee0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cd98:	687a      	ldr	r2, [r7, #4]
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	009b      	lsls	r3, r3, #2
 800cda0:	4413      	add	r3, r2
 800cda2:	881b      	ldrh	r3, [r3, #0]
 800cda4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800cda6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cda8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d01b      	beq.n	800cde8 <USB_DeactivateEndpoint+0x2d4>
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	781b      	ldrb	r3, [r3, #0]
 800cdb6:	009b      	lsls	r3, r3, #2
 800cdb8:	4413      	add	r3, r2
 800cdba:	881b      	ldrh	r3, [r3, #0]
 800cdbc:	b29b      	uxth	r3, r3
 800cdbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cdc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cdc6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800cdc8:	687a      	ldr	r2, [r7, #4]
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	781b      	ldrb	r3, [r3, #0]
 800cdce:	009b      	lsls	r3, r3, #2
 800cdd0:	441a      	add	r2, r3
 800cdd2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800cdd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cdd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cddc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cde0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cde4:	b29b      	uxth	r3, r3
 800cde6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cde8:	687a      	ldr	r2, [r7, #4]
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	009b      	lsls	r3, r3, #2
 800cdf0:	4413      	add	r3, r2
 800cdf2:	881b      	ldrh	r3, [r3, #0]
 800cdf4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800cdf6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cdf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d01b      	beq.n	800ce38 <USB_DeactivateEndpoint+0x324>
 800ce00:	687a      	ldr	r2, [r7, #4]
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	781b      	ldrb	r3, [r3, #0]
 800ce06:	009b      	lsls	r3, r3, #2
 800ce08:	4413      	add	r3, r2
 800ce0a:	881b      	ldrh	r3, [r3, #0]
 800ce0c:	b29b      	uxth	r3, r3
 800ce0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce16:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ce18:	687a      	ldr	r2, [r7, #4]
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	009b      	lsls	r3, r3, #2
 800ce20:	441a      	add	r2, r3
 800ce22:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ce24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce30:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ce34:	b29b      	uxth	r3, r3
 800ce36:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800ce38:	687a      	ldr	r2, [r7, #4]
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	781b      	ldrb	r3, [r3, #0]
 800ce3e:	009b      	lsls	r3, r3, #2
 800ce40:	4413      	add	r3, r2
 800ce42:	881b      	ldrh	r3, [r3, #0]
 800ce44:	b29b      	uxth	r3, r3
 800ce46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce4e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ce50:	687a      	ldr	r2, [r7, #4]
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	781b      	ldrb	r3, [r3, #0]
 800ce56:	009b      	lsls	r3, r3, #2
 800ce58:	441a      	add	r2, r3
 800ce5a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ce5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ce68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce6c:	b29b      	uxth	r3, r3
 800ce6e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ce70:	687a      	ldr	r2, [r7, #4]
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	781b      	ldrb	r3, [r3, #0]
 800ce76:	009b      	lsls	r3, r3, #2
 800ce78:	4413      	add	r3, r2
 800ce7a:	881b      	ldrh	r3, [r3, #0]
 800ce7c:	b29b      	uxth	r3, r3
 800ce7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ce86:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800ce88:	687a      	ldr	r2, [r7, #4]
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	781b      	ldrb	r3, [r3, #0]
 800ce8e:	009b      	lsls	r3, r3, #2
 800ce90:	441a      	add	r2, r3
 800ce92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ce94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cea4:	b29b      	uxth	r3, r3
 800cea6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	781b      	ldrb	r3, [r3, #0]
 800ceae:	009b      	lsls	r3, r3, #2
 800ceb0:	4413      	add	r3, r2
 800ceb2:	881b      	ldrh	r3, [r3, #0]
 800ceb4:	b29b      	uxth	r3, r3
 800ceb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ceba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cebe:	847b      	strh	r3, [r7, #34]	@ 0x22
 800cec0:	687a      	ldr	r2, [r7, #4]
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	009b      	lsls	r3, r3, #2
 800cec8:	441a      	add	r2, r3
 800ceca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cecc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ced0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ced4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ced8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cedc:	b29b      	uxth	r3, r3
 800cede:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800cee0:	2300      	movs	r3, #0
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3734      	adds	r7, #52	@ 0x34
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr

0800ceee <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ceee:	b580      	push	{r7, lr}
 800cef0:	b0ac      	sub	sp, #176	@ 0xb0
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
 800cef6:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	785b      	ldrb	r3, [r3, #1]
 800cefc:	2b01      	cmp	r3, #1
 800cefe:	f040 84ca 	bne.w	800d896 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	699a      	ldr	r2, [r3, #24]
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	691b      	ldr	r3, [r3, #16]
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d904      	bls.n	800cf18 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	691b      	ldr	r3, [r3, #16]
 800cf12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cf16:	e003      	b.n	800cf20 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	699b      	ldr	r3, [r3, #24]
 800cf1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	7b1b      	ldrb	r3, [r3, #12]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d122      	bne.n	800cf6e <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	6959      	ldr	r1, [r3, #20]
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	88da      	ldrh	r2, [r3, #6]
 800cf30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf34:	b29b      	uxth	r3, r3
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f000 febd 	bl	800dcb6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	613b      	str	r3, [r7, #16]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cf46:	b29b      	uxth	r3, r3
 800cf48:	461a      	mov	r2, r3
 800cf4a:	693b      	ldr	r3, [r7, #16]
 800cf4c:	4413      	add	r3, r2
 800cf4e:	613b      	str	r3, [r7, #16]
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	00da      	lsls	r2, r3, #3
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	4413      	add	r3, r2
 800cf5a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cf5e:	60fb      	str	r3, [r7, #12]
 800cf60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf64:	b29a      	uxth	r2, r3
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	801a      	strh	r2, [r3, #0]
 800cf6a:	f000 bc6f 	b.w	800d84c <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	78db      	ldrb	r3, [r3, #3]
 800cf72:	2b02      	cmp	r3, #2
 800cf74:	f040 831e 	bne.w	800d5b4 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	6a1a      	ldr	r2, [r3, #32]
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	691b      	ldr	r3, [r3, #16]
 800cf80:	429a      	cmp	r2, r3
 800cf82:	f240 82cf 	bls.w	800d524 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800cf86:	687a      	ldr	r2, [r7, #4]
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	009b      	lsls	r3, r3, #2
 800cf8e:	4413      	add	r3, r2
 800cf90:	881b      	ldrh	r3, [r3, #0]
 800cf92:	b29b      	uxth	r3, r3
 800cf94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cf98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf9c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800cfa0:	687a      	ldr	r2, [r7, #4]
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	009b      	lsls	r3, r3, #2
 800cfa8:	441a      	add	r2, r3
 800cfaa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800cfae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cfb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cfb6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800cfba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfbe:	b29b      	uxth	r3, r3
 800cfc0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	6a1a      	ldr	r2, [r3, #32]
 800cfc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cfca:	1ad2      	subs	r2, r2, r3
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cfd0:	687a      	ldr	r2, [r7, #4]
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	009b      	lsls	r3, r3, #2
 800cfd8:	4413      	add	r3, r2
 800cfda:	881b      	ldrh	r3, [r3, #0]
 800cfdc:	b29b      	uxth	r3, r3
 800cfde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	f000 814f 	beq.w	800d286 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	633b      	str	r3, [r7, #48]	@ 0x30
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	785b      	ldrb	r3, [r3, #1]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d16b      	bne.n	800d0cc <USB_EPStartXfer+0x1de>
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cffe:	b29b      	uxth	r3, r3
 800d000:	461a      	mov	r2, r3
 800d002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d004:	4413      	add	r3, r2
 800d006:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	781b      	ldrb	r3, [r3, #0]
 800d00c:	00da      	lsls	r2, r3, #3
 800d00e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d010:	4413      	add	r3, r2
 800d012:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d016:	627b      	str	r3, [r7, #36]	@ 0x24
 800d018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d01a:	881b      	ldrh	r3, [r3, #0]
 800d01c:	b29b      	uxth	r3, r3
 800d01e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d022:	b29a      	uxth	r2, r3
 800d024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d026:	801a      	strh	r2, [r3, #0]
 800d028:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d10a      	bne.n	800d046 <USB_EPStartXfer+0x158>
 800d030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d032:	881b      	ldrh	r3, [r3, #0]
 800d034:	b29b      	uxth	r3, r3
 800d036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d03a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d03e:	b29a      	uxth	r2, r3
 800d040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d042:	801a      	strh	r2, [r3, #0]
 800d044:	e05b      	b.n	800d0fe <USB_EPStartXfer+0x210>
 800d046:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d04a:	2b3e      	cmp	r3, #62	@ 0x3e
 800d04c:	d81c      	bhi.n	800d088 <USB_EPStartXfer+0x19a>
 800d04e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d052:	085b      	lsrs	r3, r3, #1
 800d054:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d058:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d05c:	f003 0301 	and.w	r3, r3, #1
 800d060:	2b00      	cmp	r3, #0
 800d062:	d004      	beq.n	800d06e <USB_EPStartXfer+0x180>
 800d064:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d068:	3301      	adds	r3, #1
 800d06a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d070:	881b      	ldrh	r3, [r3, #0]
 800d072:	b29a      	uxth	r2, r3
 800d074:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d078:	b29b      	uxth	r3, r3
 800d07a:	029b      	lsls	r3, r3, #10
 800d07c:	b29b      	uxth	r3, r3
 800d07e:	4313      	orrs	r3, r2
 800d080:	b29a      	uxth	r2, r3
 800d082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d084:	801a      	strh	r2, [r3, #0]
 800d086:	e03a      	b.n	800d0fe <USB_EPStartXfer+0x210>
 800d088:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d08c:	095b      	lsrs	r3, r3, #5
 800d08e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d092:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d096:	f003 031f 	and.w	r3, r3, #31
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d104      	bne.n	800d0a8 <USB_EPStartXfer+0x1ba>
 800d09e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d0a2:	3b01      	subs	r3, #1
 800d0a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0aa:	881b      	ldrh	r3, [r3, #0]
 800d0ac:	b29a      	uxth	r2, r3
 800d0ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d0b2:	b29b      	uxth	r3, r3
 800d0b4:	029b      	lsls	r3, r3, #10
 800d0b6:	b29b      	uxth	r3, r3
 800d0b8:	4313      	orrs	r3, r2
 800d0ba:	b29b      	uxth	r3, r3
 800d0bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0c4:	b29a      	uxth	r2, r3
 800d0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0c8:	801a      	strh	r2, [r3, #0]
 800d0ca:	e018      	b.n	800d0fe <USB_EPStartXfer+0x210>
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	785b      	ldrb	r3, [r3, #1]
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	d114      	bne.n	800d0fe <USB_EPStartXfer+0x210>
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d0da:	b29b      	uxth	r3, r3
 800d0dc:	461a      	mov	r2, r3
 800d0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e0:	4413      	add	r3, r2
 800d0e2:	633b      	str	r3, [r7, #48]	@ 0x30
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	00da      	lsls	r2, r3, #3
 800d0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ec:	4413      	add	r3, r2
 800d0ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d0f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d0f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0f8:	b29a      	uxth	r2, r3
 800d0fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	895b      	ldrh	r3, [r3, #10]
 800d102:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	6959      	ldr	r1, [r3, #20]
 800d10a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d10e:	b29b      	uxth	r3, r3
 800d110:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f000 fdce 	bl	800dcb6 <USB_WritePMA>
            ep->xfer_buff += len;
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	695a      	ldr	r2, [r3, #20]
 800d11e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d122:	441a      	add	r2, r3
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	6a1a      	ldr	r2, [r3, #32]
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	691b      	ldr	r3, [r3, #16]
 800d130:	429a      	cmp	r2, r3
 800d132:	d907      	bls.n	800d144 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	6a1a      	ldr	r2, [r3, #32]
 800d138:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d13c:	1ad2      	subs	r2, r2, r3
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	621a      	str	r2, [r3, #32]
 800d142:	e006      	b.n	800d152 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	6a1b      	ldr	r3, [r3, #32]
 800d148:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	2200      	movs	r2, #0
 800d150:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	785b      	ldrb	r3, [r3, #1]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d16b      	bne.n	800d232 <USB_EPStartXfer+0x344>
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	61bb      	str	r3, [r7, #24]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d164:	b29b      	uxth	r3, r3
 800d166:	461a      	mov	r2, r3
 800d168:	69bb      	ldr	r3, [r7, #24]
 800d16a:	4413      	add	r3, r2
 800d16c:	61bb      	str	r3, [r7, #24]
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	00da      	lsls	r2, r3, #3
 800d174:	69bb      	ldr	r3, [r7, #24]
 800d176:	4413      	add	r3, r2
 800d178:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d17c:	617b      	str	r3, [r7, #20]
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	881b      	ldrh	r3, [r3, #0]
 800d182:	b29b      	uxth	r3, r3
 800d184:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d188:	b29a      	uxth	r2, r3
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	801a      	strh	r2, [r3, #0]
 800d18e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d192:	2b00      	cmp	r3, #0
 800d194:	d10a      	bne.n	800d1ac <USB_EPStartXfer+0x2be>
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	881b      	ldrh	r3, [r3, #0]
 800d19a:	b29b      	uxth	r3, r3
 800d19c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d1a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d1a4:	b29a      	uxth	r2, r3
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	801a      	strh	r2, [r3, #0]
 800d1aa:	e05d      	b.n	800d268 <USB_EPStartXfer+0x37a>
 800d1ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1b0:	2b3e      	cmp	r3, #62	@ 0x3e
 800d1b2:	d81c      	bhi.n	800d1ee <USB_EPStartXfer+0x300>
 800d1b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1b8:	085b      	lsrs	r3, r3, #1
 800d1ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d1be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1c2:	f003 0301 	and.w	r3, r3, #1
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d004      	beq.n	800d1d4 <USB_EPStartXfer+0x2e6>
 800d1ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	881b      	ldrh	r3, [r3, #0]
 800d1d8:	b29a      	uxth	r2, r3
 800d1da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d1de:	b29b      	uxth	r3, r3
 800d1e0:	029b      	lsls	r3, r3, #10
 800d1e2:	b29b      	uxth	r3, r3
 800d1e4:	4313      	orrs	r3, r2
 800d1e6:	b29a      	uxth	r2, r3
 800d1e8:	697b      	ldr	r3, [r7, #20]
 800d1ea:	801a      	strh	r2, [r3, #0]
 800d1ec:	e03c      	b.n	800d268 <USB_EPStartXfer+0x37a>
 800d1ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1f2:	095b      	lsrs	r3, r3, #5
 800d1f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d1f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1fc:	f003 031f 	and.w	r3, r3, #31
 800d200:	2b00      	cmp	r3, #0
 800d202:	d104      	bne.n	800d20e <USB_EPStartXfer+0x320>
 800d204:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d208:	3b01      	subs	r3, #1
 800d20a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	881b      	ldrh	r3, [r3, #0]
 800d212:	b29a      	uxth	r2, r3
 800d214:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d218:	b29b      	uxth	r3, r3
 800d21a:	029b      	lsls	r3, r3, #10
 800d21c:	b29b      	uxth	r3, r3
 800d21e:	4313      	orrs	r3, r2
 800d220:	b29b      	uxth	r3, r3
 800d222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d22a:	b29a      	uxth	r2, r3
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	801a      	strh	r2, [r3, #0]
 800d230:	e01a      	b.n	800d268 <USB_EPStartXfer+0x37a>
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	785b      	ldrb	r3, [r3, #1]
 800d236:	2b01      	cmp	r3, #1
 800d238:	d116      	bne.n	800d268 <USB_EPStartXfer+0x37a>
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	623b      	str	r3, [r7, #32]
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d244:	b29b      	uxth	r3, r3
 800d246:	461a      	mov	r2, r3
 800d248:	6a3b      	ldr	r3, [r7, #32]
 800d24a:	4413      	add	r3, r2
 800d24c:	623b      	str	r3, [r7, #32]
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	00da      	lsls	r2, r3, #3
 800d254:	6a3b      	ldr	r3, [r7, #32]
 800d256:	4413      	add	r3, r2
 800d258:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d25c:	61fb      	str	r3, [r7, #28]
 800d25e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d262:	b29a      	uxth	r2, r3
 800d264:	69fb      	ldr	r3, [r7, #28]
 800d266:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	891b      	ldrh	r3, [r3, #8]
 800d26c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	6959      	ldr	r1, [r3, #20]
 800d274:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d278:	b29b      	uxth	r3, r3
 800d27a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f000 fd19 	bl	800dcb6 <USB_WritePMA>
 800d284:	e2e2      	b.n	800d84c <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	785b      	ldrb	r3, [r3, #1]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d16b      	bne.n	800d366 <USB_EPStartXfer+0x478>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d298:	b29b      	uxth	r3, r3
 800d29a:	461a      	mov	r2, r3
 800d29c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d29e:	4413      	add	r3, r2
 800d2a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	781b      	ldrb	r3, [r3, #0]
 800d2a6:	00da      	lsls	r2, r3, #3
 800d2a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d2aa:	4413      	add	r3, r2
 800d2ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d2b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800d2b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2b4:	881b      	ldrh	r3, [r3, #0]
 800d2b6:	b29b      	uxth	r3, r3
 800d2b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d2bc:	b29a      	uxth	r2, r3
 800d2be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2c0:	801a      	strh	r2, [r3, #0]
 800d2c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d10a      	bne.n	800d2e0 <USB_EPStartXfer+0x3f2>
 800d2ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2cc:	881b      	ldrh	r3, [r3, #0]
 800d2ce:	b29b      	uxth	r3, r3
 800d2d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2d8:	b29a      	uxth	r2, r3
 800d2da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2dc:	801a      	strh	r2, [r3, #0]
 800d2de:	e05d      	b.n	800d39c <USB_EPStartXfer+0x4ae>
 800d2e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2e4:	2b3e      	cmp	r3, #62	@ 0x3e
 800d2e6:	d81c      	bhi.n	800d322 <USB_EPStartXfer+0x434>
 800d2e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2ec:	085b      	lsrs	r3, r3, #1
 800d2ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d2f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2f6:	f003 0301 	and.w	r3, r3, #1
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d004      	beq.n	800d308 <USB_EPStartXfer+0x41a>
 800d2fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d302:	3301      	adds	r3, #1
 800d304:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d308:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d30a:	881b      	ldrh	r3, [r3, #0]
 800d30c:	b29a      	uxth	r2, r3
 800d30e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d312:	b29b      	uxth	r3, r3
 800d314:	029b      	lsls	r3, r3, #10
 800d316:	b29b      	uxth	r3, r3
 800d318:	4313      	orrs	r3, r2
 800d31a:	b29a      	uxth	r2, r3
 800d31c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d31e:	801a      	strh	r2, [r3, #0]
 800d320:	e03c      	b.n	800d39c <USB_EPStartXfer+0x4ae>
 800d322:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d326:	095b      	lsrs	r3, r3, #5
 800d328:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d32c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d330:	f003 031f 	and.w	r3, r3, #31
 800d334:	2b00      	cmp	r3, #0
 800d336:	d104      	bne.n	800d342 <USB_EPStartXfer+0x454>
 800d338:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d33c:	3b01      	subs	r3, #1
 800d33e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d342:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d344:	881b      	ldrh	r3, [r3, #0]
 800d346:	b29a      	uxth	r2, r3
 800d348:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d34c:	b29b      	uxth	r3, r3
 800d34e:	029b      	lsls	r3, r3, #10
 800d350:	b29b      	uxth	r3, r3
 800d352:	4313      	orrs	r3, r2
 800d354:	b29b      	uxth	r3, r3
 800d356:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d35a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d35e:	b29a      	uxth	r2, r3
 800d360:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d362:	801a      	strh	r2, [r3, #0]
 800d364:	e01a      	b.n	800d39c <USB_EPStartXfer+0x4ae>
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	785b      	ldrb	r3, [r3, #1]
 800d36a:	2b01      	cmp	r3, #1
 800d36c:	d116      	bne.n	800d39c <USB_EPStartXfer+0x4ae>
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	653b      	str	r3, [r7, #80]	@ 0x50
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d378:	b29b      	uxth	r3, r3
 800d37a:	461a      	mov	r2, r3
 800d37c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d37e:	4413      	add	r3, r2
 800d380:	653b      	str	r3, [r7, #80]	@ 0x50
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	781b      	ldrb	r3, [r3, #0]
 800d386:	00da      	lsls	r2, r3, #3
 800d388:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d38a:	4413      	add	r3, r2
 800d38c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d390:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d392:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d396:	b29a      	uxth	r2, r3
 800d398:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d39a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	891b      	ldrh	r3, [r3, #8]
 800d3a0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	6959      	ldr	r1, [r3, #20]
 800d3a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d3ac:	b29b      	uxth	r3, r3
 800d3ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f000 fc7f 	bl	800dcb6 <USB_WritePMA>
            ep->xfer_buff += len;
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	695a      	ldr	r2, [r3, #20]
 800d3bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d3c0:	441a      	add	r2, r3
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	6a1a      	ldr	r2, [r3, #32]
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	691b      	ldr	r3, [r3, #16]
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d907      	bls.n	800d3e2 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	6a1a      	ldr	r2, [r3, #32]
 800d3d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d3da:	1ad2      	subs	r2, r2, r3
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	621a      	str	r2, [r3, #32]
 800d3e0:	e006      	b.n	800d3f0 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	6a1b      	ldr	r3, [r3, #32]
 800d3e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	643b      	str	r3, [r7, #64]	@ 0x40
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	785b      	ldrb	r3, [r3, #1]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d16b      	bne.n	800d4d4 <USB_EPStartXfer+0x5e6>
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d406:	b29b      	uxth	r3, r3
 800d408:	461a      	mov	r2, r3
 800d40a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d40c:	4413      	add	r3, r2
 800d40e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	00da      	lsls	r2, r3, #3
 800d416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d418:	4413      	add	r3, r2
 800d41a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d41e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d422:	881b      	ldrh	r3, [r3, #0]
 800d424:	b29b      	uxth	r3, r3
 800d426:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d42a:	b29a      	uxth	r2, r3
 800d42c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d42e:	801a      	strh	r2, [r3, #0]
 800d430:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d434:	2b00      	cmp	r3, #0
 800d436:	d10a      	bne.n	800d44e <USB_EPStartXfer+0x560>
 800d438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d43a:	881b      	ldrh	r3, [r3, #0]
 800d43c:	b29b      	uxth	r3, r3
 800d43e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d442:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d446:	b29a      	uxth	r2, r3
 800d448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d44a:	801a      	strh	r2, [r3, #0]
 800d44c:	e05b      	b.n	800d506 <USB_EPStartXfer+0x618>
 800d44e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d452:	2b3e      	cmp	r3, #62	@ 0x3e
 800d454:	d81c      	bhi.n	800d490 <USB_EPStartXfer+0x5a2>
 800d456:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d45a:	085b      	lsrs	r3, r3, #1
 800d45c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d460:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d464:	f003 0301 	and.w	r3, r3, #1
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d004      	beq.n	800d476 <USB_EPStartXfer+0x588>
 800d46c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d470:	3301      	adds	r3, #1
 800d472:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d478:	881b      	ldrh	r3, [r3, #0]
 800d47a:	b29a      	uxth	r2, r3
 800d47c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d480:	b29b      	uxth	r3, r3
 800d482:	029b      	lsls	r3, r3, #10
 800d484:	b29b      	uxth	r3, r3
 800d486:	4313      	orrs	r3, r2
 800d488:	b29a      	uxth	r2, r3
 800d48a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d48c:	801a      	strh	r2, [r3, #0]
 800d48e:	e03a      	b.n	800d506 <USB_EPStartXfer+0x618>
 800d490:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d494:	095b      	lsrs	r3, r3, #5
 800d496:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d49a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d49e:	f003 031f 	and.w	r3, r3, #31
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d104      	bne.n	800d4b0 <USB_EPStartXfer+0x5c2>
 800d4a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d4aa:	3b01      	subs	r3, #1
 800d4ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d4b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4b2:	881b      	ldrh	r3, [r3, #0]
 800d4b4:	b29a      	uxth	r2, r3
 800d4b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d4ba:	b29b      	uxth	r3, r3
 800d4bc:	029b      	lsls	r3, r3, #10
 800d4be:	b29b      	uxth	r3, r3
 800d4c0:	4313      	orrs	r3, r2
 800d4c2:	b29b      	uxth	r3, r3
 800d4c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d4c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d4cc:	b29a      	uxth	r2, r3
 800d4ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4d0:	801a      	strh	r2, [r3, #0]
 800d4d2:	e018      	b.n	800d506 <USB_EPStartXfer+0x618>
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	785b      	ldrb	r3, [r3, #1]
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	d114      	bne.n	800d506 <USB_EPStartXfer+0x618>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d4e2:	b29b      	uxth	r3, r3
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4e8:	4413      	add	r3, r2
 800d4ea:	643b      	str	r3, [r7, #64]	@ 0x40
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	00da      	lsls	r2, r3, #3
 800d4f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4f4:	4413      	add	r3, r2
 800d4f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d4fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d4fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d500:	b29a      	uxth	r2, r3
 800d502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d504:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	895b      	ldrh	r3, [r3, #10]
 800d50a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	6959      	ldr	r1, [r3, #20]
 800d512:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d516:	b29b      	uxth	r3, r3
 800d518:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f000 fbca 	bl	800dcb6 <USB_WritePMA>
 800d522:	e193      	b.n	800d84c <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	6a1b      	ldr	r3, [r3, #32]
 800d528:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d52c:	687a      	ldr	r2, [r7, #4]
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	781b      	ldrb	r3, [r3, #0]
 800d532:	009b      	lsls	r3, r3, #2
 800d534:	4413      	add	r3, r2
 800d536:	881b      	ldrh	r3, [r3, #0]
 800d538:	b29b      	uxth	r3, r3
 800d53a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d53e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d542:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d546:	687a      	ldr	r2, [r7, #4]
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	781b      	ldrb	r3, [r3, #0]
 800d54c:	009b      	lsls	r3, r3, #2
 800d54e:	441a      	add	r2, r3
 800d550:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d554:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d558:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d55c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d560:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d564:	b29b      	uxth	r3, r3
 800d566:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d572:	b29b      	uxth	r3, r3
 800d574:	461a      	mov	r2, r3
 800d576:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d578:	4413      	add	r3, r2
 800d57a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	781b      	ldrb	r3, [r3, #0]
 800d580:	00da      	lsls	r2, r3, #3
 800d582:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d584:	4413      	add	r3, r2
 800d586:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d58a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d58c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d590:	b29a      	uxth	r2, r3
 800d592:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d594:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	891b      	ldrh	r3, [r3, #8]
 800d59a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	6959      	ldr	r1, [r3, #20]
 800d5a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d5a6:	b29b      	uxth	r3, r3
 800d5a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f000 fb82 	bl	800dcb6 <USB_WritePMA>
 800d5b2:	e14b      	b.n	800d84c <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	6a1a      	ldr	r2, [r3, #32]
 800d5b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d5bc:	1ad2      	subs	r2, r2, r3
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d5c2:	687a      	ldr	r2, [r7, #4]
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	009b      	lsls	r3, r3, #2
 800d5ca:	4413      	add	r3, r2
 800d5cc:	881b      	ldrh	r3, [r3, #0]
 800d5ce:	b29b      	uxth	r3, r3
 800d5d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	f000 809a 	beq.w	800d70e <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	673b      	str	r3, [r7, #112]	@ 0x70
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	785b      	ldrb	r3, [r3, #1]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d16b      	bne.n	800d6be <USB_EPStartXfer+0x7d0>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d5f0:	b29b      	uxth	r3, r3
 800d5f2:	461a      	mov	r2, r3
 800d5f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d5f6:	4413      	add	r3, r2
 800d5f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	00da      	lsls	r2, r3, #3
 800d600:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d602:	4413      	add	r3, r2
 800d604:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d608:	667b      	str	r3, [r7, #100]	@ 0x64
 800d60a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d60c:	881b      	ldrh	r3, [r3, #0]
 800d60e:	b29b      	uxth	r3, r3
 800d610:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d614:	b29a      	uxth	r2, r3
 800d616:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d618:	801a      	strh	r2, [r3, #0]
 800d61a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d10a      	bne.n	800d638 <USB_EPStartXfer+0x74a>
 800d622:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d624:	881b      	ldrh	r3, [r3, #0]
 800d626:	b29b      	uxth	r3, r3
 800d628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d62c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d630:	b29a      	uxth	r2, r3
 800d632:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d634:	801a      	strh	r2, [r3, #0]
 800d636:	e05b      	b.n	800d6f0 <USB_EPStartXfer+0x802>
 800d638:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d63c:	2b3e      	cmp	r3, #62	@ 0x3e
 800d63e:	d81c      	bhi.n	800d67a <USB_EPStartXfer+0x78c>
 800d640:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d644:	085b      	lsrs	r3, r3, #1
 800d646:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d64a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d64e:	f003 0301 	and.w	r3, r3, #1
 800d652:	2b00      	cmp	r3, #0
 800d654:	d004      	beq.n	800d660 <USB_EPStartXfer+0x772>
 800d656:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d65a:	3301      	adds	r3, #1
 800d65c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d660:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d662:	881b      	ldrh	r3, [r3, #0]
 800d664:	b29a      	uxth	r2, r3
 800d666:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d66a:	b29b      	uxth	r3, r3
 800d66c:	029b      	lsls	r3, r3, #10
 800d66e:	b29b      	uxth	r3, r3
 800d670:	4313      	orrs	r3, r2
 800d672:	b29a      	uxth	r2, r3
 800d674:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d676:	801a      	strh	r2, [r3, #0]
 800d678:	e03a      	b.n	800d6f0 <USB_EPStartXfer+0x802>
 800d67a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d67e:	095b      	lsrs	r3, r3, #5
 800d680:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d684:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d688:	f003 031f 	and.w	r3, r3, #31
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d104      	bne.n	800d69a <USB_EPStartXfer+0x7ac>
 800d690:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d694:	3b01      	subs	r3, #1
 800d696:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d69a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d69c:	881b      	ldrh	r3, [r3, #0]
 800d69e:	b29a      	uxth	r2, r3
 800d6a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d6a4:	b29b      	uxth	r3, r3
 800d6a6:	029b      	lsls	r3, r3, #10
 800d6a8:	b29b      	uxth	r3, r3
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	b29b      	uxth	r3, r3
 800d6ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d6b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d6b6:	b29a      	uxth	r2, r3
 800d6b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d6ba:	801a      	strh	r2, [r3, #0]
 800d6bc:	e018      	b.n	800d6f0 <USB_EPStartXfer+0x802>
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	785b      	ldrb	r3, [r3, #1]
 800d6c2:	2b01      	cmp	r3, #1
 800d6c4:	d114      	bne.n	800d6f0 <USB_EPStartXfer+0x802>
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d6cc:	b29b      	uxth	r3, r3
 800d6ce:	461a      	mov	r2, r3
 800d6d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d6d2:	4413      	add	r3, r2
 800d6d4:	673b      	str	r3, [r7, #112]	@ 0x70
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	00da      	lsls	r2, r3, #3
 800d6dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d6de:	4413      	add	r3, r2
 800d6e0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d6e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d6e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d6ea:	b29a      	uxth	r2, r3
 800d6ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d6ee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	895b      	ldrh	r3, [r3, #10]
 800d6f4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	6959      	ldr	r1, [r3, #20]
 800d6fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d700:	b29b      	uxth	r3, r3
 800d702:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f000 fad5 	bl	800dcb6 <USB_WritePMA>
 800d70c:	e09e      	b.n	800d84c <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	785b      	ldrb	r3, [r3, #1]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d16b      	bne.n	800d7ee <USB_EPStartXfer+0x900>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d720:	b29b      	uxth	r3, r3
 800d722:	461a      	mov	r2, r3
 800d724:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d726:	4413      	add	r3, r2
 800d728:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	781b      	ldrb	r3, [r3, #0]
 800d72e:	00da      	lsls	r2, r3, #3
 800d730:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d732:	4413      	add	r3, r2
 800d734:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d738:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d73a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d73c:	881b      	ldrh	r3, [r3, #0]
 800d73e:	b29b      	uxth	r3, r3
 800d740:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d744:	b29a      	uxth	r2, r3
 800d746:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d748:	801a      	strh	r2, [r3, #0]
 800d74a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d10a      	bne.n	800d768 <USB_EPStartXfer+0x87a>
 800d752:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d754:	881b      	ldrh	r3, [r3, #0]
 800d756:	b29b      	uxth	r3, r3
 800d758:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d75c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d760:	b29a      	uxth	r2, r3
 800d762:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d764:	801a      	strh	r2, [r3, #0]
 800d766:	e063      	b.n	800d830 <USB_EPStartXfer+0x942>
 800d768:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d76c:	2b3e      	cmp	r3, #62	@ 0x3e
 800d76e:	d81c      	bhi.n	800d7aa <USB_EPStartXfer+0x8bc>
 800d770:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d774:	085b      	lsrs	r3, r3, #1
 800d776:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d77a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d77e:	f003 0301 	and.w	r3, r3, #1
 800d782:	2b00      	cmp	r3, #0
 800d784:	d004      	beq.n	800d790 <USB_EPStartXfer+0x8a2>
 800d786:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d78a:	3301      	adds	r3, #1
 800d78c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d790:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d792:	881b      	ldrh	r3, [r3, #0]
 800d794:	b29a      	uxth	r2, r3
 800d796:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d79a:	b29b      	uxth	r3, r3
 800d79c:	029b      	lsls	r3, r3, #10
 800d79e:	b29b      	uxth	r3, r3
 800d7a0:	4313      	orrs	r3, r2
 800d7a2:	b29a      	uxth	r2, r3
 800d7a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d7a6:	801a      	strh	r2, [r3, #0]
 800d7a8:	e042      	b.n	800d830 <USB_EPStartXfer+0x942>
 800d7aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d7ae:	095b      	lsrs	r3, r3, #5
 800d7b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d7b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d7b8:	f003 031f 	and.w	r3, r3, #31
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d104      	bne.n	800d7ca <USB_EPStartXfer+0x8dc>
 800d7c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d7c4:	3b01      	subs	r3, #1
 800d7c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d7ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d7cc:	881b      	ldrh	r3, [r3, #0]
 800d7ce:	b29a      	uxth	r2, r3
 800d7d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d7d4:	b29b      	uxth	r3, r3
 800d7d6:	029b      	lsls	r3, r3, #10
 800d7d8:	b29b      	uxth	r3, r3
 800d7da:	4313      	orrs	r3, r2
 800d7dc:	b29b      	uxth	r3, r3
 800d7de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d7e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d7e6:	b29a      	uxth	r2, r3
 800d7e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d7ea:	801a      	strh	r2, [r3, #0]
 800d7ec:	e020      	b.n	800d830 <USB_EPStartXfer+0x942>
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	785b      	ldrb	r3, [r3, #1]
 800d7f2:	2b01      	cmp	r3, #1
 800d7f4:	d11c      	bne.n	800d830 <USB_EPStartXfer+0x942>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d802:	b29b      	uxth	r3, r3
 800d804:	461a      	mov	r2, r3
 800d806:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d80a:	4413      	add	r3, r2
 800d80c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	781b      	ldrb	r3, [r3, #0]
 800d814:	00da      	lsls	r2, r3, #3
 800d816:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d81a:	4413      	add	r3, r2
 800d81c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d820:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d824:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d828:	b29a      	uxth	r2, r3
 800d82a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d82e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	891b      	ldrh	r3, [r3, #8]
 800d834:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	6959      	ldr	r1, [r3, #20]
 800d83c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d840:	b29b      	uxth	r3, r3
 800d842:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f000 fa35 	bl	800dcb6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d84c:	687a      	ldr	r2, [r7, #4]
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	781b      	ldrb	r3, [r3, #0]
 800d852:	009b      	lsls	r3, r3, #2
 800d854:	4413      	add	r3, r2
 800d856:	881b      	ldrh	r3, [r3, #0]
 800d858:	b29b      	uxth	r3, r3
 800d85a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d85e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d862:	817b      	strh	r3, [r7, #10]
 800d864:	897b      	ldrh	r3, [r7, #10]
 800d866:	f083 0310 	eor.w	r3, r3, #16
 800d86a:	817b      	strh	r3, [r7, #10]
 800d86c:	897b      	ldrh	r3, [r7, #10]
 800d86e:	f083 0320 	eor.w	r3, r3, #32
 800d872:	817b      	strh	r3, [r7, #10]
 800d874:	687a      	ldr	r2, [r7, #4]
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	781b      	ldrb	r3, [r3, #0]
 800d87a:	009b      	lsls	r3, r3, #2
 800d87c:	441a      	add	r2, r3
 800d87e:	897b      	ldrh	r3, [r7, #10]
 800d880:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d884:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d888:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d88c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d890:	b29b      	uxth	r3, r3
 800d892:	8013      	strh	r3, [r2, #0]
 800d894:	e0d5      	b.n	800da42 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	7b1b      	ldrb	r3, [r3, #12]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d156      	bne.n	800d94c <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	699b      	ldr	r3, [r3, #24]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d122      	bne.n	800d8ec <USB_EPStartXfer+0x9fe>
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	78db      	ldrb	r3, [r3, #3]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d11e      	bne.n	800d8ec <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800d8ae:	687a      	ldr	r2, [r7, #4]
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	781b      	ldrb	r3, [r3, #0]
 800d8b4:	009b      	lsls	r3, r3, #2
 800d8b6:	4413      	add	r3, r2
 800d8b8:	881b      	ldrh	r3, [r3, #0]
 800d8ba:	b29b      	uxth	r3, r3
 800d8bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d8c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d8c4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800d8c8:	687a      	ldr	r2, [r7, #4]
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	781b      	ldrb	r3, [r3, #0]
 800d8ce:	009b      	lsls	r3, r3, #2
 800d8d0:	441a      	add	r2, r3
 800d8d2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800d8d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d8da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d8de:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d8e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8e6:	b29b      	uxth	r3, r3
 800d8e8:	8013      	strh	r3, [r2, #0]
 800d8ea:	e01d      	b.n	800d928 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800d8ec:	687a      	ldr	r2, [r7, #4]
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	009b      	lsls	r3, r3, #2
 800d8f4:	4413      	add	r3, r2
 800d8f6:	881b      	ldrh	r3, [r3, #0]
 800d8f8:	b29b      	uxth	r3, r3
 800d8fa:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d8fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d902:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800d906:	687a      	ldr	r2, [r7, #4]
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	781b      	ldrb	r3, [r3, #0]
 800d90c:	009b      	lsls	r3, r3, #2
 800d90e:	441a      	add	r2, r3
 800d910:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800d914:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d918:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d91c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d924:	b29b      	uxth	r3, r3
 800d926:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	699a      	ldr	r2, [r3, #24]
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	691b      	ldr	r3, [r3, #16]
 800d930:	429a      	cmp	r2, r3
 800d932:	d907      	bls.n	800d944 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	699a      	ldr	r2, [r3, #24]
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	691b      	ldr	r3, [r3, #16]
 800d93c:	1ad2      	subs	r2, r2, r3
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	619a      	str	r2, [r3, #24]
 800d942:	e054      	b.n	800d9ee <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	2200      	movs	r2, #0
 800d948:	619a      	str	r2, [r3, #24]
 800d94a:	e050      	b.n	800d9ee <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	78db      	ldrb	r3, [r3, #3]
 800d950:	2b02      	cmp	r3, #2
 800d952:	d142      	bne.n	800d9da <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	69db      	ldr	r3, [r3, #28]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d048      	beq.n	800d9ee <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800d95c:	687a      	ldr	r2, [r7, #4]
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	781b      	ldrb	r3, [r3, #0]
 800d962:	009b      	lsls	r3, r3, #2
 800d964:	4413      	add	r3, r2
 800d966:	881b      	ldrh	r3, [r3, #0]
 800d968:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d96c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d970:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d974:	2b00      	cmp	r3, #0
 800d976:	d005      	beq.n	800d984 <USB_EPStartXfer+0xa96>
 800d978:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d97c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d980:	2b00      	cmp	r3, #0
 800d982:	d10b      	bne.n	800d99c <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d984:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d988:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d12e      	bne.n	800d9ee <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d990:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d128      	bne.n	800d9ee <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d99c:	687a      	ldr	r2, [r7, #4]
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	781b      	ldrb	r3, [r3, #0]
 800d9a2:	009b      	lsls	r3, r3, #2
 800d9a4:	4413      	add	r3, r2
 800d9a6:	881b      	ldrh	r3, [r3, #0]
 800d9a8:	b29b      	uxth	r3, r3
 800d9aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d9ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d9b2:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800d9b6:	687a      	ldr	r2, [r7, #4]
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	781b      	ldrb	r3, [r3, #0]
 800d9bc:	009b      	lsls	r3, r3, #2
 800d9be:	441a      	add	r2, r3
 800d9c0:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800d9c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d9c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d9cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d9d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d9d4:	b29b      	uxth	r3, r3
 800d9d6:	8013      	strh	r3, [r2, #0]
 800d9d8:	e009      	b.n	800d9ee <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	78db      	ldrb	r3, [r3, #3]
 800d9de:	2b01      	cmp	r3, #1
 800d9e0:	d103      	bne.n	800d9ea <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	619a      	str	r2, [r3, #24]
 800d9e8:	e001      	b.n	800d9ee <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	e02a      	b.n	800da44 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d9ee:	687a      	ldr	r2, [r7, #4]
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	781b      	ldrb	r3, [r3, #0]
 800d9f4:	009b      	lsls	r3, r3, #2
 800d9f6:	4413      	add	r3, r2
 800d9f8:	881b      	ldrh	r3, [r3, #0]
 800d9fa:	b29b      	uxth	r3, r3
 800d9fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800da00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da04:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800da08:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800da0c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800da10:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800da14:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800da18:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800da1c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800da20:	687a      	ldr	r2, [r7, #4]
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	781b      	ldrb	r3, [r3, #0]
 800da26:	009b      	lsls	r3, r3, #2
 800da28:	441a      	add	r2, r3
 800da2a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800da2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da3e:	b29b      	uxth	r3, r3
 800da40:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800da42:	2300      	movs	r3, #0
}
 800da44:	4618      	mov	r0, r3
 800da46:	37b0      	adds	r7, #176	@ 0xb0
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}

0800da4c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800da4c:	b480      	push	{r7}
 800da4e:	b085      	sub	sp, #20
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
 800da54:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	785b      	ldrb	r3, [r3, #1]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d020      	beq.n	800daa0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800da5e:	687a      	ldr	r2, [r7, #4]
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	009b      	lsls	r3, r3, #2
 800da66:	4413      	add	r3, r2
 800da68:	881b      	ldrh	r3, [r3, #0]
 800da6a:	b29b      	uxth	r3, r3
 800da6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800da70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800da74:	81bb      	strh	r3, [r7, #12]
 800da76:	89bb      	ldrh	r3, [r7, #12]
 800da78:	f083 0310 	eor.w	r3, r3, #16
 800da7c:	81bb      	strh	r3, [r7, #12]
 800da7e:	687a      	ldr	r2, [r7, #4]
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	781b      	ldrb	r3, [r3, #0]
 800da84:	009b      	lsls	r3, r3, #2
 800da86:	441a      	add	r2, r3
 800da88:	89bb      	ldrh	r3, [r7, #12]
 800da8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da9a:	b29b      	uxth	r3, r3
 800da9c:	8013      	strh	r3, [r2, #0]
 800da9e:	e01f      	b.n	800dae0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	781b      	ldrb	r3, [r3, #0]
 800daa6:	009b      	lsls	r3, r3, #2
 800daa8:	4413      	add	r3, r2
 800daaa:	881b      	ldrh	r3, [r3, #0]
 800daac:	b29b      	uxth	r3, r3
 800daae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dab6:	81fb      	strh	r3, [r7, #14]
 800dab8:	89fb      	ldrh	r3, [r7, #14]
 800daba:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800dabe:	81fb      	strh	r3, [r7, #14]
 800dac0:	687a      	ldr	r2, [r7, #4]
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	009b      	lsls	r3, r3, #2
 800dac8:	441a      	add	r2, r3
 800daca:	89fb      	ldrh	r3, [r7, #14]
 800dacc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dad0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dad4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dadc:	b29b      	uxth	r3, r3
 800dade:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800dae0:	2300      	movs	r3, #0
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3714      	adds	r7, #20
 800dae6:	46bd      	mov	sp, r7
 800dae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daec:	4770      	bx	lr

0800daee <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800daee:	b480      	push	{r7}
 800daf0:	b087      	sub	sp, #28
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	6078      	str	r0, [r7, #4]
 800daf6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	785b      	ldrb	r3, [r3, #1]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d04c      	beq.n	800db9a <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800db00:	687a      	ldr	r2, [r7, #4]
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	781b      	ldrb	r3, [r3, #0]
 800db06:	009b      	lsls	r3, r3, #2
 800db08:	4413      	add	r3, r2
 800db0a:	881b      	ldrh	r3, [r3, #0]
 800db0c:	823b      	strh	r3, [r7, #16]
 800db0e:	8a3b      	ldrh	r3, [r7, #16]
 800db10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db14:	2b00      	cmp	r3, #0
 800db16:	d01b      	beq.n	800db50 <USB_EPClearStall+0x62>
 800db18:	687a      	ldr	r2, [r7, #4]
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	781b      	ldrb	r3, [r3, #0]
 800db1e:	009b      	lsls	r3, r3, #2
 800db20:	4413      	add	r3, r2
 800db22:	881b      	ldrh	r3, [r3, #0]
 800db24:	b29b      	uxth	r3, r3
 800db26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800db2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800db2e:	81fb      	strh	r3, [r7, #14]
 800db30:	687a      	ldr	r2, [r7, #4]
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	781b      	ldrb	r3, [r3, #0]
 800db36:	009b      	lsls	r3, r3, #2
 800db38:	441a      	add	r2, r3
 800db3a:	89fb      	ldrh	r3, [r7, #14]
 800db3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800db40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800db44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db48:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800db4c:	b29b      	uxth	r3, r3
 800db4e:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	78db      	ldrb	r3, [r3, #3]
 800db54:	2b01      	cmp	r3, #1
 800db56:	d06c      	beq.n	800dc32 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800db58:	687a      	ldr	r2, [r7, #4]
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	009b      	lsls	r3, r3, #2
 800db60:	4413      	add	r3, r2
 800db62:	881b      	ldrh	r3, [r3, #0]
 800db64:	b29b      	uxth	r3, r3
 800db66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800db6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800db6e:	81bb      	strh	r3, [r7, #12]
 800db70:	89bb      	ldrh	r3, [r7, #12]
 800db72:	f083 0320 	eor.w	r3, r3, #32
 800db76:	81bb      	strh	r3, [r7, #12]
 800db78:	687a      	ldr	r2, [r7, #4]
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	009b      	lsls	r3, r3, #2
 800db80:	441a      	add	r2, r3
 800db82:	89bb      	ldrh	r3, [r7, #12]
 800db84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800db88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800db8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db94:	b29b      	uxth	r3, r3
 800db96:	8013      	strh	r3, [r2, #0]
 800db98:	e04b      	b.n	800dc32 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800db9a:	687a      	ldr	r2, [r7, #4]
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	009b      	lsls	r3, r3, #2
 800dba2:	4413      	add	r3, r2
 800dba4:	881b      	ldrh	r3, [r3, #0]
 800dba6:	82fb      	strh	r3, [r7, #22]
 800dba8:	8afb      	ldrh	r3, [r7, #22]
 800dbaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d01b      	beq.n	800dbea <USB_EPClearStall+0xfc>
 800dbb2:	687a      	ldr	r2, [r7, #4]
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	009b      	lsls	r3, r3, #2
 800dbba:	4413      	add	r3, r2
 800dbbc:	881b      	ldrh	r3, [r3, #0]
 800dbbe:	b29b      	uxth	r3, r3
 800dbc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dbc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dbc8:	82bb      	strh	r3, [r7, #20]
 800dbca:	687a      	ldr	r2, [r7, #4]
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	009b      	lsls	r3, r3, #2
 800dbd2:	441a      	add	r2, r3
 800dbd4:	8abb      	ldrh	r3, [r7, #20]
 800dbd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dbda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dbde:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800dbe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbe6:	b29b      	uxth	r3, r3
 800dbe8:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800dbea:	687a      	ldr	r2, [r7, #4]
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	009b      	lsls	r3, r3, #2
 800dbf2:	4413      	add	r3, r2
 800dbf4:	881b      	ldrh	r3, [r3, #0]
 800dbf6:	b29b      	uxth	r3, r3
 800dbf8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dbfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dc00:	827b      	strh	r3, [r7, #18]
 800dc02:	8a7b      	ldrh	r3, [r7, #18]
 800dc04:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800dc08:	827b      	strh	r3, [r7, #18]
 800dc0a:	8a7b      	ldrh	r3, [r7, #18]
 800dc0c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800dc10:	827b      	strh	r3, [r7, #18]
 800dc12:	687a      	ldr	r2, [r7, #4]
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	009b      	lsls	r3, r3, #2
 800dc1a:	441a      	add	r2, r3
 800dc1c:	8a7b      	ldrh	r3, [r7, #18]
 800dc1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dc22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dc26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dc2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc2e:	b29b      	uxth	r3, r3
 800dc30:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800dc32:	2300      	movs	r3, #0
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	371c      	adds	r7, #28
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3e:	4770      	bx	lr

0800dc40 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800dc40:	b480      	push	{r7}
 800dc42:	b083      	sub	sp, #12
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
 800dc48:	460b      	mov	r3, r1
 800dc4a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800dc4c:	78fb      	ldrb	r3, [r7, #3]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d103      	bne.n	800dc5a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2280      	movs	r2, #128	@ 0x80
 800dc56:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800dc5a:	2300      	movs	r3, #0
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	370c      	adds	r7, #12
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr

0800dc68 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800dc68:	b480      	push	{r7}
 800dc6a:	b083      	sub	sp, #12
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800dc76:	b29b      	uxth	r3, r3
 800dc78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc80:	b29a      	uxth	r2, r3
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800dc88:	2300      	movs	r3, #0
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	370c      	adds	r7, #12
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc94:	4770      	bx	lr

0800dc96 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800dc96:	b480      	push	{r7}
 800dc98:	b085      	sub	sp, #20
 800dc9a:	af00      	add	r7, sp, #0
 800dc9c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800dca4:	b29b      	uxth	r3, r3
 800dca6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800dca8:	68fb      	ldr	r3, [r7, #12]
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3714      	adds	r7, #20
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb4:	4770      	bx	lr

0800dcb6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800dcb6:	b480      	push	{r7}
 800dcb8:	b08b      	sub	sp, #44	@ 0x2c
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	60f8      	str	r0, [r7, #12]
 800dcbe:	60b9      	str	r1, [r7, #8]
 800dcc0:	4611      	mov	r1, r2
 800dcc2:	461a      	mov	r2, r3
 800dcc4:	460b      	mov	r3, r1
 800dcc6:	80fb      	strh	r3, [r7, #6]
 800dcc8:	4613      	mov	r3, r2
 800dcca:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800dccc:	88bb      	ldrh	r3, [r7, #4]
 800dcce:	3301      	adds	r3, #1
 800dcd0:	085b      	lsrs	r3, r3, #1
 800dcd2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800dcdc:	88fa      	ldrh	r2, [r7, #6]
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	4413      	add	r3, r2
 800dce2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dce6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800dce8:	69bb      	ldr	r3, [r7, #24]
 800dcea:	627b      	str	r3, [r7, #36]	@ 0x24
 800dcec:	e01b      	b.n	800dd26 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800dcee:	69fb      	ldr	r3, [r7, #28]
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800dcf4:	69fb      	ldr	r3, [r7, #28]
 800dcf6:	3301      	adds	r3, #1
 800dcf8:	781b      	ldrb	r3, [r3, #0]
 800dcfa:	021b      	lsls	r3, r3, #8
 800dcfc:	b21a      	sxth	r2, r3
 800dcfe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dd02:	4313      	orrs	r3, r2
 800dd04:	b21b      	sxth	r3, r3
 800dd06:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800dd08:	6a3b      	ldr	r3, [r7, #32]
 800dd0a:	8a7a      	ldrh	r2, [r7, #18]
 800dd0c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800dd0e:	6a3b      	ldr	r3, [r7, #32]
 800dd10:	3302      	adds	r3, #2
 800dd12:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800dd14:	69fb      	ldr	r3, [r7, #28]
 800dd16:	3301      	adds	r3, #1
 800dd18:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800dd1a:	69fb      	ldr	r3, [r7, #28]
 800dd1c:	3301      	adds	r3, #1
 800dd1e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800dd20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd22:	3b01      	subs	r3, #1
 800dd24:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d1e0      	bne.n	800dcee <USB_WritePMA+0x38>
  }
}
 800dd2c:	bf00      	nop
 800dd2e:	bf00      	nop
 800dd30:	372c      	adds	r7, #44	@ 0x2c
 800dd32:	46bd      	mov	sp, r7
 800dd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd38:	4770      	bx	lr

0800dd3a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800dd3a:	b480      	push	{r7}
 800dd3c:	b08b      	sub	sp, #44	@ 0x2c
 800dd3e:	af00      	add	r7, sp, #0
 800dd40:	60f8      	str	r0, [r7, #12]
 800dd42:	60b9      	str	r1, [r7, #8]
 800dd44:	4611      	mov	r1, r2
 800dd46:	461a      	mov	r2, r3
 800dd48:	460b      	mov	r3, r1
 800dd4a:	80fb      	strh	r3, [r7, #6]
 800dd4c:	4613      	mov	r3, r2
 800dd4e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800dd50:	88bb      	ldrh	r3, [r7, #4]
 800dd52:	085b      	lsrs	r3, r3, #1
 800dd54:	b29b      	uxth	r3, r3
 800dd56:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800dd60:	88fa      	ldrh	r2, [r7, #6]
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	4413      	add	r3, r2
 800dd66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dd6a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800dd6c:	69bb      	ldr	r3, [r7, #24]
 800dd6e:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd70:	e018      	b.n	800dda4 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800dd72:	6a3b      	ldr	r3, [r7, #32]
 800dd74:	881b      	ldrh	r3, [r3, #0]
 800dd76:	b29b      	uxth	r3, r3
 800dd78:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800dd7a:	6a3b      	ldr	r3, [r7, #32]
 800dd7c:	3302      	adds	r3, #2
 800dd7e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800dd80:	693b      	ldr	r3, [r7, #16]
 800dd82:	b2da      	uxtb	r2, r3
 800dd84:	69fb      	ldr	r3, [r7, #28]
 800dd86:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800dd88:	69fb      	ldr	r3, [r7, #28]
 800dd8a:	3301      	adds	r3, #1
 800dd8c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	0a1b      	lsrs	r3, r3, #8
 800dd92:	b2da      	uxtb	r2, r3
 800dd94:	69fb      	ldr	r3, [r7, #28]
 800dd96:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800dd98:	69fb      	ldr	r3, [r7, #28]
 800dd9a:	3301      	adds	r3, #1
 800dd9c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800dd9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dda0:	3b01      	subs	r3, #1
 800dda2:	627b      	str	r3, [r7, #36]	@ 0x24
 800dda4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d1e3      	bne.n	800dd72 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ddaa:	88bb      	ldrh	r3, [r7, #4]
 800ddac:	f003 0301 	and.w	r3, r3, #1
 800ddb0:	b29b      	uxth	r3, r3
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d007      	beq.n	800ddc6 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800ddb6:	6a3b      	ldr	r3, [r7, #32]
 800ddb8:	881b      	ldrh	r3, [r3, #0]
 800ddba:	b29b      	uxth	r3, r3
 800ddbc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ddbe:	693b      	ldr	r3, [r7, #16]
 800ddc0:	b2da      	uxtb	r2, r3
 800ddc2:	69fb      	ldr	r3, [r7, #28]
 800ddc4:	701a      	strb	r2, [r3, #0]
  }
}
 800ddc6:	bf00      	nop
 800ddc8:	372c      	adds	r7, #44	@ 0x2c
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd0:	4770      	bx	lr

0800ddd2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ddd2:	b580      	push	{r7, lr}
 800ddd4:	b084      	sub	sp, #16
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	6078      	str	r0, [r7, #4]
 800ddda:	460b      	mov	r3, r1
 800dddc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ddde:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800dde2:	f002 f923 	bl	801002c <USBD_static_malloc>
 800dde6:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d105      	bne.n	800ddfa <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800ddf6:	2302      	movs	r3, #2
 800ddf8:	e066      	b.n	800dec8 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	68fa      	ldr	r2, [r7, #12]
 800ddfe:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	7c1b      	ldrb	r3, [r3, #16]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d119      	bne.n	800de3e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800de0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800de0e:	2202      	movs	r2, #2
 800de10:	2181      	movs	r1, #129	@ 0x81
 800de12:	6878      	ldr	r0, [r7, #4]
 800de14:	f001 ffb1 	bl	800fd7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2201      	movs	r2, #1
 800de1c:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800de1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800de22:	2202      	movs	r2, #2
 800de24:	2101      	movs	r1, #1
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f001 ffa7 	bl	800fd7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2201      	movs	r2, #1
 800de30:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2210      	movs	r2, #16
 800de38:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800de3c:	e016      	b.n	800de6c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800de3e:	2340      	movs	r3, #64	@ 0x40
 800de40:	2202      	movs	r2, #2
 800de42:	2181      	movs	r1, #129	@ 0x81
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f001 ff98 	bl	800fd7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2201      	movs	r2, #1
 800de4e:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800de50:	2340      	movs	r3, #64	@ 0x40
 800de52:	2202      	movs	r2, #2
 800de54:	2101      	movs	r1, #1
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f001 ff8f 	bl	800fd7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2201      	movs	r2, #1
 800de60:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2210      	movs	r2, #16
 800de68:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800de6c:	2308      	movs	r3, #8
 800de6e:	2203      	movs	r2, #3
 800de70:	2182      	movs	r1, #130	@ 0x82
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f001 ff81 	bl	800fd7a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2201      	movs	r2, #1
 800de7c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	2200      	movs	r2, #0
 800de8e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	2200      	movs	r2, #0
 800de96:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	7c1b      	ldrb	r3, [r3, #16]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d109      	bne.n	800deb6 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dea8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800deac:	2101      	movs	r1, #1
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f002 f852 	bl	800ff58 <USBD_LL_PrepareReceive>
 800deb4:	e007      	b.n	800dec6 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800debc:	2340      	movs	r3, #64	@ 0x40
 800debe:	2101      	movs	r1, #1
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f002 f849 	bl	800ff58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dec6:	2300      	movs	r3, #0
}
 800dec8:	4618      	mov	r0, r3
 800deca:	3710      	adds	r7, #16
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}

0800ded0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b082      	sub	sp, #8
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
 800ded8:	460b      	mov	r3, r1
 800deda:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800dedc:	2181      	movs	r1, #129	@ 0x81
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f001 ff71 	bl	800fdc6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2200      	movs	r2, #0
 800dee8:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800deea:	2101      	movs	r1, #1
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f001 ff6a 	bl	800fdc6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2200      	movs	r2, #0
 800def6:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800defa:	2182      	movs	r1, #130	@ 0x82
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f001 ff62 	bl	800fdc6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2200      	movs	r2, #0
 800df06:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2200      	movs	r2, #0
 800df0e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d00e      	beq.n	800df3a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800df22:	685b      	ldr	r3, [r3, #4]
 800df24:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800df2c:	4618      	mov	r0, r3
 800df2e:	f002 f88b 	bl	8010048 <USBD_static_free>
    pdev->pClassData = NULL;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2200      	movs	r2, #0
 800df36:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800df3a:	2300      	movs	r3, #0
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	3708      	adds	r7, #8
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}

0800df44 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b086      	sub	sp, #24
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
 800df4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800df54:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800df56:	2300      	movs	r3, #0
 800df58:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800df5a:	2300      	movs	r3, #0
 800df5c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800df5e:	2300      	movs	r3, #0
 800df60:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d101      	bne.n	800df6c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800df68:	2303      	movs	r3, #3
 800df6a:	e0af      	b.n	800e0cc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	781b      	ldrb	r3, [r3, #0]
 800df70:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800df74:	2b00      	cmp	r3, #0
 800df76:	d03f      	beq.n	800dff8 <USBD_CDC_Setup+0xb4>
 800df78:	2b20      	cmp	r3, #32
 800df7a:	f040 809f 	bne.w	800e0bc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	88db      	ldrh	r3, [r3, #6]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d02e      	beq.n	800dfe4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	781b      	ldrb	r3, [r3, #0]
 800df8a:	b25b      	sxtb	r3, r3
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	da16      	bge.n	800dfbe <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800df96:	689b      	ldr	r3, [r3, #8]
 800df98:	683a      	ldr	r2, [r7, #0]
 800df9a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800df9c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800df9e:	683a      	ldr	r2, [r7, #0]
 800dfa0:	88d2      	ldrh	r2, [r2, #6]
 800dfa2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	88db      	ldrh	r3, [r3, #6]
 800dfa8:	2b07      	cmp	r3, #7
 800dfaa:	bf28      	it	cs
 800dfac:	2307      	movcs	r3, #7
 800dfae:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800dfb0:	693b      	ldr	r3, [r7, #16]
 800dfb2:	89fa      	ldrh	r2, [r7, #14]
 800dfb4:	4619      	mov	r1, r3
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f001 facd 	bl	800f556 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800dfbc:	e085      	b.n	800e0ca <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	785a      	ldrb	r2, [r3, #1]
 800dfc2:	693b      	ldr	r3, [r7, #16]
 800dfc4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	88db      	ldrh	r3, [r3, #6]
 800dfcc:	b2da      	uxtb	r2, r3
 800dfce:	693b      	ldr	r3, [r7, #16]
 800dfd0:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800dfd4:	6939      	ldr	r1, [r7, #16]
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	88db      	ldrh	r3, [r3, #6]
 800dfda:	461a      	mov	r2, r3
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f001 fae6 	bl	800f5ae <USBD_CtlPrepareRx>
      break;
 800dfe2:	e072      	b.n	800e0ca <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800dfea:	689b      	ldr	r3, [r3, #8]
 800dfec:	683a      	ldr	r2, [r7, #0]
 800dfee:	7850      	ldrb	r0, [r2, #1]
 800dff0:	2200      	movs	r2, #0
 800dff2:	6839      	ldr	r1, [r7, #0]
 800dff4:	4798      	blx	r3
      break;
 800dff6:	e068      	b.n	800e0ca <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	785b      	ldrb	r3, [r3, #1]
 800dffc:	2b0b      	cmp	r3, #11
 800dffe:	d852      	bhi.n	800e0a6 <USBD_CDC_Setup+0x162>
 800e000:	a201      	add	r2, pc, #4	@ (adr r2, 800e008 <USBD_CDC_Setup+0xc4>)
 800e002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e006:	bf00      	nop
 800e008:	0800e039 	.word	0x0800e039
 800e00c:	0800e0b5 	.word	0x0800e0b5
 800e010:	0800e0a7 	.word	0x0800e0a7
 800e014:	0800e0a7 	.word	0x0800e0a7
 800e018:	0800e0a7 	.word	0x0800e0a7
 800e01c:	0800e0a7 	.word	0x0800e0a7
 800e020:	0800e0a7 	.word	0x0800e0a7
 800e024:	0800e0a7 	.word	0x0800e0a7
 800e028:	0800e0a7 	.word	0x0800e0a7
 800e02c:	0800e0a7 	.word	0x0800e0a7
 800e030:	0800e063 	.word	0x0800e063
 800e034:	0800e08d 	.word	0x0800e08d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e03e:	b2db      	uxtb	r3, r3
 800e040:	2b03      	cmp	r3, #3
 800e042:	d107      	bne.n	800e054 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e044:	f107 030a 	add.w	r3, r7, #10
 800e048:	2202      	movs	r2, #2
 800e04a:	4619      	mov	r1, r3
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f001 fa82 	bl	800f556 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e052:	e032      	b.n	800e0ba <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e054:	6839      	ldr	r1, [r7, #0]
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f001 fa0c 	bl	800f474 <USBD_CtlError>
            ret = USBD_FAIL;
 800e05c:	2303      	movs	r3, #3
 800e05e:	75fb      	strb	r3, [r7, #23]
          break;
 800e060:	e02b      	b.n	800e0ba <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e068:	b2db      	uxtb	r3, r3
 800e06a:	2b03      	cmp	r3, #3
 800e06c:	d107      	bne.n	800e07e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e06e:	f107 030d 	add.w	r3, r7, #13
 800e072:	2201      	movs	r2, #1
 800e074:	4619      	mov	r1, r3
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f001 fa6d 	bl	800f556 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e07c:	e01d      	b.n	800e0ba <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e07e:	6839      	ldr	r1, [r7, #0]
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f001 f9f7 	bl	800f474 <USBD_CtlError>
            ret = USBD_FAIL;
 800e086:	2303      	movs	r3, #3
 800e088:	75fb      	strb	r3, [r7, #23]
          break;
 800e08a:	e016      	b.n	800e0ba <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e092:	b2db      	uxtb	r3, r3
 800e094:	2b03      	cmp	r3, #3
 800e096:	d00f      	beq.n	800e0b8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e098:	6839      	ldr	r1, [r7, #0]
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f001 f9ea 	bl	800f474 <USBD_CtlError>
            ret = USBD_FAIL;
 800e0a0:	2303      	movs	r3, #3
 800e0a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e0a4:	e008      	b.n	800e0b8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e0a6:	6839      	ldr	r1, [r7, #0]
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f001 f9e3 	bl	800f474 <USBD_CtlError>
          ret = USBD_FAIL;
 800e0ae:	2303      	movs	r3, #3
 800e0b0:	75fb      	strb	r3, [r7, #23]
          break;
 800e0b2:	e002      	b.n	800e0ba <USBD_CDC_Setup+0x176>
          break;
 800e0b4:	bf00      	nop
 800e0b6:	e008      	b.n	800e0ca <USBD_CDC_Setup+0x186>
          break;
 800e0b8:	bf00      	nop
      }
      break;
 800e0ba:	e006      	b.n	800e0ca <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e0bc:	6839      	ldr	r1, [r7, #0]
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f001 f9d8 	bl	800f474 <USBD_CtlError>
      ret = USBD_FAIL;
 800e0c4:	2303      	movs	r3, #3
 800e0c6:	75fb      	strb	r3, [r7, #23]
      break;
 800e0c8:	bf00      	nop
  }

  return (uint8_t)ret;
 800e0ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	3718      	adds	r7, #24
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}

0800e0d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b084      	sub	sp, #16
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
 800e0dc:	460b      	mov	r3, r1
 800e0de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e0e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d101      	bne.n	800e0f6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e0f2:	2303      	movs	r3, #3
 800e0f4:	e04f      	b.n	800e196 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e0fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e0fe:	78fa      	ldrb	r2, [r7, #3]
 800e100:	6879      	ldr	r1, [r7, #4]
 800e102:	4613      	mov	r3, r2
 800e104:	009b      	lsls	r3, r3, #2
 800e106:	4413      	add	r3, r2
 800e108:	009b      	lsls	r3, r3, #2
 800e10a:	440b      	add	r3, r1
 800e10c:	3318      	adds	r3, #24
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d029      	beq.n	800e168 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e114:	78fa      	ldrb	r2, [r7, #3]
 800e116:	6879      	ldr	r1, [r7, #4]
 800e118:	4613      	mov	r3, r2
 800e11a:	009b      	lsls	r3, r3, #2
 800e11c:	4413      	add	r3, r2
 800e11e:	009b      	lsls	r3, r3, #2
 800e120:	440b      	add	r3, r1
 800e122:	3318      	adds	r3, #24
 800e124:	681a      	ldr	r2, [r3, #0]
 800e126:	78f9      	ldrb	r1, [r7, #3]
 800e128:	68f8      	ldr	r0, [r7, #12]
 800e12a:	460b      	mov	r3, r1
 800e12c:	009b      	lsls	r3, r3, #2
 800e12e:	440b      	add	r3, r1
 800e130:	00db      	lsls	r3, r3, #3
 800e132:	4403      	add	r3, r0
 800e134:	3320      	adds	r3, #32
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	fbb2 f1f3 	udiv	r1, r2, r3
 800e13c:	fb01 f303 	mul.w	r3, r1, r3
 800e140:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e142:	2b00      	cmp	r3, #0
 800e144:	d110      	bne.n	800e168 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e146:	78fa      	ldrb	r2, [r7, #3]
 800e148:	6879      	ldr	r1, [r7, #4]
 800e14a:	4613      	mov	r3, r2
 800e14c:	009b      	lsls	r3, r3, #2
 800e14e:	4413      	add	r3, r2
 800e150:	009b      	lsls	r3, r3, #2
 800e152:	440b      	add	r3, r1
 800e154:	3318      	adds	r3, #24
 800e156:	2200      	movs	r2, #0
 800e158:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e15a:	78f9      	ldrb	r1, [r7, #3]
 800e15c:	2300      	movs	r3, #0
 800e15e:	2200      	movs	r2, #0
 800e160:	6878      	ldr	r0, [r7, #4]
 800e162:	f001 fed8 	bl	800ff16 <USBD_LL_Transmit>
 800e166:	e015      	b.n	800e194 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	2200      	movs	r2, #0
 800e16c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e176:	691b      	ldr	r3, [r3, #16]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d00b      	beq.n	800e194 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e182:	691b      	ldr	r3, [r3, #16]
 800e184:	68ba      	ldr	r2, [r7, #8]
 800e186:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e18a:	68ba      	ldr	r2, [r7, #8]
 800e18c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e190:	78fa      	ldrb	r2, [r7, #3]
 800e192:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e194:	2300      	movs	r3, #0
}
 800e196:	4618      	mov	r0, r3
 800e198:	3710      	adds	r7, #16
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}

0800e19e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e19e:	b580      	push	{r7, lr}
 800e1a0:	b084      	sub	sp, #16
 800e1a2:	af00      	add	r7, sp, #0
 800e1a4:	6078      	str	r0, [r7, #4]
 800e1a6:	460b      	mov	r3, r1
 800e1a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e1b0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d101      	bne.n	800e1c0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e1bc:	2303      	movs	r3, #3
 800e1be:	e015      	b.n	800e1ec <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e1c0:	78fb      	ldrb	r3, [r7, #3]
 800e1c2:	4619      	mov	r1, r3
 800e1c4:	6878      	ldr	r0, [r7, #4]
 800e1c6:	f001 fee8 	bl	800ff9a <USBD_LL_GetRxDataSize>
 800e1ca:	4602      	mov	r2, r0
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e1d8:	68db      	ldr	r3, [r3, #12]
 800e1da:	68fa      	ldr	r2, [r7, #12]
 800e1dc:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e1e0:	68fa      	ldr	r2, [r7, #12]
 800e1e2:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e1e6:	4611      	mov	r1, r2
 800e1e8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e1ea:	2300      	movs	r3, #0
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3710      	adds	r7, #16
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}

0800e1f4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b084      	sub	sp, #16
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e202:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d101      	bne.n	800e20e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e20a:	2303      	movs	r3, #3
 800e20c:	e01a      	b.n	800e244 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e214:	2b00      	cmp	r3, #0
 800e216:	d014      	beq.n	800e242 <USBD_CDC_EP0_RxReady+0x4e>
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e21e:	2bff      	cmp	r3, #255	@ 0xff
 800e220:	d00f      	beq.n	800e242 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e228:	689b      	ldr	r3, [r3, #8]
 800e22a:	68fa      	ldr	r2, [r7, #12]
 800e22c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800e230:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e232:	68fa      	ldr	r2, [r7, #12]
 800e234:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e238:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	22ff      	movs	r2, #255	@ 0xff
 800e23e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e242:	2300      	movs	r3, #0
}
 800e244:	4618      	mov	r0, r3
 800e246:	3710      	adds	r7, #16
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd80      	pop	{r7, pc}

0800e24c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e24c:	b480      	push	{r7}
 800e24e:	b083      	sub	sp, #12
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2243      	movs	r2, #67	@ 0x43
 800e258:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e25a:	4b03      	ldr	r3, [pc, #12]	@ (800e268 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e25c:	4618      	mov	r0, r3
 800e25e:	370c      	adds	r7, #12
 800e260:	46bd      	mov	sp, r7
 800e262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e266:	4770      	bx	lr
 800e268:	20000094 	.word	0x20000094

0800e26c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e26c:	b480      	push	{r7}
 800e26e:	b083      	sub	sp, #12
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2243      	movs	r2, #67	@ 0x43
 800e278:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e27a:	4b03      	ldr	r3, [pc, #12]	@ (800e288 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	370c      	adds	r7, #12
 800e280:	46bd      	mov	sp, r7
 800e282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e286:	4770      	bx	lr
 800e288:	20000050 	.word	0x20000050

0800e28c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e28c:	b480      	push	{r7}
 800e28e:	b083      	sub	sp, #12
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2243      	movs	r2, #67	@ 0x43
 800e298:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e29a:	4b03      	ldr	r3, [pc, #12]	@ (800e2a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e29c:	4618      	mov	r0, r3
 800e29e:	370c      	adds	r7, #12
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a6:	4770      	bx	lr
 800e2a8:	200000d8 	.word	0x200000d8

0800e2ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b083      	sub	sp, #12
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	220a      	movs	r2, #10
 800e2b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e2ba:	4b03      	ldr	r3, [pc, #12]	@ (800e2c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	370c      	adds	r7, #12
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c6:	4770      	bx	lr
 800e2c8:	2000000c 	.word	0x2000000c

0800e2cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b083      	sub	sp, #12
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d101      	bne.n	800e2e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e2dc:	2303      	movs	r3, #3
 800e2de:	e004      	b.n	800e2ea <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	683a      	ldr	r2, [r7, #0]
 800e2e4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800e2e8:	2300      	movs	r3, #0
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	370c      	adds	r7, #12
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f4:	4770      	bx	lr

0800e2f6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e2f6:	b480      	push	{r7}
 800e2f8:	b087      	sub	sp, #28
 800e2fa:	af00      	add	r7, sp, #0
 800e2fc:	60f8      	str	r0, [r7, #12]
 800e2fe:	60b9      	str	r1, [r7, #8]
 800e300:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e308:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d101      	bne.n	800e314 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e310:	2303      	movs	r3, #3
 800e312:	e008      	b.n	800e326 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	68ba      	ldr	r2, [r7, #8]
 800e318:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	687a      	ldr	r2, [r7, #4]
 800e320:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e324:	2300      	movs	r3, #0
}
 800e326:	4618      	mov	r0, r3
 800e328:	371c      	adds	r7, #28
 800e32a:	46bd      	mov	sp, r7
 800e32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e330:	4770      	bx	lr

0800e332 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e332:	b480      	push	{r7}
 800e334:	b085      	sub	sp, #20
 800e336:	af00      	add	r7, sp, #0
 800e338:	6078      	str	r0, [r7, #4]
 800e33a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e342:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d101      	bne.n	800e34e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800e34a:	2303      	movs	r3, #3
 800e34c:	e004      	b.n	800e358 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	683a      	ldr	r2, [r7, #0]
 800e352:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e356:	2300      	movs	r3, #0
}
 800e358:	4618      	mov	r0, r3
 800e35a:	3714      	adds	r7, #20
 800e35c:	46bd      	mov	sp, r7
 800e35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e362:	4770      	bx	lr

0800e364 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b084      	sub	sp, #16
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e372:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e374:	2301      	movs	r3, #1
 800e376:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d101      	bne.n	800e386 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e382:	2303      	movs	r3, #3
 800e384:	e01a      	b.n	800e3bc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d114      	bne.n	800e3ba <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	2201      	movs	r2, #1
 800e394:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e3ae:	2181      	movs	r1, #129	@ 0x81
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f001 fdb0 	bl	800ff16 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e3ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	3710      	adds	r7, #16
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}

0800e3c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b084      	sub	sp, #16
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e3d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d101      	bne.n	800e3e2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e3de:	2303      	movs	r3, #3
 800e3e0:	e016      	b.n	800e410 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	7c1b      	ldrb	r3, [r3, #16]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d109      	bne.n	800e3fe <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e3f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e3f4:	2101      	movs	r1, #1
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f001 fdae 	bl	800ff58 <USBD_LL_PrepareReceive>
 800e3fc:	e007      	b.n	800e40e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e404:	2340      	movs	r3, #64	@ 0x40
 800e406:	2101      	movs	r1, #1
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f001 fda5 	bl	800ff58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e40e:	2300      	movs	r3, #0
}
 800e410:	4618      	mov	r0, r3
 800e412:	3710      	adds	r7, #16
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}

0800e418 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b086      	sub	sp, #24
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	60f8      	str	r0, [r7, #12]
 800e420:	60b9      	str	r1, [r7, #8]
 800e422:	4613      	mov	r3, r2
 800e424:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d101      	bne.n	800e430 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e42c:	2303      	movs	r3, #3
 800e42e:	e01f      	b.n	800e470 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	2200      	movs	r2, #0
 800e434:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	2200      	movs	r2, #0
 800e43c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	2200      	movs	r2, #0
 800e444:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d003      	beq.n	800e456 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	68ba      	ldr	r2, [r7, #8]
 800e452:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	2201      	movs	r2, #1
 800e45a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	79fa      	ldrb	r2, [r7, #7]
 800e462:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e464:	68f8      	ldr	r0, [r7, #12]
 800e466:	f001 fc0d 	bl	800fc84 <USBD_LL_Init>
 800e46a:	4603      	mov	r3, r0
 800e46c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e46e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e470:	4618      	mov	r0, r3
 800e472:	3718      	adds	r7, #24
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}

0800e478 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b084      	sub	sp, #16
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
 800e480:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e482:	2300      	movs	r3, #0
 800e484:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d101      	bne.n	800e490 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e48c:	2303      	movs	r3, #3
 800e48e:	e016      	b.n	800e4be <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	683a      	ldr	r2, [r7, #0]
 800e494:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e49e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d00b      	beq.n	800e4bc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e4aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4ac:	f107 020e 	add.w	r2, r7, #14
 800e4b0:	4610      	mov	r0, r2
 800e4b2:	4798      	blx	r3
 800e4b4:	4602      	mov	r2, r0
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800e4bc:	2300      	movs	r3, #0
}
 800e4be:	4618      	mov	r0, r3
 800e4c0:	3710      	adds	r7, #16
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}

0800e4c6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e4c6:	b580      	push	{r7, lr}
 800e4c8:	b082      	sub	sp, #8
 800e4ca:	af00      	add	r7, sp, #0
 800e4cc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f001 fc38 	bl	800fd44 <USBD_LL_Start>
 800e4d4:	4603      	mov	r3, r0
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	3708      	adds	r7, #8
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}

0800e4de <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e4de:	b480      	push	{r7}
 800e4e0:	b083      	sub	sp, #12
 800e4e2:	af00      	add	r7, sp, #0
 800e4e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e4e6:	2300      	movs	r3, #0
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	370c      	adds	r7, #12
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f2:	4770      	bx	lr

0800e4f4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b084      	sub	sp, #16
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
 800e4fc:	460b      	mov	r3, r1
 800e4fe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e500:	2303      	movs	r3, #3
 800e502:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d009      	beq.n	800e522 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	78fa      	ldrb	r2, [r7, #3]
 800e518:	4611      	mov	r1, r2
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	4798      	blx	r3
 800e51e:	4603      	mov	r3, r0
 800e520:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e522:	7bfb      	ldrb	r3, [r7, #15]
}
 800e524:	4618      	mov	r0, r3
 800e526:	3710      	adds	r7, #16
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}

0800e52c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b082      	sub	sp, #8
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	460b      	mov	r3, r1
 800e536:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d007      	beq.n	800e552 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e548:	685b      	ldr	r3, [r3, #4]
 800e54a:	78fa      	ldrb	r2, [r7, #3]
 800e54c:	4611      	mov	r1, r2
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	4798      	blx	r3
  }

  return USBD_OK;
 800e552:	2300      	movs	r3, #0
}
 800e554:	4618      	mov	r0, r3
 800e556:	3708      	adds	r7, #8
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}

0800e55c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b084      	sub	sp, #16
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
 800e564:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e56c:	6839      	ldr	r1, [r7, #0]
 800e56e:	4618      	mov	r0, r3
 800e570:	f000 ff46 	bl	800f400 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2201      	movs	r2, #1
 800e578:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e582:	461a      	mov	r2, r3
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e590:	f003 031f 	and.w	r3, r3, #31
 800e594:	2b02      	cmp	r3, #2
 800e596:	d01a      	beq.n	800e5ce <USBD_LL_SetupStage+0x72>
 800e598:	2b02      	cmp	r3, #2
 800e59a:	d822      	bhi.n	800e5e2 <USBD_LL_SetupStage+0x86>
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d002      	beq.n	800e5a6 <USBD_LL_SetupStage+0x4a>
 800e5a0:	2b01      	cmp	r3, #1
 800e5a2:	d00a      	beq.n	800e5ba <USBD_LL_SetupStage+0x5e>
 800e5a4:	e01d      	b.n	800e5e2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e5ac:	4619      	mov	r1, r3
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f000 f9ee 	bl	800e990 <USBD_StdDevReq>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	73fb      	strb	r3, [r7, #15]
      break;
 800e5b8:	e020      	b.n	800e5fc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	f000 fa52 	bl	800ea6c <USBD_StdItfReq>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	73fb      	strb	r3, [r7, #15]
      break;
 800e5cc:	e016      	b.n	800e5fc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e5d4:	4619      	mov	r1, r3
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f000 fa91 	bl	800eafe <USBD_StdEPReq>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	73fb      	strb	r3, [r7, #15]
      break;
 800e5e0:	e00c      	b.n	800e5fc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e5e8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e5ec:	b2db      	uxtb	r3, r3
 800e5ee:	4619      	mov	r1, r3
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	f001 fc07 	bl	800fe04 <USBD_LL_StallEP>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	73fb      	strb	r3, [r7, #15]
      break;
 800e5fa:	bf00      	nop
  }

  return ret;
 800e5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	3710      	adds	r7, #16
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}

0800e606 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e606:	b580      	push	{r7, lr}
 800e608:	b086      	sub	sp, #24
 800e60a:	af00      	add	r7, sp, #0
 800e60c:	60f8      	str	r0, [r7, #12]
 800e60e:	460b      	mov	r3, r1
 800e610:	607a      	str	r2, [r7, #4]
 800e612:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e614:	7afb      	ldrb	r3, [r7, #11]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d138      	bne.n	800e68c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e620:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e628:	2b03      	cmp	r3, #3
 800e62a:	d14a      	bne.n	800e6c2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	689a      	ldr	r2, [r3, #8]
 800e630:	693b      	ldr	r3, [r7, #16]
 800e632:	68db      	ldr	r3, [r3, #12]
 800e634:	429a      	cmp	r2, r3
 800e636:	d913      	bls.n	800e660 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	689a      	ldr	r2, [r3, #8]
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	68db      	ldr	r3, [r3, #12]
 800e640:	1ad2      	subs	r2, r2, r3
 800e642:	693b      	ldr	r3, [r7, #16]
 800e644:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	68da      	ldr	r2, [r3, #12]
 800e64a:	693b      	ldr	r3, [r7, #16]
 800e64c:	689b      	ldr	r3, [r3, #8]
 800e64e:	4293      	cmp	r3, r2
 800e650:	bf28      	it	cs
 800e652:	4613      	movcs	r3, r2
 800e654:	461a      	mov	r2, r3
 800e656:	6879      	ldr	r1, [r7, #4]
 800e658:	68f8      	ldr	r0, [r7, #12]
 800e65a:	f000 ffc5 	bl	800f5e8 <USBD_CtlContinueRx>
 800e65e:	e030      	b.n	800e6c2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e666:	b2db      	uxtb	r3, r3
 800e668:	2b03      	cmp	r3, #3
 800e66a:	d10b      	bne.n	800e684 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e672:	691b      	ldr	r3, [r3, #16]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d005      	beq.n	800e684 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e67e:	691b      	ldr	r3, [r3, #16]
 800e680:	68f8      	ldr	r0, [r7, #12]
 800e682:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e684:	68f8      	ldr	r0, [r7, #12]
 800e686:	f000 ffc0 	bl	800f60a <USBD_CtlSendStatus>
 800e68a:	e01a      	b.n	800e6c2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e692:	b2db      	uxtb	r3, r3
 800e694:	2b03      	cmp	r3, #3
 800e696:	d114      	bne.n	800e6c2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e69e:	699b      	ldr	r3, [r3, #24]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d00e      	beq.n	800e6c2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e6aa:	699b      	ldr	r3, [r3, #24]
 800e6ac:	7afa      	ldrb	r2, [r7, #11]
 800e6ae:	4611      	mov	r1, r2
 800e6b0:	68f8      	ldr	r0, [r7, #12]
 800e6b2:	4798      	blx	r3
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e6b8:	7dfb      	ldrb	r3, [r7, #23]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d001      	beq.n	800e6c2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800e6be:	7dfb      	ldrb	r3, [r7, #23]
 800e6c0:	e000      	b.n	800e6c4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800e6c2:	2300      	movs	r3, #0
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	3718      	adds	r7, #24
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}

0800e6cc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b086      	sub	sp, #24
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	60f8      	str	r0, [r7, #12]
 800e6d4:	460b      	mov	r3, r1
 800e6d6:	607a      	str	r2, [r7, #4]
 800e6d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e6da:	7afb      	ldrb	r3, [r7, #11]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d16b      	bne.n	800e7b8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	3314      	adds	r3, #20
 800e6e4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e6ec:	2b02      	cmp	r3, #2
 800e6ee:	d156      	bne.n	800e79e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800e6f0:	693b      	ldr	r3, [r7, #16]
 800e6f2:	689a      	ldr	r2, [r3, #8]
 800e6f4:	693b      	ldr	r3, [r7, #16]
 800e6f6:	68db      	ldr	r3, [r3, #12]
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	d914      	bls.n	800e726 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e6fc:	693b      	ldr	r3, [r7, #16]
 800e6fe:	689a      	ldr	r2, [r3, #8]
 800e700:	693b      	ldr	r3, [r7, #16]
 800e702:	68db      	ldr	r3, [r3, #12]
 800e704:	1ad2      	subs	r2, r2, r3
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	689b      	ldr	r3, [r3, #8]
 800e70e:	461a      	mov	r2, r3
 800e710:	6879      	ldr	r1, [r7, #4]
 800e712:	68f8      	ldr	r0, [r7, #12]
 800e714:	f000 ff3a 	bl	800f58c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e718:	2300      	movs	r3, #0
 800e71a:	2200      	movs	r2, #0
 800e71c:	2100      	movs	r1, #0
 800e71e:	68f8      	ldr	r0, [r7, #12]
 800e720:	f001 fc1a 	bl	800ff58 <USBD_LL_PrepareReceive>
 800e724:	e03b      	b.n	800e79e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e726:	693b      	ldr	r3, [r7, #16]
 800e728:	68da      	ldr	r2, [r3, #12]
 800e72a:	693b      	ldr	r3, [r7, #16]
 800e72c:	689b      	ldr	r3, [r3, #8]
 800e72e:	429a      	cmp	r2, r3
 800e730:	d11c      	bne.n	800e76c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	685a      	ldr	r2, [r3, #4]
 800e736:	693b      	ldr	r3, [r7, #16]
 800e738:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e73a:	429a      	cmp	r2, r3
 800e73c:	d316      	bcc.n	800e76c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e73e:	693b      	ldr	r3, [r7, #16]
 800e740:	685a      	ldr	r2, [r3, #4]
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e748:	429a      	cmp	r2, r3
 800e74a:	d20f      	bcs.n	800e76c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e74c:	2200      	movs	r2, #0
 800e74e:	2100      	movs	r1, #0
 800e750:	68f8      	ldr	r0, [r7, #12]
 800e752:	f000 ff1b 	bl	800f58c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	2200      	movs	r2, #0
 800e75a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e75e:	2300      	movs	r3, #0
 800e760:	2200      	movs	r2, #0
 800e762:	2100      	movs	r1, #0
 800e764:	68f8      	ldr	r0, [r7, #12]
 800e766:	f001 fbf7 	bl	800ff58 <USBD_LL_PrepareReceive>
 800e76a:	e018      	b.n	800e79e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e772:	b2db      	uxtb	r3, r3
 800e774:	2b03      	cmp	r3, #3
 800e776:	d10b      	bne.n	800e790 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e77e:	68db      	ldr	r3, [r3, #12]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d005      	beq.n	800e790 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e78a:	68db      	ldr	r3, [r3, #12]
 800e78c:	68f8      	ldr	r0, [r7, #12]
 800e78e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e790:	2180      	movs	r1, #128	@ 0x80
 800e792:	68f8      	ldr	r0, [r7, #12]
 800e794:	f001 fb36 	bl	800fe04 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e798:	68f8      	ldr	r0, [r7, #12]
 800e79a:	f000 ff49 	bl	800f630 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e7a4:	2b01      	cmp	r3, #1
 800e7a6:	d122      	bne.n	800e7ee <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e7a8:	68f8      	ldr	r0, [r7, #12]
 800e7aa:	f7ff fe98 	bl	800e4de <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e7b6:	e01a      	b.n	800e7ee <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e7be:	b2db      	uxtb	r3, r3
 800e7c0:	2b03      	cmp	r3, #3
 800e7c2:	d114      	bne.n	800e7ee <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e7ca:	695b      	ldr	r3, [r3, #20]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d00e      	beq.n	800e7ee <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e7d6:	695b      	ldr	r3, [r3, #20]
 800e7d8:	7afa      	ldrb	r2, [r7, #11]
 800e7da:	4611      	mov	r1, r2
 800e7dc:	68f8      	ldr	r0, [r7, #12]
 800e7de:	4798      	blx	r3
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e7e4:	7dfb      	ldrb	r3, [r7, #23]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d001      	beq.n	800e7ee <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800e7ea:	7dfb      	ldrb	r3, [r7, #23]
 800e7ec:	e000      	b.n	800e7f0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800e7ee:	2300      	movs	r3, #0
}
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	3718      	adds	r7, #24
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	bd80      	pop	{r7, pc}

0800e7f8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b082      	sub	sp, #8
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2201      	movs	r2, #1
 800e804:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2200      	movs	r2, #0
 800e80c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2200      	movs	r2, #0
 800e814:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2200      	movs	r2, #0
 800e81a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e824:	2b00      	cmp	r3, #0
 800e826:	d101      	bne.n	800e82c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800e828:	2303      	movs	r3, #3
 800e82a:	e02f      	b.n	800e88c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e832:	2b00      	cmp	r3, #0
 800e834:	d00f      	beq.n	800e856 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e83c:	685b      	ldr	r3, [r3, #4]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d009      	beq.n	800e856 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e848:	685b      	ldr	r3, [r3, #4]
 800e84a:	687a      	ldr	r2, [r7, #4]
 800e84c:	6852      	ldr	r2, [r2, #4]
 800e84e:	b2d2      	uxtb	r2, r2
 800e850:	4611      	mov	r1, r2
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e856:	2340      	movs	r3, #64	@ 0x40
 800e858:	2200      	movs	r2, #0
 800e85a:	2100      	movs	r1, #0
 800e85c:	6878      	ldr	r0, [r7, #4]
 800e85e:	f001 fa8c 	bl	800fd7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2201      	movs	r2, #1
 800e866:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2240      	movs	r2, #64	@ 0x40
 800e86e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e872:	2340      	movs	r3, #64	@ 0x40
 800e874:	2200      	movs	r2, #0
 800e876:	2180      	movs	r1, #128	@ 0x80
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f001 fa7e 	bl	800fd7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2201      	movs	r2, #1
 800e882:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2240      	movs	r2, #64	@ 0x40
 800e888:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e88a:	2300      	movs	r3, #0
}
 800e88c:	4618      	mov	r0, r3
 800e88e:	3708      	adds	r7, #8
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}

0800e894 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e894:	b480      	push	{r7}
 800e896:	b083      	sub	sp, #12
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
 800e89c:	460b      	mov	r3, r1
 800e89e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	78fa      	ldrb	r2, [r7, #3]
 800e8a4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e8a6:	2300      	movs	r3, #0
}
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	370c      	adds	r7, #12
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b2:	4770      	bx	lr

0800e8b4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	b083      	sub	sp, #12
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e8c2:	b2da      	uxtb	r2, r3
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2204      	movs	r2, #4
 800e8ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800e8d2:	2300      	movs	r3, #0
}
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	370c      	adds	r7, #12
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8de:	4770      	bx	lr

0800e8e0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	b083      	sub	sp, #12
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e8ee:	b2db      	uxtb	r3, r3
 800e8f0:	2b04      	cmp	r3, #4
 800e8f2:	d106      	bne.n	800e902 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800e8fa:	b2da      	uxtb	r2, r3
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800e902:	2300      	movs	r3, #0
}
 800e904:	4618      	mov	r0, r3
 800e906:	370c      	adds	r7, #12
 800e908:	46bd      	mov	sp, r7
 800e90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90e:	4770      	bx	lr

0800e910 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b082      	sub	sp, #8
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d101      	bne.n	800e926 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800e922:	2303      	movs	r3, #3
 800e924:	e012      	b.n	800e94c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e92c:	b2db      	uxtb	r3, r3
 800e92e:	2b03      	cmp	r3, #3
 800e930:	d10b      	bne.n	800e94a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e938:	69db      	ldr	r3, [r3, #28]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d005      	beq.n	800e94a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e944:	69db      	ldr	r3, [r3, #28]
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e94a:	2300      	movs	r3, #0
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	3708      	adds	r7, #8
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}

0800e954 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e954:	b480      	push	{r7}
 800e956:	b087      	sub	sp, #28
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e960:	697b      	ldr	r3, [r7, #20]
 800e962:	781b      	ldrb	r3, [r3, #0]
 800e964:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	3301      	adds	r3, #1
 800e96a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	781b      	ldrb	r3, [r3, #0]
 800e970:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e972:	8a3b      	ldrh	r3, [r7, #16]
 800e974:	021b      	lsls	r3, r3, #8
 800e976:	b21a      	sxth	r2, r3
 800e978:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e97c:	4313      	orrs	r3, r2
 800e97e:	b21b      	sxth	r3, r3
 800e980:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e982:	89fb      	ldrh	r3, [r7, #14]
}
 800e984:	4618      	mov	r0, r3
 800e986:	371c      	adds	r7, #28
 800e988:	46bd      	mov	sp, r7
 800e98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98e:	4770      	bx	lr

0800e990 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b084      	sub	sp, #16
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
 800e998:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e99a:	2300      	movs	r3, #0
 800e99c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	781b      	ldrb	r3, [r3, #0]
 800e9a2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e9a6:	2b40      	cmp	r3, #64	@ 0x40
 800e9a8:	d005      	beq.n	800e9b6 <USBD_StdDevReq+0x26>
 800e9aa:	2b40      	cmp	r3, #64	@ 0x40
 800e9ac:	d853      	bhi.n	800ea56 <USBD_StdDevReq+0xc6>
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d00b      	beq.n	800e9ca <USBD_StdDevReq+0x3a>
 800e9b2:	2b20      	cmp	r3, #32
 800e9b4:	d14f      	bne.n	800ea56 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e9bc:	689b      	ldr	r3, [r3, #8]
 800e9be:	6839      	ldr	r1, [r7, #0]
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	4798      	blx	r3
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	73fb      	strb	r3, [r7, #15]
      break;
 800e9c8:	e04a      	b.n	800ea60 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	785b      	ldrb	r3, [r3, #1]
 800e9ce:	2b09      	cmp	r3, #9
 800e9d0:	d83b      	bhi.n	800ea4a <USBD_StdDevReq+0xba>
 800e9d2:	a201      	add	r2, pc, #4	@ (adr r2, 800e9d8 <USBD_StdDevReq+0x48>)
 800e9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9d8:	0800ea2d 	.word	0x0800ea2d
 800e9dc:	0800ea41 	.word	0x0800ea41
 800e9e0:	0800ea4b 	.word	0x0800ea4b
 800e9e4:	0800ea37 	.word	0x0800ea37
 800e9e8:	0800ea4b 	.word	0x0800ea4b
 800e9ec:	0800ea0b 	.word	0x0800ea0b
 800e9f0:	0800ea01 	.word	0x0800ea01
 800e9f4:	0800ea4b 	.word	0x0800ea4b
 800e9f8:	0800ea23 	.word	0x0800ea23
 800e9fc:	0800ea15 	.word	0x0800ea15
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ea00:	6839      	ldr	r1, [r7, #0]
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f000 f9de 	bl	800edc4 <USBD_GetDescriptor>
          break;
 800ea08:	e024      	b.n	800ea54 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ea0a:	6839      	ldr	r1, [r7, #0]
 800ea0c:	6878      	ldr	r0, [r7, #4]
 800ea0e:	f000 fb6d 	bl	800f0ec <USBD_SetAddress>
          break;
 800ea12:	e01f      	b.n	800ea54 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ea14:	6839      	ldr	r1, [r7, #0]
 800ea16:	6878      	ldr	r0, [r7, #4]
 800ea18:	f000 fbac 	bl	800f174 <USBD_SetConfig>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	73fb      	strb	r3, [r7, #15]
          break;
 800ea20:	e018      	b.n	800ea54 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ea22:	6839      	ldr	r1, [r7, #0]
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f000 fc4b 	bl	800f2c0 <USBD_GetConfig>
          break;
 800ea2a:	e013      	b.n	800ea54 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ea2c:	6839      	ldr	r1, [r7, #0]
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f000 fc7c 	bl	800f32c <USBD_GetStatus>
          break;
 800ea34:	e00e      	b.n	800ea54 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ea36:	6839      	ldr	r1, [r7, #0]
 800ea38:	6878      	ldr	r0, [r7, #4]
 800ea3a:	f000 fcab 	bl	800f394 <USBD_SetFeature>
          break;
 800ea3e:	e009      	b.n	800ea54 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ea40:	6839      	ldr	r1, [r7, #0]
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f000 fcba 	bl	800f3bc <USBD_ClrFeature>
          break;
 800ea48:	e004      	b.n	800ea54 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ea4a:	6839      	ldr	r1, [r7, #0]
 800ea4c:	6878      	ldr	r0, [r7, #4]
 800ea4e:	f000 fd11 	bl	800f474 <USBD_CtlError>
          break;
 800ea52:	bf00      	nop
      }
      break;
 800ea54:	e004      	b.n	800ea60 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ea56:	6839      	ldr	r1, [r7, #0]
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f000 fd0b 	bl	800f474 <USBD_CtlError>
      break;
 800ea5e:	bf00      	nop
  }

  return ret;
 800ea60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3710      	adds	r7, #16
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}
 800ea6a:	bf00      	nop

0800ea6c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b084      	sub	sp, #16
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ea76:	2300      	movs	r3, #0
 800ea78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	781b      	ldrb	r3, [r3, #0]
 800ea7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ea82:	2b40      	cmp	r3, #64	@ 0x40
 800ea84:	d005      	beq.n	800ea92 <USBD_StdItfReq+0x26>
 800ea86:	2b40      	cmp	r3, #64	@ 0x40
 800ea88:	d82f      	bhi.n	800eaea <USBD_StdItfReq+0x7e>
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d001      	beq.n	800ea92 <USBD_StdItfReq+0x26>
 800ea8e:	2b20      	cmp	r3, #32
 800ea90:	d12b      	bne.n	800eaea <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea98:	b2db      	uxtb	r3, r3
 800ea9a:	3b01      	subs	r3, #1
 800ea9c:	2b02      	cmp	r3, #2
 800ea9e:	d81d      	bhi.n	800eadc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	889b      	ldrh	r3, [r3, #4]
 800eaa4:	b2db      	uxtb	r3, r3
 800eaa6:	2b01      	cmp	r3, #1
 800eaa8:	d813      	bhi.n	800ead2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eab0:	689b      	ldr	r3, [r3, #8]
 800eab2:	6839      	ldr	r1, [r7, #0]
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	4798      	blx	r3
 800eab8:	4603      	mov	r3, r0
 800eaba:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	88db      	ldrh	r3, [r3, #6]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d110      	bne.n	800eae6 <USBD_StdItfReq+0x7a>
 800eac4:	7bfb      	ldrb	r3, [r7, #15]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d10d      	bne.n	800eae6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f000 fd9d 	bl	800f60a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ead0:	e009      	b.n	800eae6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ead2:	6839      	ldr	r1, [r7, #0]
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f000 fccd 	bl	800f474 <USBD_CtlError>
          break;
 800eada:	e004      	b.n	800eae6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800eadc:	6839      	ldr	r1, [r7, #0]
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	f000 fcc8 	bl	800f474 <USBD_CtlError>
          break;
 800eae4:	e000      	b.n	800eae8 <USBD_StdItfReq+0x7c>
          break;
 800eae6:	bf00      	nop
      }
      break;
 800eae8:	e004      	b.n	800eaf4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800eaea:	6839      	ldr	r1, [r7, #0]
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f000 fcc1 	bl	800f474 <USBD_CtlError>
      break;
 800eaf2:	bf00      	nop
  }

  return ret;
 800eaf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	3710      	adds	r7, #16
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}

0800eafe <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eafe:	b580      	push	{r7, lr}
 800eb00:	b084      	sub	sp, #16
 800eb02:	af00      	add	r7, sp, #0
 800eb04:	6078      	str	r0, [r7, #4]
 800eb06:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800eb08:	2300      	movs	r3, #0
 800eb0a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	889b      	ldrh	r3, [r3, #4]
 800eb10:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800eb1a:	2b40      	cmp	r3, #64	@ 0x40
 800eb1c:	d007      	beq.n	800eb2e <USBD_StdEPReq+0x30>
 800eb1e:	2b40      	cmp	r3, #64	@ 0x40
 800eb20:	f200 8145 	bhi.w	800edae <USBD_StdEPReq+0x2b0>
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d00c      	beq.n	800eb42 <USBD_StdEPReq+0x44>
 800eb28:	2b20      	cmp	r3, #32
 800eb2a:	f040 8140 	bne.w	800edae <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb34:	689b      	ldr	r3, [r3, #8]
 800eb36:	6839      	ldr	r1, [r7, #0]
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	4798      	blx	r3
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	73fb      	strb	r3, [r7, #15]
      break;
 800eb40:	e13a      	b.n	800edb8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	785b      	ldrb	r3, [r3, #1]
 800eb46:	2b03      	cmp	r3, #3
 800eb48:	d007      	beq.n	800eb5a <USBD_StdEPReq+0x5c>
 800eb4a:	2b03      	cmp	r3, #3
 800eb4c:	f300 8129 	bgt.w	800eda2 <USBD_StdEPReq+0x2a4>
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d07f      	beq.n	800ec54 <USBD_StdEPReq+0x156>
 800eb54:	2b01      	cmp	r3, #1
 800eb56:	d03c      	beq.n	800ebd2 <USBD_StdEPReq+0xd4>
 800eb58:	e123      	b.n	800eda2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb60:	b2db      	uxtb	r3, r3
 800eb62:	2b02      	cmp	r3, #2
 800eb64:	d002      	beq.n	800eb6c <USBD_StdEPReq+0x6e>
 800eb66:	2b03      	cmp	r3, #3
 800eb68:	d016      	beq.n	800eb98 <USBD_StdEPReq+0x9a>
 800eb6a:	e02c      	b.n	800ebc6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eb6c:	7bbb      	ldrb	r3, [r7, #14]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d00d      	beq.n	800eb8e <USBD_StdEPReq+0x90>
 800eb72:	7bbb      	ldrb	r3, [r7, #14]
 800eb74:	2b80      	cmp	r3, #128	@ 0x80
 800eb76:	d00a      	beq.n	800eb8e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800eb78:	7bbb      	ldrb	r3, [r7, #14]
 800eb7a:	4619      	mov	r1, r3
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f001 f941 	bl	800fe04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb82:	2180      	movs	r1, #128	@ 0x80
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f001 f93d 	bl	800fe04 <USBD_LL_StallEP>
 800eb8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800eb8c:	e020      	b.n	800ebd0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800eb8e:	6839      	ldr	r1, [r7, #0]
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	f000 fc6f 	bl	800f474 <USBD_CtlError>
              break;
 800eb96:	e01b      	b.n	800ebd0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	885b      	ldrh	r3, [r3, #2]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d10e      	bne.n	800ebbe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800eba0:	7bbb      	ldrb	r3, [r7, #14]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d00b      	beq.n	800ebbe <USBD_StdEPReq+0xc0>
 800eba6:	7bbb      	ldrb	r3, [r7, #14]
 800eba8:	2b80      	cmp	r3, #128	@ 0x80
 800ebaa:	d008      	beq.n	800ebbe <USBD_StdEPReq+0xc0>
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	88db      	ldrh	r3, [r3, #6]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d104      	bne.n	800ebbe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ebb4:	7bbb      	ldrb	r3, [r7, #14]
 800ebb6:	4619      	mov	r1, r3
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f001 f923 	bl	800fe04 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	f000 fd23 	bl	800f60a <USBD_CtlSendStatus>

              break;
 800ebc4:	e004      	b.n	800ebd0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ebc6:	6839      	ldr	r1, [r7, #0]
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f000 fc53 	bl	800f474 <USBD_CtlError>
              break;
 800ebce:	bf00      	nop
          }
          break;
 800ebd0:	e0ec      	b.n	800edac <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ebd8:	b2db      	uxtb	r3, r3
 800ebda:	2b02      	cmp	r3, #2
 800ebdc:	d002      	beq.n	800ebe4 <USBD_StdEPReq+0xe6>
 800ebde:	2b03      	cmp	r3, #3
 800ebe0:	d016      	beq.n	800ec10 <USBD_StdEPReq+0x112>
 800ebe2:	e030      	b.n	800ec46 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ebe4:	7bbb      	ldrb	r3, [r7, #14]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d00d      	beq.n	800ec06 <USBD_StdEPReq+0x108>
 800ebea:	7bbb      	ldrb	r3, [r7, #14]
 800ebec:	2b80      	cmp	r3, #128	@ 0x80
 800ebee:	d00a      	beq.n	800ec06 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ebf0:	7bbb      	ldrb	r3, [r7, #14]
 800ebf2:	4619      	mov	r1, r3
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	f001 f905 	bl	800fe04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ebfa:	2180      	movs	r1, #128	@ 0x80
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	f001 f901 	bl	800fe04 <USBD_LL_StallEP>
 800ec02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ec04:	e025      	b.n	800ec52 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ec06:	6839      	ldr	r1, [r7, #0]
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	f000 fc33 	bl	800f474 <USBD_CtlError>
              break;
 800ec0e:	e020      	b.n	800ec52 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	885b      	ldrh	r3, [r3, #2]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d11b      	bne.n	800ec50 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ec18:	7bbb      	ldrb	r3, [r7, #14]
 800ec1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d004      	beq.n	800ec2c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ec22:	7bbb      	ldrb	r3, [r7, #14]
 800ec24:	4619      	mov	r1, r3
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f001 f90b 	bl	800fe42 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f000 fcec 	bl	800f60a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec38:	689b      	ldr	r3, [r3, #8]
 800ec3a:	6839      	ldr	r1, [r7, #0]
 800ec3c:	6878      	ldr	r0, [r7, #4]
 800ec3e:	4798      	blx	r3
 800ec40:	4603      	mov	r3, r0
 800ec42:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ec44:	e004      	b.n	800ec50 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ec46:	6839      	ldr	r1, [r7, #0]
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f000 fc13 	bl	800f474 <USBD_CtlError>
              break;
 800ec4e:	e000      	b.n	800ec52 <USBD_StdEPReq+0x154>
              break;
 800ec50:	bf00      	nop
          }
          break;
 800ec52:	e0ab      	b.n	800edac <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec5a:	b2db      	uxtb	r3, r3
 800ec5c:	2b02      	cmp	r3, #2
 800ec5e:	d002      	beq.n	800ec66 <USBD_StdEPReq+0x168>
 800ec60:	2b03      	cmp	r3, #3
 800ec62:	d032      	beq.n	800ecca <USBD_StdEPReq+0x1cc>
 800ec64:	e097      	b.n	800ed96 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ec66:	7bbb      	ldrb	r3, [r7, #14]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d007      	beq.n	800ec7c <USBD_StdEPReq+0x17e>
 800ec6c:	7bbb      	ldrb	r3, [r7, #14]
 800ec6e:	2b80      	cmp	r3, #128	@ 0x80
 800ec70:	d004      	beq.n	800ec7c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ec72:	6839      	ldr	r1, [r7, #0]
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f000 fbfd 	bl	800f474 <USBD_CtlError>
                break;
 800ec7a:	e091      	b.n	800eda0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ec7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	da0b      	bge.n	800ec9c <USBD_StdEPReq+0x19e>
 800ec84:	7bbb      	ldrb	r3, [r7, #14]
 800ec86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ec8a:	4613      	mov	r3, r2
 800ec8c:	009b      	lsls	r3, r3, #2
 800ec8e:	4413      	add	r3, r2
 800ec90:	009b      	lsls	r3, r3, #2
 800ec92:	3310      	adds	r3, #16
 800ec94:	687a      	ldr	r2, [r7, #4]
 800ec96:	4413      	add	r3, r2
 800ec98:	3304      	adds	r3, #4
 800ec9a:	e00b      	b.n	800ecb4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ec9c:	7bbb      	ldrb	r3, [r7, #14]
 800ec9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eca2:	4613      	mov	r3, r2
 800eca4:	009b      	lsls	r3, r3, #2
 800eca6:	4413      	add	r3, r2
 800eca8:	009b      	lsls	r3, r3, #2
 800ecaa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ecae:	687a      	ldr	r2, [r7, #4]
 800ecb0:	4413      	add	r3, r2
 800ecb2:	3304      	adds	r3, #4
 800ecb4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	2200      	movs	r2, #0
 800ecba:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ecbc:	68bb      	ldr	r3, [r7, #8]
 800ecbe:	2202      	movs	r2, #2
 800ecc0:	4619      	mov	r1, r3
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f000 fc47 	bl	800f556 <USBD_CtlSendData>
              break;
 800ecc8:	e06a      	b.n	800eda0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ecca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	da11      	bge.n	800ecf6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ecd2:	7bbb      	ldrb	r3, [r7, #14]
 800ecd4:	f003 020f 	and.w	r2, r3, #15
 800ecd8:	6879      	ldr	r1, [r7, #4]
 800ecda:	4613      	mov	r3, r2
 800ecdc:	009b      	lsls	r3, r3, #2
 800ecde:	4413      	add	r3, r2
 800ece0:	009b      	lsls	r3, r3, #2
 800ece2:	440b      	add	r3, r1
 800ece4:	3324      	adds	r3, #36	@ 0x24
 800ece6:	881b      	ldrh	r3, [r3, #0]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d117      	bne.n	800ed1c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ecec:	6839      	ldr	r1, [r7, #0]
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f000 fbc0 	bl	800f474 <USBD_CtlError>
                  break;
 800ecf4:	e054      	b.n	800eda0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ecf6:	7bbb      	ldrb	r3, [r7, #14]
 800ecf8:	f003 020f 	and.w	r2, r3, #15
 800ecfc:	6879      	ldr	r1, [r7, #4]
 800ecfe:	4613      	mov	r3, r2
 800ed00:	009b      	lsls	r3, r3, #2
 800ed02:	4413      	add	r3, r2
 800ed04:	009b      	lsls	r3, r3, #2
 800ed06:	440b      	add	r3, r1
 800ed08:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ed0c:	881b      	ldrh	r3, [r3, #0]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d104      	bne.n	800ed1c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ed12:	6839      	ldr	r1, [r7, #0]
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f000 fbad 	bl	800f474 <USBD_CtlError>
                  break;
 800ed1a:	e041      	b.n	800eda0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	da0b      	bge.n	800ed3c <USBD_StdEPReq+0x23e>
 800ed24:	7bbb      	ldrb	r3, [r7, #14]
 800ed26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ed2a:	4613      	mov	r3, r2
 800ed2c:	009b      	lsls	r3, r3, #2
 800ed2e:	4413      	add	r3, r2
 800ed30:	009b      	lsls	r3, r3, #2
 800ed32:	3310      	adds	r3, #16
 800ed34:	687a      	ldr	r2, [r7, #4]
 800ed36:	4413      	add	r3, r2
 800ed38:	3304      	adds	r3, #4
 800ed3a:	e00b      	b.n	800ed54 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ed3c:	7bbb      	ldrb	r3, [r7, #14]
 800ed3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed42:	4613      	mov	r3, r2
 800ed44:	009b      	lsls	r3, r3, #2
 800ed46:	4413      	add	r3, r2
 800ed48:	009b      	lsls	r3, r3, #2
 800ed4a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ed4e:	687a      	ldr	r2, [r7, #4]
 800ed50:	4413      	add	r3, r2
 800ed52:	3304      	adds	r3, #4
 800ed54:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ed56:	7bbb      	ldrb	r3, [r7, #14]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d002      	beq.n	800ed62 <USBD_StdEPReq+0x264>
 800ed5c:	7bbb      	ldrb	r3, [r7, #14]
 800ed5e:	2b80      	cmp	r3, #128	@ 0x80
 800ed60:	d103      	bne.n	800ed6a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ed62:	68bb      	ldr	r3, [r7, #8]
 800ed64:	2200      	movs	r2, #0
 800ed66:	601a      	str	r2, [r3, #0]
 800ed68:	e00e      	b.n	800ed88 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ed6a:	7bbb      	ldrb	r3, [r7, #14]
 800ed6c:	4619      	mov	r1, r3
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	f001 f886 	bl	800fe80 <USBD_LL_IsStallEP>
 800ed74:	4603      	mov	r3, r0
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d003      	beq.n	800ed82 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	2201      	movs	r2, #1
 800ed7e:	601a      	str	r2, [r3, #0]
 800ed80:	e002      	b.n	800ed88 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	2200      	movs	r2, #0
 800ed86:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	2202      	movs	r2, #2
 800ed8c:	4619      	mov	r1, r3
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f000 fbe1 	bl	800f556 <USBD_CtlSendData>
              break;
 800ed94:	e004      	b.n	800eda0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ed96:	6839      	ldr	r1, [r7, #0]
 800ed98:	6878      	ldr	r0, [r7, #4]
 800ed9a:	f000 fb6b 	bl	800f474 <USBD_CtlError>
              break;
 800ed9e:	bf00      	nop
          }
          break;
 800eda0:	e004      	b.n	800edac <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800eda2:	6839      	ldr	r1, [r7, #0]
 800eda4:	6878      	ldr	r0, [r7, #4]
 800eda6:	f000 fb65 	bl	800f474 <USBD_CtlError>
          break;
 800edaa:	bf00      	nop
      }
      break;
 800edac:	e004      	b.n	800edb8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800edae:	6839      	ldr	r1, [r7, #0]
 800edb0:	6878      	ldr	r0, [r7, #4]
 800edb2:	f000 fb5f 	bl	800f474 <USBD_CtlError>
      break;
 800edb6:	bf00      	nop
  }

  return ret;
 800edb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800edba:	4618      	mov	r0, r3
 800edbc:	3710      	adds	r7, #16
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}
	...

0800edc4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b084      	sub	sp, #16
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
 800edcc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800edce:	2300      	movs	r3, #0
 800edd0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800edd2:	2300      	movs	r3, #0
 800edd4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800edd6:	2300      	movs	r3, #0
 800edd8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	885b      	ldrh	r3, [r3, #2]
 800edde:	0a1b      	lsrs	r3, r3, #8
 800ede0:	b29b      	uxth	r3, r3
 800ede2:	3b01      	subs	r3, #1
 800ede4:	2b0e      	cmp	r3, #14
 800ede6:	f200 8152 	bhi.w	800f08e <USBD_GetDescriptor+0x2ca>
 800edea:	a201      	add	r2, pc, #4	@ (adr r2, 800edf0 <USBD_GetDescriptor+0x2c>)
 800edec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edf0:	0800ee61 	.word	0x0800ee61
 800edf4:	0800ee79 	.word	0x0800ee79
 800edf8:	0800eeb9 	.word	0x0800eeb9
 800edfc:	0800f08f 	.word	0x0800f08f
 800ee00:	0800f08f 	.word	0x0800f08f
 800ee04:	0800f02f 	.word	0x0800f02f
 800ee08:	0800f05b 	.word	0x0800f05b
 800ee0c:	0800f08f 	.word	0x0800f08f
 800ee10:	0800f08f 	.word	0x0800f08f
 800ee14:	0800f08f 	.word	0x0800f08f
 800ee18:	0800f08f 	.word	0x0800f08f
 800ee1c:	0800f08f 	.word	0x0800f08f
 800ee20:	0800f08f 	.word	0x0800f08f
 800ee24:	0800f08f 	.word	0x0800f08f
 800ee28:	0800ee2d 	.word	0x0800ee2d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ee32:	69db      	ldr	r3, [r3, #28]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d00b      	beq.n	800ee50 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ee3e:	69db      	ldr	r3, [r3, #28]
 800ee40:	687a      	ldr	r2, [r7, #4]
 800ee42:	7c12      	ldrb	r2, [r2, #16]
 800ee44:	f107 0108 	add.w	r1, r7, #8
 800ee48:	4610      	mov	r0, r2
 800ee4a:	4798      	blx	r3
 800ee4c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ee4e:	e126      	b.n	800f09e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ee50:	6839      	ldr	r1, [r7, #0]
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f000 fb0e 	bl	800f474 <USBD_CtlError>
        err++;
 800ee58:	7afb      	ldrb	r3, [r7, #11]
 800ee5a:	3301      	adds	r3, #1
 800ee5c:	72fb      	strb	r3, [r7, #11]
      break;
 800ee5e:	e11e      	b.n	800f09e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	687a      	ldr	r2, [r7, #4]
 800ee6a:	7c12      	ldrb	r2, [r2, #16]
 800ee6c:	f107 0108 	add.w	r1, r7, #8
 800ee70:	4610      	mov	r0, r2
 800ee72:	4798      	blx	r3
 800ee74:	60f8      	str	r0, [r7, #12]
      break;
 800ee76:	e112      	b.n	800f09e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	7c1b      	ldrb	r3, [r3, #16]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d10d      	bne.n	800ee9c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee88:	f107 0208 	add.w	r2, r7, #8
 800ee8c:	4610      	mov	r0, r2
 800ee8e:	4798      	blx	r3
 800ee90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	3301      	adds	r3, #1
 800ee96:	2202      	movs	r2, #2
 800ee98:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ee9a:	e100      	b.n	800f09e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eea4:	f107 0208 	add.w	r2, r7, #8
 800eea8:	4610      	mov	r0, r2
 800eeaa:	4798      	blx	r3
 800eeac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	3301      	adds	r3, #1
 800eeb2:	2202      	movs	r2, #2
 800eeb4:	701a      	strb	r2, [r3, #0]
      break;
 800eeb6:	e0f2      	b.n	800f09e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	885b      	ldrh	r3, [r3, #2]
 800eebc:	b2db      	uxtb	r3, r3
 800eebe:	2b05      	cmp	r3, #5
 800eec0:	f200 80ac 	bhi.w	800f01c <USBD_GetDescriptor+0x258>
 800eec4:	a201      	add	r2, pc, #4	@ (adr r2, 800eecc <USBD_GetDescriptor+0x108>)
 800eec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeca:	bf00      	nop
 800eecc:	0800eee5 	.word	0x0800eee5
 800eed0:	0800ef19 	.word	0x0800ef19
 800eed4:	0800ef4d 	.word	0x0800ef4d
 800eed8:	0800ef81 	.word	0x0800ef81
 800eedc:	0800efb5 	.word	0x0800efb5
 800eee0:	0800efe9 	.word	0x0800efe9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eeea:	685b      	ldr	r3, [r3, #4]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d00b      	beq.n	800ef08 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eef6:	685b      	ldr	r3, [r3, #4]
 800eef8:	687a      	ldr	r2, [r7, #4]
 800eefa:	7c12      	ldrb	r2, [r2, #16]
 800eefc:	f107 0108 	add.w	r1, r7, #8
 800ef00:	4610      	mov	r0, r2
 800ef02:	4798      	blx	r3
 800ef04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef06:	e091      	b.n	800f02c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ef08:	6839      	ldr	r1, [r7, #0]
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f000 fab2 	bl	800f474 <USBD_CtlError>
            err++;
 800ef10:	7afb      	ldrb	r3, [r7, #11]
 800ef12:	3301      	adds	r3, #1
 800ef14:	72fb      	strb	r3, [r7, #11]
          break;
 800ef16:	e089      	b.n	800f02c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ef1e:	689b      	ldr	r3, [r3, #8]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d00b      	beq.n	800ef3c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ef2a:	689b      	ldr	r3, [r3, #8]
 800ef2c:	687a      	ldr	r2, [r7, #4]
 800ef2e:	7c12      	ldrb	r2, [r2, #16]
 800ef30:	f107 0108 	add.w	r1, r7, #8
 800ef34:	4610      	mov	r0, r2
 800ef36:	4798      	blx	r3
 800ef38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef3a:	e077      	b.n	800f02c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ef3c:	6839      	ldr	r1, [r7, #0]
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	f000 fa98 	bl	800f474 <USBD_CtlError>
            err++;
 800ef44:	7afb      	ldrb	r3, [r7, #11]
 800ef46:	3301      	adds	r3, #1
 800ef48:	72fb      	strb	r3, [r7, #11]
          break;
 800ef4a:	e06f      	b.n	800f02c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ef52:	68db      	ldr	r3, [r3, #12]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d00b      	beq.n	800ef70 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ef5e:	68db      	ldr	r3, [r3, #12]
 800ef60:	687a      	ldr	r2, [r7, #4]
 800ef62:	7c12      	ldrb	r2, [r2, #16]
 800ef64:	f107 0108 	add.w	r1, r7, #8
 800ef68:	4610      	mov	r0, r2
 800ef6a:	4798      	blx	r3
 800ef6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef6e:	e05d      	b.n	800f02c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ef70:	6839      	ldr	r1, [r7, #0]
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f000 fa7e 	bl	800f474 <USBD_CtlError>
            err++;
 800ef78:	7afb      	ldrb	r3, [r7, #11]
 800ef7a:	3301      	adds	r3, #1
 800ef7c:	72fb      	strb	r3, [r7, #11]
          break;
 800ef7e:	e055      	b.n	800f02c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ef86:	691b      	ldr	r3, [r3, #16]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d00b      	beq.n	800efa4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ef92:	691b      	ldr	r3, [r3, #16]
 800ef94:	687a      	ldr	r2, [r7, #4]
 800ef96:	7c12      	ldrb	r2, [r2, #16]
 800ef98:	f107 0108 	add.w	r1, r7, #8
 800ef9c:	4610      	mov	r0, r2
 800ef9e:	4798      	blx	r3
 800efa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800efa2:	e043      	b.n	800f02c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800efa4:	6839      	ldr	r1, [r7, #0]
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f000 fa64 	bl	800f474 <USBD_CtlError>
            err++;
 800efac:	7afb      	ldrb	r3, [r7, #11]
 800efae:	3301      	adds	r3, #1
 800efb0:	72fb      	strb	r3, [r7, #11]
          break;
 800efb2:	e03b      	b.n	800f02c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800efba:	695b      	ldr	r3, [r3, #20]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d00b      	beq.n	800efd8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800efc6:	695b      	ldr	r3, [r3, #20]
 800efc8:	687a      	ldr	r2, [r7, #4]
 800efca:	7c12      	ldrb	r2, [r2, #16]
 800efcc:	f107 0108 	add.w	r1, r7, #8
 800efd0:	4610      	mov	r0, r2
 800efd2:	4798      	blx	r3
 800efd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800efd6:	e029      	b.n	800f02c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800efd8:	6839      	ldr	r1, [r7, #0]
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	f000 fa4a 	bl	800f474 <USBD_CtlError>
            err++;
 800efe0:	7afb      	ldrb	r3, [r7, #11]
 800efe2:	3301      	adds	r3, #1
 800efe4:	72fb      	strb	r3, [r7, #11]
          break;
 800efe6:	e021      	b.n	800f02c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800efee:	699b      	ldr	r3, [r3, #24]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d00b      	beq.n	800f00c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800effa:	699b      	ldr	r3, [r3, #24]
 800effc:	687a      	ldr	r2, [r7, #4]
 800effe:	7c12      	ldrb	r2, [r2, #16]
 800f000:	f107 0108 	add.w	r1, r7, #8
 800f004:	4610      	mov	r0, r2
 800f006:	4798      	blx	r3
 800f008:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f00a:	e00f      	b.n	800f02c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f00c:	6839      	ldr	r1, [r7, #0]
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f000 fa30 	bl	800f474 <USBD_CtlError>
            err++;
 800f014:	7afb      	ldrb	r3, [r7, #11]
 800f016:	3301      	adds	r3, #1
 800f018:	72fb      	strb	r3, [r7, #11]
          break;
 800f01a:	e007      	b.n	800f02c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f01c:	6839      	ldr	r1, [r7, #0]
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	f000 fa28 	bl	800f474 <USBD_CtlError>
          err++;
 800f024:	7afb      	ldrb	r3, [r7, #11]
 800f026:	3301      	adds	r3, #1
 800f028:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f02a:	bf00      	nop
      }
      break;
 800f02c:	e037      	b.n	800f09e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	7c1b      	ldrb	r3, [r3, #16]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d109      	bne.n	800f04a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f03c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f03e:	f107 0208 	add.w	r2, r7, #8
 800f042:	4610      	mov	r0, r2
 800f044:	4798      	blx	r3
 800f046:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f048:	e029      	b.n	800f09e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f04a:	6839      	ldr	r1, [r7, #0]
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f000 fa11 	bl	800f474 <USBD_CtlError>
        err++;
 800f052:	7afb      	ldrb	r3, [r7, #11]
 800f054:	3301      	adds	r3, #1
 800f056:	72fb      	strb	r3, [r7, #11]
      break;
 800f058:	e021      	b.n	800f09e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	7c1b      	ldrb	r3, [r3, #16]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d10d      	bne.n	800f07e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f06a:	f107 0208 	add.w	r2, r7, #8
 800f06e:	4610      	mov	r0, r2
 800f070:	4798      	blx	r3
 800f072:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	3301      	adds	r3, #1
 800f078:	2207      	movs	r2, #7
 800f07a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f07c:	e00f      	b.n	800f09e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f07e:	6839      	ldr	r1, [r7, #0]
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	f000 f9f7 	bl	800f474 <USBD_CtlError>
        err++;
 800f086:	7afb      	ldrb	r3, [r7, #11]
 800f088:	3301      	adds	r3, #1
 800f08a:	72fb      	strb	r3, [r7, #11]
      break;
 800f08c:	e007      	b.n	800f09e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f08e:	6839      	ldr	r1, [r7, #0]
 800f090:	6878      	ldr	r0, [r7, #4]
 800f092:	f000 f9ef 	bl	800f474 <USBD_CtlError>
      err++;
 800f096:	7afb      	ldrb	r3, [r7, #11]
 800f098:	3301      	adds	r3, #1
 800f09a:	72fb      	strb	r3, [r7, #11]
      break;
 800f09c:	bf00      	nop
  }

  if (err != 0U)
 800f09e:	7afb      	ldrb	r3, [r7, #11]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d11e      	bne.n	800f0e2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	88db      	ldrh	r3, [r3, #6]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d016      	beq.n	800f0da <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f0ac:	893b      	ldrh	r3, [r7, #8]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d00e      	beq.n	800f0d0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	88da      	ldrh	r2, [r3, #6]
 800f0b6:	893b      	ldrh	r3, [r7, #8]
 800f0b8:	4293      	cmp	r3, r2
 800f0ba:	bf28      	it	cs
 800f0bc:	4613      	movcs	r3, r2
 800f0be:	b29b      	uxth	r3, r3
 800f0c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f0c2:	893b      	ldrh	r3, [r7, #8]
 800f0c4:	461a      	mov	r2, r3
 800f0c6:	68f9      	ldr	r1, [r7, #12]
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f000 fa44 	bl	800f556 <USBD_CtlSendData>
 800f0ce:	e009      	b.n	800f0e4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f0d0:	6839      	ldr	r1, [r7, #0]
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f000 f9ce 	bl	800f474 <USBD_CtlError>
 800f0d8:	e004      	b.n	800f0e4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f0da:	6878      	ldr	r0, [r7, #4]
 800f0dc:	f000 fa95 	bl	800f60a <USBD_CtlSendStatus>
 800f0e0:	e000      	b.n	800f0e4 <USBD_GetDescriptor+0x320>
    return;
 800f0e2:	bf00      	nop
  }
}
 800f0e4:	3710      	adds	r7, #16
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}
 800f0ea:	bf00      	nop

0800f0ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b084      	sub	sp, #16
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	889b      	ldrh	r3, [r3, #4]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d131      	bne.n	800f162 <USBD_SetAddress+0x76>
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	88db      	ldrh	r3, [r3, #6]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d12d      	bne.n	800f162 <USBD_SetAddress+0x76>
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	885b      	ldrh	r3, [r3, #2]
 800f10a:	2b7f      	cmp	r3, #127	@ 0x7f
 800f10c:	d829      	bhi.n	800f162 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f10e:	683b      	ldr	r3, [r7, #0]
 800f110:	885b      	ldrh	r3, [r3, #2]
 800f112:	b2db      	uxtb	r3, r3
 800f114:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f118:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f120:	b2db      	uxtb	r3, r3
 800f122:	2b03      	cmp	r3, #3
 800f124:	d104      	bne.n	800f130 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f126:	6839      	ldr	r1, [r7, #0]
 800f128:	6878      	ldr	r0, [r7, #4]
 800f12a:	f000 f9a3 	bl	800f474 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f12e:	e01d      	b.n	800f16c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	7bfa      	ldrb	r2, [r7, #15]
 800f134:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f138:	7bfb      	ldrb	r3, [r7, #15]
 800f13a:	4619      	mov	r1, r3
 800f13c:	6878      	ldr	r0, [r7, #4]
 800f13e:	f000 fecb 	bl	800fed8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f000 fa61 	bl	800f60a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f148:	7bfb      	ldrb	r3, [r7, #15]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d004      	beq.n	800f158 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	2202      	movs	r2, #2
 800f152:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f156:	e009      	b.n	800f16c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	2201      	movs	r2, #1
 800f15c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f160:	e004      	b.n	800f16c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f162:	6839      	ldr	r1, [r7, #0]
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f000 f985 	bl	800f474 <USBD_CtlError>
  }
}
 800f16a:	bf00      	nop
 800f16c:	bf00      	nop
 800f16e:	3710      	adds	r7, #16
 800f170:	46bd      	mov	sp, r7
 800f172:	bd80      	pop	{r7, pc}

0800f174 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b084      	sub	sp, #16
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
 800f17c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f17e:	2300      	movs	r3, #0
 800f180:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	885b      	ldrh	r3, [r3, #2]
 800f186:	b2da      	uxtb	r2, r3
 800f188:	4b4c      	ldr	r3, [pc, #304]	@ (800f2bc <USBD_SetConfig+0x148>)
 800f18a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f18c:	4b4b      	ldr	r3, [pc, #300]	@ (800f2bc <USBD_SetConfig+0x148>)
 800f18e:	781b      	ldrb	r3, [r3, #0]
 800f190:	2b01      	cmp	r3, #1
 800f192:	d905      	bls.n	800f1a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f194:	6839      	ldr	r1, [r7, #0]
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f000 f96c 	bl	800f474 <USBD_CtlError>
    return USBD_FAIL;
 800f19c:	2303      	movs	r3, #3
 800f19e:	e088      	b.n	800f2b2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1a6:	b2db      	uxtb	r3, r3
 800f1a8:	2b02      	cmp	r3, #2
 800f1aa:	d002      	beq.n	800f1b2 <USBD_SetConfig+0x3e>
 800f1ac:	2b03      	cmp	r3, #3
 800f1ae:	d025      	beq.n	800f1fc <USBD_SetConfig+0x88>
 800f1b0:	e071      	b.n	800f296 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f1b2:	4b42      	ldr	r3, [pc, #264]	@ (800f2bc <USBD_SetConfig+0x148>)
 800f1b4:	781b      	ldrb	r3, [r3, #0]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d01c      	beq.n	800f1f4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f1ba:	4b40      	ldr	r3, [pc, #256]	@ (800f2bc <USBD_SetConfig+0x148>)
 800f1bc:	781b      	ldrb	r3, [r3, #0]
 800f1be:	461a      	mov	r2, r3
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f1c4:	4b3d      	ldr	r3, [pc, #244]	@ (800f2bc <USBD_SetConfig+0x148>)
 800f1c6:	781b      	ldrb	r3, [r3, #0]
 800f1c8:	4619      	mov	r1, r3
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	f7ff f992 	bl	800e4f4 <USBD_SetClassConfig>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f1d4:	7bfb      	ldrb	r3, [r7, #15]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d004      	beq.n	800f1e4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f1da:	6839      	ldr	r1, [r7, #0]
 800f1dc:	6878      	ldr	r0, [r7, #4]
 800f1de:	f000 f949 	bl	800f474 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f1e2:	e065      	b.n	800f2b0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f1e4:	6878      	ldr	r0, [r7, #4]
 800f1e6:	f000 fa10 	bl	800f60a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	2203      	movs	r2, #3
 800f1ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f1f2:	e05d      	b.n	800f2b0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f000 fa08 	bl	800f60a <USBD_CtlSendStatus>
      break;
 800f1fa:	e059      	b.n	800f2b0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f1fc:	4b2f      	ldr	r3, [pc, #188]	@ (800f2bc <USBD_SetConfig+0x148>)
 800f1fe:	781b      	ldrb	r3, [r3, #0]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d112      	bne.n	800f22a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2202      	movs	r2, #2
 800f208:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f20c:	4b2b      	ldr	r3, [pc, #172]	@ (800f2bc <USBD_SetConfig+0x148>)
 800f20e:	781b      	ldrb	r3, [r3, #0]
 800f210:	461a      	mov	r2, r3
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f216:	4b29      	ldr	r3, [pc, #164]	@ (800f2bc <USBD_SetConfig+0x148>)
 800f218:	781b      	ldrb	r3, [r3, #0]
 800f21a:	4619      	mov	r1, r3
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f7ff f985 	bl	800e52c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	f000 f9f1 	bl	800f60a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f228:	e042      	b.n	800f2b0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800f22a:	4b24      	ldr	r3, [pc, #144]	@ (800f2bc <USBD_SetConfig+0x148>)
 800f22c:	781b      	ldrb	r3, [r3, #0]
 800f22e:	461a      	mov	r2, r3
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	685b      	ldr	r3, [r3, #4]
 800f234:	429a      	cmp	r2, r3
 800f236:	d02a      	beq.n	800f28e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	685b      	ldr	r3, [r3, #4]
 800f23c:	b2db      	uxtb	r3, r3
 800f23e:	4619      	mov	r1, r3
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f7ff f973 	bl	800e52c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f246:	4b1d      	ldr	r3, [pc, #116]	@ (800f2bc <USBD_SetConfig+0x148>)
 800f248:	781b      	ldrb	r3, [r3, #0]
 800f24a:	461a      	mov	r2, r3
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f250:	4b1a      	ldr	r3, [pc, #104]	@ (800f2bc <USBD_SetConfig+0x148>)
 800f252:	781b      	ldrb	r3, [r3, #0]
 800f254:	4619      	mov	r1, r3
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f7ff f94c 	bl	800e4f4 <USBD_SetClassConfig>
 800f25c:	4603      	mov	r3, r0
 800f25e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f260:	7bfb      	ldrb	r3, [r7, #15]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d00f      	beq.n	800f286 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800f266:	6839      	ldr	r1, [r7, #0]
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	f000 f903 	bl	800f474 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	685b      	ldr	r3, [r3, #4]
 800f272:	b2db      	uxtb	r3, r3
 800f274:	4619      	mov	r1, r3
 800f276:	6878      	ldr	r0, [r7, #4]
 800f278:	f7ff f958 	bl	800e52c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2202      	movs	r2, #2
 800f280:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f284:	e014      	b.n	800f2b0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f000 f9bf 	bl	800f60a <USBD_CtlSendStatus>
      break;
 800f28c:	e010      	b.n	800f2b0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f000 f9bb 	bl	800f60a <USBD_CtlSendStatus>
      break;
 800f294:	e00c      	b.n	800f2b0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800f296:	6839      	ldr	r1, [r7, #0]
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f000 f8eb 	bl	800f474 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f29e:	4b07      	ldr	r3, [pc, #28]	@ (800f2bc <USBD_SetConfig+0x148>)
 800f2a0:	781b      	ldrb	r3, [r3, #0]
 800f2a2:	4619      	mov	r1, r3
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f7ff f941 	bl	800e52c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f2aa:	2303      	movs	r3, #3
 800f2ac:	73fb      	strb	r3, [r7, #15]
      break;
 800f2ae:	bf00      	nop
  }

  return ret;
 800f2b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3710      	adds	r7, #16
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}
 800f2ba:	bf00      	nop
 800f2bc:	200004e0 	.word	0x200004e0

0800f2c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b082      	sub	sp, #8
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	88db      	ldrh	r3, [r3, #6]
 800f2ce:	2b01      	cmp	r3, #1
 800f2d0:	d004      	beq.n	800f2dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f2d2:	6839      	ldr	r1, [r7, #0]
 800f2d4:	6878      	ldr	r0, [r7, #4]
 800f2d6:	f000 f8cd 	bl	800f474 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f2da:	e023      	b.n	800f324 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f2e2:	b2db      	uxtb	r3, r3
 800f2e4:	2b02      	cmp	r3, #2
 800f2e6:	dc02      	bgt.n	800f2ee <USBD_GetConfig+0x2e>
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	dc03      	bgt.n	800f2f4 <USBD_GetConfig+0x34>
 800f2ec:	e015      	b.n	800f31a <USBD_GetConfig+0x5a>
 800f2ee:	2b03      	cmp	r3, #3
 800f2f0:	d00b      	beq.n	800f30a <USBD_GetConfig+0x4a>
 800f2f2:	e012      	b.n	800f31a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	3308      	adds	r3, #8
 800f2fe:	2201      	movs	r2, #1
 800f300:	4619      	mov	r1, r3
 800f302:	6878      	ldr	r0, [r7, #4]
 800f304:	f000 f927 	bl	800f556 <USBD_CtlSendData>
        break;
 800f308:	e00c      	b.n	800f324 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	3304      	adds	r3, #4
 800f30e:	2201      	movs	r2, #1
 800f310:	4619      	mov	r1, r3
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f000 f91f 	bl	800f556 <USBD_CtlSendData>
        break;
 800f318:	e004      	b.n	800f324 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f31a:	6839      	ldr	r1, [r7, #0]
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f000 f8a9 	bl	800f474 <USBD_CtlError>
        break;
 800f322:	bf00      	nop
}
 800f324:	bf00      	nop
 800f326:	3708      	adds	r7, #8
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}

0800f32c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b082      	sub	sp, #8
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
 800f334:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f33c:	b2db      	uxtb	r3, r3
 800f33e:	3b01      	subs	r3, #1
 800f340:	2b02      	cmp	r3, #2
 800f342:	d81e      	bhi.n	800f382 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	88db      	ldrh	r3, [r3, #6]
 800f348:	2b02      	cmp	r3, #2
 800f34a:	d004      	beq.n	800f356 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f34c:	6839      	ldr	r1, [r7, #0]
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	f000 f890 	bl	800f474 <USBD_CtlError>
        break;
 800f354:	e01a      	b.n	800f38c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2201      	movs	r2, #1
 800f35a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f362:	2b00      	cmp	r3, #0
 800f364:	d005      	beq.n	800f372 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	68db      	ldr	r3, [r3, #12]
 800f36a:	f043 0202 	orr.w	r2, r3, #2
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	330c      	adds	r3, #12
 800f376:	2202      	movs	r2, #2
 800f378:	4619      	mov	r1, r3
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f000 f8eb 	bl	800f556 <USBD_CtlSendData>
      break;
 800f380:	e004      	b.n	800f38c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f382:	6839      	ldr	r1, [r7, #0]
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	f000 f875 	bl	800f474 <USBD_CtlError>
      break;
 800f38a:	bf00      	nop
  }
}
 800f38c:	bf00      	nop
 800f38e:	3708      	adds	r7, #8
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}

0800f394 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b082      	sub	sp, #8
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
 800f39c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	885b      	ldrh	r3, [r3, #2]
 800f3a2:	2b01      	cmp	r3, #1
 800f3a4:	d106      	bne.n	800f3b4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	2201      	movs	r2, #1
 800f3aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f3ae:	6878      	ldr	r0, [r7, #4]
 800f3b0:	f000 f92b 	bl	800f60a <USBD_CtlSendStatus>
  }
}
 800f3b4:	bf00      	nop
 800f3b6:	3708      	adds	r7, #8
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}

0800f3bc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b082      	sub	sp, #8
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
 800f3c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f3cc:	b2db      	uxtb	r3, r3
 800f3ce:	3b01      	subs	r3, #1
 800f3d0:	2b02      	cmp	r3, #2
 800f3d2:	d80b      	bhi.n	800f3ec <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	885b      	ldrh	r3, [r3, #2]
 800f3d8:	2b01      	cmp	r3, #1
 800f3da:	d10c      	bne.n	800f3f6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2200      	movs	r2, #0
 800f3e0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f000 f910 	bl	800f60a <USBD_CtlSendStatus>
      }
      break;
 800f3ea:	e004      	b.n	800f3f6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f3ec:	6839      	ldr	r1, [r7, #0]
 800f3ee:	6878      	ldr	r0, [r7, #4]
 800f3f0:	f000 f840 	bl	800f474 <USBD_CtlError>
      break;
 800f3f4:	e000      	b.n	800f3f8 <USBD_ClrFeature+0x3c>
      break;
 800f3f6:	bf00      	nop
  }
}
 800f3f8:	bf00      	nop
 800f3fa:	3708      	adds	r7, #8
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}

0800f400 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b084      	sub	sp, #16
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
 800f408:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	781a      	ldrb	r2, [r3, #0]
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	3301      	adds	r3, #1
 800f41a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	781a      	ldrb	r2, [r3, #0]
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	3301      	adds	r3, #1
 800f428:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f42a:	68f8      	ldr	r0, [r7, #12]
 800f42c:	f7ff fa92 	bl	800e954 <SWAPBYTE>
 800f430:	4603      	mov	r3, r0
 800f432:	461a      	mov	r2, r3
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	3301      	adds	r3, #1
 800f43c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	3301      	adds	r3, #1
 800f442:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f444:	68f8      	ldr	r0, [r7, #12]
 800f446:	f7ff fa85 	bl	800e954 <SWAPBYTE>
 800f44a:	4603      	mov	r3, r0
 800f44c:	461a      	mov	r2, r3
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	3301      	adds	r3, #1
 800f456:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	3301      	adds	r3, #1
 800f45c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f45e:	68f8      	ldr	r0, [r7, #12]
 800f460:	f7ff fa78 	bl	800e954 <SWAPBYTE>
 800f464:	4603      	mov	r3, r0
 800f466:	461a      	mov	r2, r3
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	80da      	strh	r2, [r3, #6]
}
 800f46c:	bf00      	nop
 800f46e:	3710      	adds	r7, #16
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}

0800f474 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b082      	sub	sp, #8
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
 800f47c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f47e:	2180      	movs	r1, #128	@ 0x80
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	f000 fcbf 	bl	800fe04 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f486:	2100      	movs	r1, #0
 800f488:	6878      	ldr	r0, [r7, #4]
 800f48a:	f000 fcbb 	bl	800fe04 <USBD_LL_StallEP>
}
 800f48e:	bf00      	nop
 800f490:	3708      	adds	r7, #8
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}

0800f496 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f496:	b580      	push	{r7, lr}
 800f498:	b086      	sub	sp, #24
 800f49a:	af00      	add	r7, sp, #0
 800f49c:	60f8      	str	r0, [r7, #12]
 800f49e:	60b9      	str	r1, [r7, #8]
 800f4a0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d036      	beq.n	800f51a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f4b0:	6938      	ldr	r0, [r7, #16]
 800f4b2:	f000 f836 	bl	800f522 <USBD_GetLen>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	3301      	adds	r3, #1
 800f4ba:	b29b      	uxth	r3, r3
 800f4bc:	005b      	lsls	r3, r3, #1
 800f4be:	b29a      	uxth	r2, r3
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f4c4:	7dfb      	ldrb	r3, [r7, #23]
 800f4c6:	68ba      	ldr	r2, [r7, #8]
 800f4c8:	4413      	add	r3, r2
 800f4ca:	687a      	ldr	r2, [r7, #4]
 800f4cc:	7812      	ldrb	r2, [r2, #0]
 800f4ce:	701a      	strb	r2, [r3, #0]
  idx++;
 800f4d0:	7dfb      	ldrb	r3, [r7, #23]
 800f4d2:	3301      	adds	r3, #1
 800f4d4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f4d6:	7dfb      	ldrb	r3, [r7, #23]
 800f4d8:	68ba      	ldr	r2, [r7, #8]
 800f4da:	4413      	add	r3, r2
 800f4dc:	2203      	movs	r2, #3
 800f4de:	701a      	strb	r2, [r3, #0]
  idx++;
 800f4e0:	7dfb      	ldrb	r3, [r7, #23]
 800f4e2:	3301      	adds	r3, #1
 800f4e4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f4e6:	e013      	b.n	800f510 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f4e8:	7dfb      	ldrb	r3, [r7, #23]
 800f4ea:	68ba      	ldr	r2, [r7, #8]
 800f4ec:	4413      	add	r3, r2
 800f4ee:	693a      	ldr	r2, [r7, #16]
 800f4f0:	7812      	ldrb	r2, [r2, #0]
 800f4f2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f4f4:	693b      	ldr	r3, [r7, #16]
 800f4f6:	3301      	adds	r3, #1
 800f4f8:	613b      	str	r3, [r7, #16]
    idx++;
 800f4fa:	7dfb      	ldrb	r3, [r7, #23]
 800f4fc:	3301      	adds	r3, #1
 800f4fe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f500:	7dfb      	ldrb	r3, [r7, #23]
 800f502:	68ba      	ldr	r2, [r7, #8]
 800f504:	4413      	add	r3, r2
 800f506:	2200      	movs	r2, #0
 800f508:	701a      	strb	r2, [r3, #0]
    idx++;
 800f50a:	7dfb      	ldrb	r3, [r7, #23]
 800f50c:	3301      	adds	r3, #1
 800f50e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f510:	693b      	ldr	r3, [r7, #16]
 800f512:	781b      	ldrb	r3, [r3, #0]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d1e7      	bne.n	800f4e8 <USBD_GetString+0x52>
 800f518:	e000      	b.n	800f51c <USBD_GetString+0x86>
    return;
 800f51a:	bf00      	nop
  }
}
 800f51c:	3718      	adds	r7, #24
 800f51e:	46bd      	mov	sp, r7
 800f520:	bd80      	pop	{r7, pc}

0800f522 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f522:	b480      	push	{r7}
 800f524:	b085      	sub	sp, #20
 800f526:	af00      	add	r7, sp, #0
 800f528:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f52a:	2300      	movs	r3, #0
 800f52c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f532:	e005      	b.n	800f540 <USBD_GetLen+0x1e>
  {
    len++;
 800f534:	7bfb      	ldrb	r3, [r7, #15]
 800f536:	3301      	adds	r3, #1
 800f538:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	3301      	adds	r3, #1
 800f53e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	781b      	ldrb	r3, [r3, #0]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d1f5      	bne.n	800f534 <USBD_GetLen+0x12>
  }

  return len;
 800f548:	7bfb      	ldrb	r3, [r7, #15]
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3714      	adds	r7, #20
 800f54e:	46bd      	mov	sp, r7
 800f550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f554:	4770      	bx	lr

0800f556 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f556:	b580      	push	{r7, lr}
 800f558:	b084      	sub	sp, #16
 800f55a:	af00      	add	r7, sp, #0
 800f55c:	60f8      	str	r0, [r7, #12]
 800f55e:	60b9      	str	r1, [r7, #8]
 800f560:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	2202      	movs	r2, #2
 800f566:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	687a      	ldr	r2, [r7, #4]
 800f56e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	687a      	ldr	r2, [r7, #4]
 800f574:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	68ba      	ldr	r2, [r7, #8]
 800f57a:	2100      	movs	r1, #0
 800f57c:	68f8      	ldr	r0, [r7, #12]
 800f57e:	f000 fcca 	bl	800ff16 <USBD_LL_Transmit>

  return USBD_OK;
 800f582:	2300      	movs	r3, #0
}
 800f584:	4618      	mov	r0, r3
 800f586:	3710      	adds	r7, #16
 800f588:	46bd      	mov	sp, r7
 800f58a:	bd80      	pop	{r7, pc}

0800f58c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b084      	sub	sp, #16
 800f590:	af00      	add	r7, sp, #0
 800f592:	60f8      	str	r0, [r7, #12]
 800f594:	60b9      	str	r1, [r7, #8]
 800f596:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	68ba      	ldr	r2, [r7, #8]
 800f59c:	2100      	movs	r1, #0
 800f59e:	68f8      	ldr	r0, [r7, #12]
 800f5a0:	f000 fcb9 	bl	800ff16 <USBD_LL_Transmit>

  return USBD_OK;
 800f5a4:	2300      	movs	r3, #0
}
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	3710      	adds	r7, #16
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}

0800f5ae <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f5ae:	b580      	push	{r7, lr}
 800f5b0:	b084      	sub	sp, #16
 800f5b2:	af00      	add	r7, sp, #0
 800f5b4:	60f8      	str	r0, [r7, #12]
 800f5b6:	60b9      	str	r1, [r7, #8]
 800f5b8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	2203      	movs	r2, #3
 800f5be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	687a      	ldr	r2, [r7, #4]
 800f5c6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	687a      	ldr	r2, [r7, #4]
 800f5ce:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	68ba      	ldr	r2, [r7, #8]
 800f5d6:	2100      	movs	r1, #0
 800f5d8:	68f8      	ldr	r0, [r7, #12]
 800f5da:	f000 fcbd 	bl	800ff58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f5de:	2300      	movs	r3, #0
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3710      	adds	r7, #16
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}

0800f5e8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b084      	sub	sp, #16
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	60f8      	str	r0, [r7, #12]
 800f5f0:	60b9      	str	r1, [r7, #8]
 800f5f2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	68ba      	ldr	r2, [r7, #8]
 800f5f8:	2100      	movs	r1, #0
 800f5fa:	68f8      	ldr	r0, [r7, #12]
 800f5fc:	f000 fcac 	bl	800ff58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f600:	2300      	movs	r3, #0
}
 800f602:	4618      	mov	r0, r3
 800f604:	3710      	adds	r7, #16
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}

0800f60a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f60a:	b580      	push	{r7, lr}
 800f60c:	b082      	sub	sp, #8
 800f60e:	af00      	add	r7, sp, #0
 800f610:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	2204      	movs	r2, #4
 800f616:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f61a:	2300      	movs	r3, #0
 800f61c:	2200      	movs	r2, #0
 800f61e:	2100      	movs	r1, #0
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	f000 fc78 	bl	800ff16 <USBD_LL_Transmit>

  return USBD_OK;
 800f626:	2300      	movs	r3, #0
}
 800f628:	4618      	mov	r0, r3
 800f62a:	3708      	adds	r7, #8
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}

0800f630 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b082      	sub	sp, #8
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2205      	movs	r2, #5
 800f63c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f640:	2300      	movs	r3, #0
 800f642:	2200      	movs	r2, #0
 800f644:	2100      	movs	r1, #0
 800f646:	6878      	ldr	r0, [r7, #4]
 800f648:	f000 fc86 	bl	800ff58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f64c:	2300      	movs	r3, #0
}
 800f64e:	4618      	mov	r0, r3
 800f650:	3708      	adds	r7, #8
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}
	...

0800f658 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

	// force host to re-enumerate device to ensure debugger compatibility
	HAL_GPIO_WritePin(USB_RENUM_PORT, USB_RENUM_PIN, RESET);
 800f65c:	2200      	movs	r2, #0
 800f65e:	2120      	movs	r1, #32
 800f660:	4818      	ldr	r0, [pc, #96]	@ (800f6c4 <MX_USB_Device_Init+0x6c>)
 800f662:	f7f5 f9d5 	bl	8004a10 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800f666:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800f66a:	f7f4 fca3 	bl	8003fb4 <HAL_Delay>
	HAL_GPIO_WritePin(USB_RENUM_PORT, USB_RENUM_PIN, SET);
 800f66e:	2201      	movs	r2, #1
 800f670:	2120      	movs	r1, #32
 800f672:	4814      	ldr	r0, [pc, #80]	@ (800f6c4 <MX_USB_Device_Init+0x6c>)
 800f674:	f7f5 f9cc 	bl	8004a10 <HAL_GPIO_WritePin>

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800f678:	2200      	movs	r2, #0
 800f67a:	4913      	ldr	r1, [pc, #76]	@ (800f6c8 <MX_USB_Device_Init+0x70>)
 800f67c:	4813      	ldr	r0, [pc, #76]	@ (800f6cc <MX_USB_Device_Init+0x74>)
 800f67e:	f7fe fecb 	bl	800e418 <USBD_Init>
 800f682:	4603      	mov	r3, r0
 800f684:	2b00      	cmp	r3, #0
 800f686:	d001      	beq.n	800f68c <MX_USB_Device_Init+0x34>
    Error_Handler();
 800f688:	f7f1 fead 	bl	80013e6 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800f68c:	4910      	ldr	r1, [pc, #64]	@ (800f6d0 <MX_USB_Device_Init+0x78>)
 800f68e:	480f      	ldr	r0, [pc, #60]	@ (800f6cc <MX_USB_Device_Init+0x74>)
 800f690:	f7fe fef2 	bl	800e478 <USBD_RegisterClass>
 800f694:	4603      	mov	r3, r0
 800f696:	2b00      	cmp	r3, #0
 800f698:	d001      	beq.n	800f69e <MX_USB_Device_Init+0x46>
    Error_Handler();
 800f69a:	f7f1 fea4 	bl	80013e6 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800f69e:	490d      	ldr	r1, [pc, #52]	@ (800f6d4 <MX_USB_Device_Init+0x7c>)
 800f6a0:	480a      	ldr	r0, [pc, #40]	@ (800f6cc <MX_USB_Device_Init+0x74>)
 800f6a2:	f7fe fe13 	bl	800e2cc <USBD_CDC_RegisterInterface>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d001      	beq.n	800f6b0 <MX_USB_Device_Init+0x58>
    Error_Handler();
 800f6ac:	f7f1 fe9b 	bl	80013e6 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800f6b0:	4806      	ldr	r0, [pc, #24]	@ (800f6cc <MX_USB_Device_Init+0x74>)
 800f6b2:	f7fe ff08 	bl	800e4c6 <USBD_Start>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d001      	beq.n	800f6c0 <MX_USB_Device_Init+0x68>
    Error_Handler();
 800f6bc:	f7f1 fe93 	bl	80013e6 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800f6c0:	bf00      	nop
 800f6c2:	bd80      	pop	{r7, pc}
 800f6c4:	48000400 	.word	0x48000400
 800f6c8:	20000130 	.word	0x20000130
 800f6cc:	200004e4 	.word	0x200004e4
 800f6d0:	20000018 	.word	0x20000018
 800f6d4:	2000011c 	.word	0x2000011c

0800f6d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f6dc:	2200      	movs	r2, #0
 800f6de:	4905      	ldr	r1, [pc, #20]	@ (800f6f4 <CDC_Init_FS+0x1c>)
 800f6e0:	4805      	ldr	r0, [pc, #20]	@ (800f6f8 <CDC_Init_FS+0x20>)
 800f6e2:	f7fe fe08 	bl	800e2f6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f6e6:	4905      	ldr	r1, [pc, #20]	@ (800f6fc <CDC_Init_FS+0x24>)
 800f6e8:	4803      	ldr	r0, [pc, #12]	@ (800f6f8 <CDC_Init_FS+0x20>)
 800f6ea:	f7fe fe22 	bl	800e332 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f6ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	bd80      	pop	{r7, pc}
 800f6f4:	20000fb4 	.word	0x20000fb4
 800f6f8:	200004e4 	.word	0x200004e4
 800f6fc:	200007b4 	.word	0x200007b4

0800f700 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f700:	b480      	push	{r7}
 800f702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f704:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f706:	4618      	mov	r0, r3
 800f708:	46bd      	mov	sp, r7
 800f70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70e:	4770      	bx	lr

0800f710 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f710:	b480      	push	{r7}
 800f712:	b083      	sub	sp, #12
 800f714:	af00      	add	r7, sp, #0
 800f716:	4603      	mov	r3, r0
 800f718:	6039      	str	r1, [r7, #0]
 800f71a:	71fb      	strb	r3, [r7, #7]
 800f71c:	4613      	mov	r3, r2
 800f71e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f720:	79fb      	ldrb	r3, [r7, #7]
 800f722:	2b23      	cmp	r3, #35	@ 0x23
 800f724:	d84a      	bhi.n	800f7bc <CDC_Control_FS+0xac>
 800f726:	a201      	add	r2, pc, #4	@ (adr r2, 800f72c <CDC_Control_FS+0x1c>)
 800f728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f72c:	0800f7bd 	.word	0x0800f7bd
 800f730:	0800f7bd 	.word	0x0800f7bd
 800f734:	0800f7bd 	.word	0x0800f7bd
 800f738:	0800f7bd 	.word	0x0800f7bd
 800f73c:	0800f7bd 	.word	0x0800f7bd
 800f740:	0800f7bd 	.word	0x0800f7bd
 800f744:	0800f7bd 	.word	0x0800f7bd
 800f748:	0800f7bd 	.word	0x0800f7bd
 800f74c:	0800f7bd 	.word	0x0800f7bd
 800f750:	0800f7bd 	.word	0x0800f7bd
 800f754:	0800f7bd 	.word	0x0800f7bd
 800f758:	0800f7bd 	.word	0x0800f7bd
 800f75c:	0800f7bd 	.word	0x0800f7bd
 800f760:	0800f7bd 	.word	0x0800f7bd
 800f764:	0800f7bd 	.word	0x0800f7bd
 800f768:	0800f7bd 	.word	0x0800f7bd
 800f76c:	0800f7bd 	.word	0x0800f7bd
 800f770:	0800f7bd 	.word	0x0800f7bd
 800f774:	0800f7bd 	.word	0x0800f7bd
 800f778:	0800f7bd 	.word	0x0800f7bd
 800f77c:	0800f7bd 	.word	0x0800f7bd
 800f780:	0800f7bd 	.word	0x0800f7bd
 800f784:	0800f7bd 	.word	0x0800f7bd
 800f788:	0800f7bd 	.word	0x0800f7bd
 800f78c:	0800f7bd 	.word	0x0800f7bd
 800f790:	0800f7bd 	.word	0x0800f7bd
 800f794:	0800f7bd 	.word	0x0800f7bd
 800f798:	0800f7bd 	.word	0x0800f7bd
 800f79c:	0800f7bd 	.word	0x0800f7bd
 800f7a0:	0800f7bd 	.word	0x0800f7bd
 800f7a4:	0800f7bd 	.word	0x0800f7bd
 800f7a8:	0800f7bd 	.word	0x0800f7bd
 800f7ac:	0800f7bd 	.word	0x0800f7bd
 800f7b0:	0800f7bd 	.word	0x0800f7bd
 800f7b4:	0800f7bd 	.word	0x0800f7bd
 800f7b8:	0800f7bd 	.word	0x0800f7bd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f7bc:	bf00      	nop
  }

  return (USBD_OK);
 800f7be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	370c      	adds	r7, #12
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ca:	4770      	bx	lr

0800f7cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b084      	sub	sp, #16
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
 800f7d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f7d6:	6879      	ldr	r1, [r7, #4]
 800f7d8:	4810      	ldr	r0, [pc, #64]	@ (800f81c <CDC_Receive_FS+0x50>)
 800f7da:	f7fe fdaa 	bl	800e332 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f7de:	480f      	ldr	r0, [pc, #60]	@ (800f81c <CDC_Receive_FS+0x50>)
 800f7e0:	f7fe fdf0 	bl	800e3c4 <USBD_CDC_ReceivePacket>

  sys.usb_data_present = 1;
 800f7e4:	4b0e      	ldr	r3, [pc, #56]	@ (800f820 <CDC_Receive_FS+0x54>)
 800f7e6:	2201      	movs	r2, #1
 800f7e8:	66da      	str	r2, [r3, #108]	@ 0x6c

  uint8_t len = (uint8_t) *Len;
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	73fb      	strb	r3, [r7, #15]
  memset (sys.usb_vcp_buffer, '\0', 64); // to clear buffer of old data
 800f7f0:	2240      	movs	r2, #64	@ 0x40
 800f7f2:	2100      	movs	r1, #0
 800f7f4:	480b      	ldr	r0, [pc, #44]	@ (800f824 <CDC_Receive_FS+0x58>)
 800f7f6:	f000 fca9 	bl	801014c <memset>
  memcpy (sys.usb_vcp_buffer, Buf, len); // copy data from receive buffer to program buffer
 800f7fa:	7bfb      	ldrb	r3, [r7, #15]
 800f7fc:	461a      	mov	r2, r3
 800f7fe:	6879      	ldr	r1, [r7, #4]
 800f800:	4808      	ldr	r0, [pc, #32]	@ (800f824 <CDC_Receive_FS+0x58>)
 800f802:	f000 fcd5 	bl	80101b0 <memcpy>
  memset (Buf, '\0', 64); // clear receive buffer
 800f806:	2240      	movs	r2, #64	@ 0x40
 800f808:	2100      	movs	r1, #0
 800f80a:	6878      	ldr	r0, [r7, #4]
 800f80c:	f000 fc9e 	bl	801014c <memset>

  return (USBD_OK);
 800f810:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f812:	4618      	mov	r0, r3
 800f814:	3710      	adds	r7, #16
 800f816:	46bd      	mov	sp, r7
 800f818:	bd80      	pop	{r7, pc}
 800f81a:	bf00      	nop
 800f81c:	200004e4 	.word	0x200004e4
 800f820:	20000370 	.word	0x20000370
 800f824:	20000390 	.word	0x20000390

0800f828 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b084      	sub	sp, #16
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
 800f830:	460b      	mov	r3, r1
 800f832:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f834:	2300      	movs	r3, #0
 800f836:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f838:	4b0d      	ldr	r3, [pc, #52]	@ (800f870 <CDC_Transmit_FS+0x48>)
 800f83a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f83e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f840:	68bb      	ldr	r3, [r7, #8]
 800f842:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f846:	2b00      	cmp	r3, #0
 800f848:	d001      	beq.n	800f84e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f84a:	2301      	movs	r3, #1
 800f84c:	e00b      	b.n	800f866 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f84e:	887b      	ldrh	r3, [r7, #2]
 800f850:	461a      	mov	r2, r3
 800f852:	6879      	ldr	r1, [r7, #4]
 800f854:	4806      	ldr	r0, [pc, #24]	@ (800f870 <CDC_Transmit_FS+0x48>)
 800f856:	f7fe fd4e 	bl	800e2f6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f85a:	4805      	ldr	r0, [pc, #20]	@ (800f870 <CDC_Transmit_FS+0x48>)
 800f85c:	f7fe fd82 	bl	800e364 <USBD_CDC_TransmitPacket>
 800f860:	4603      	mov	r3, r0
 800f862:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f864:	7bfb      	ldrb	r3, [r7, #15]
}
 800f866:	4618      	mov	r0, r3
 800f868:	3710      	adds	r7, #16
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bd80      	pop	{r7, pc}
 800f86e:	bf00      	nop
 800f870:	200004e4 	.word	0x200004e4

0800f874 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f874:	b480      	push	{r7}
 800f876:	b087      	sub	sp, #28
 800f878:	af00      	add	r7, sp, #0
 800f87a:	60f8      	str	r0, [r7, #12]
 800f87c:	60b9      	str	r1, [r7, #8]
 800f87e:	4613      	mov	r3, r2
 800f880:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f882:	2300      	movs	r3, #0
 800f884:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f886:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f88a:	4618      	mov	r0, r3
 800f88c:	371c      	adds	r7, #28
 800f88e:	46bd      	mov	sp, r7
 800f890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f894:	4770      	bx	lr
	...

0800f898 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f898:	b480      	push	{r7}
 800f89a:	b083      	sub	sp, #12
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	4603      	mov	r3, r0
 800f8a0:	6039      	str	r1, [r7, #0]
 800f8a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	2212      	movs	r2, #18
 800f8a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800f8aa:	4b03      	ldr	r3, [pc, #12]	@ (800f8b8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	370c      	adds	r7, #12
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b6:	4770      	bx	lr
 800f8b8:	20000150 	.word	0x20000150

0800f8bc <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8bc:	b480      	push	{r7}
 800f8be:	b083      	sub	sp, #12
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	6039      	str	r1, [r7, #0]
 800f8c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	2204      	movs	r2, #4
 800f8cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f8ce:	4b03      	ldr	r3, [pc, #12]	@ (800f8dc <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	370c      	adds	r7, #12
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8da:	4770      	bx	lr
 800f8dc:	20000164 	.word	0x20000164

0800f8e0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b082      	sub	sp, #8
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	6039      	str	r1, [r7, #0]
 800f8ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f8ec:	79fb      	ldrb	r3, [r7, #7]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d105      	bne.n	800f8fe <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800f8f2:	683a      	ldr	r2, [r7, #0]
 800f8f4:	4907      	ldr	r1, [pc, #28]	@ (800f914 <USBD_CDC_ProductStrDescriptor+0x34>)
 800f8f6:	4808      	ldr	r0, [pc, #32]	@ (800f918 <USBD_CDC_ProductStrDescriptor+0x38>)
 800f8f8:	f7ff fdcd 	bl	800f496 <USBD_GetString>
 800f8fc:	e004      	b.n	800f908 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800f8fe:	683a      	ldr	r2, [r7, #0]
 800f900:	4904      	ldr	r1, [pc, #16]	@ (800f914 <USBD_CDC_ProductStrDescriptor+0x34>)
 800f902:	4805      	ldr	r0, [pc, #20]	@ (800f918 <USBD_CDC_ProductStrDescriptor+0x38>)
 800f904:	f7ff fdc7 	bl	800f496 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f908:	4b02      	ldr	r3, [pc, #8]	@ (800f914 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800f90a:	4618      	mov	r0, r3
 800f90c:	3708      	adds	r7, #8
 800f90e:	46bd      	mov	sp, r7
 800f910:	bd80      	pop	{r7, pc}
 800f912:	bf00      	nop
 800f914:	200017b4 	.word	0x200017b4
 800f918:	08010b00 	.word	0x08010b00

0800f91c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b082      	sub	sp, #8
 800f920:	af00      	add	r7, sp, #0
 800f922:	4603      	mov	r3, r0
 800f924:	6039      	str	r1, [r7, #0]
 800f926:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f928:	683a      	ldr	r2, [r7, #0]
 800f92a:	4904      	ldr	r1, [pc, #16]	@ (800f93c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800f92c:	4804      	ldr	r0, [pc, #16]	@ (800f940 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800f92e:	f7ff fdb2 	bl	800f496 <USBD_GetString>
  return USBD_StrDesc;
 800f932:	4b02      	ldr	r3, [pc, #8]	@ (800f93c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800f934:	4618      	mov	r0, r3
 800f936:	3708      	adds	r7, #8
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}
 800f93c:	200017b4 	.word	0x200017b4
 800f940:	08010b14 	.word	0x08010b14

0800f944 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b082      	sub	sp, #8
 800f948:	af00      	add	r7, sp, #0
 800f94a:	4603      	mov	r3, r0
 800f94c:	6039      	str	r1, [r7, #0]
 800f94e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	221a      	movs	r2, #26
 800f954:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f956:	f000 f843 	bl	800f9e0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800f95a:	4b02      	ldr	r3, [pc, #8]	@ (800f964 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800f95c:	4618      	mov	r0, r3
 800f95e:	3708      	adds	r7, #8
 800f960:	46bd      	mov	sp, r7
 800f962:	bd80      	pop	{r7, pc}
 800f964:	20000168 	.word	0x20000168

0800f968 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b082      	sub	sp, #8
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	4603      	mov	r3, r0
 800f970:	6039      	str	r1, [r7, #0]
 800f972:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f974:	79fb      	ldrb	r3, [r7, #7]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d105      	bne.n	800f986 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f97a:	683a      	ldr	r2, [r7, #0]
 800f97c:	4907      	ldr	r1, [pc, #28]	@ (800f99c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800f97e:	4808      	ldr	r0, [pc, #32]	@ (800f9a0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800f980:	f7ff fd89 	bl	800f496 <USBD_GetString>
 800f984:	e004      	b.n	800f990 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f986:	683a      	ldr	r2, [r7, #0]
 800f988:	4904      	ldr	r1, [pc, #16]	@ (800f99c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800f98a:	4805      	ldr	r0, [pc, #20]	@ (800f9a0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800f98c:	f7ff fd83 	bl	800f496 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f990:	4b02      	ldr	r3, [pc, #8]	@ (800f99c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800f992:	4618      	mov	r0, r3
 800f994:	3708      	adds	r7, #8
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}
 800f99a:	bf00      	nop
 800f99c:	200017b4 	.word	0x200017b4
 800f9a0:	08010b28 	.word	0x08010b28

0800f9a4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b082      	sub	sp, #8
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	6039      	str	r1, [r7, #0]
 800f9ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f9b0:	79fb      	ldrb	r3, [r7, #7]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d105      	bne.n	800f9c2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f9b6:	683a      	ldr	r2, [r7, #0]
 800f9b8:	4907      	ldr	r1, [pc, #28]	@ (800f9d8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800f9ba:	4808      	ldr	r0, [pc, #32]	@ (800f9dc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800f9bc:	f7ff fd6b 	bl	800f496 <USBD_GetString>
 800f9c0:	e004      	b.n	800f9cc <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f9c2:	683a      	ldr	r2, [r7, #0]
 800f9c4:	4904      	ldr	r1, [pc, #16]	@ (800f9d8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800f9c6:	4805      	ldr	r0, [pc, #20]	@ (800f9dc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800f9c8:	f7ff fd65 	bl	800f496 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f9cc:	4b02      	ldr	r3, [pc, #8]	@ (800f9d8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	3708      	adds	r7, #8
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}
 800f9d6:	bf00      	nop
 800f9d8:	200017b4 	.word	0x200017b4
 800f9dc:	08010b34 	.word	0x08010b34

0800f9e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b084      	sub	sp, #16
 800f9e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f9e6:	4b0f      	ldr	r3, [pc, #60]	@ (800fa24 <Get_SerialNum+0x44>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f9ec:	4b0e      	ldr	r3, [pc, #56]	@ (800fa28 <Get_SerialNum+0x48>)
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f9f2:	4b0e      	ldr	r3, [pc, #56]	@ (800fa2c <Get_SerialNum+0x4c>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f9f8:	68fa      	ldr	r2, [r7, #12]
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	4413      	add	r3, r2
 800f9fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d009      	beq.n	800fa1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fa06:	2208      	movs	r2, #8
 800fa08:	4909      	ldr	r1, [pc, #36]	@ (800fa30 <Get_SerialNum+0x50>)
 800fa0a:	68f8      	ldr	r0, [r7, #12]
 800fa0c:	f000 f814 	bl	800fa38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fa10:	2204      	movs	r2, #4
 800fa12:	4908      	ldr	r1, [pc, #32]	@ (800fa34 <Get_SerialNum+0x54>)
 800fa14:	68b8      	ldr	r0, [r7, #8]
 800fa16:	f000 f80f 	bl	800fa38 <IntToUnicode>
  }
}
 800fa1a:	bf00      	nop
 800fa1c:	3710      	adds	r7, #16
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}
 800fa22:	bf00      	nop
 800fa24:	1fff7590 	.word	0x1fff7590
 800fa28:	1fff7594 	.word	0x1fff7594
 800fa2c:	1fff7598 	.word	0x1fff7598
 800fa30:	2000016a 	.word	0x2000016a
 800fa34:	2000017a 	.word	0x2000017a

0800fa38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fa38:	b480      	push	{r7}
 800fa3a:	b087      	sub	sp, #28
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	60f8      	str	r0, [r7, #12]
 800fa40:	60b9      	str	r1, [r7, #8]
 800fa42:	4613      	mov	r3, r2
 800fa44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fa46:	2300      	movs	r3, #0
 800fa48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	75fb      	strb	r3, [r7, #23]
 800fa4e:	e027      	b.n	800faa0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	0f1b      	lsrs	r3, r3, #28
 800fa54:	2b09      	cmp	r3, #9
 800fa56:	d80b      	bhi.n	800fa70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	0f1b      	lsrs	r3, r3, #28
 800fa5c:	b2da      	uxtb	r2, r3
 800fa5e:	7dfb      	ldrb	r3, [r7, #23]
 800fa60:	005b      	lsls	r3, r3, #1
 800fa62:	4619      	mov	r1, r3
 800fa64:	68bb      	ldr	r3, [r7, #8]
 800fa66:	440b      	add	r3, r1
 800fa68:	3230      	adds	r2, #48	@ 0x30
 800fa6a:	b2d2      	uxtb	r2, r2
 800fa6c:	701a      	strb	r2, [r3, #0]
 800fa6e:	e00a      	b.n	800fa86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	0f1b      	lsrs	r3, r3, #28
 800fa74:	b2da      	uxtb	r2, r3
 800fa76:	7dfb      	ldrb	r3, [r7, #23]
 800fa78:	005b      	lsls	r3, r3, #1
 800fa7a:	4619      	mov	r1, r3
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	440b      	add	r3, r1
 800fa80:	3237      	adds	r2, #55	@ 0x37
 800fa82:	b2d2      	uxtb	r2, r2
 800fa84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	011b      	lsls	r3, r3, #4
 800fa8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fa8c:	7dfb      	ldrb	r3, [r7, #23]
 800fa8e:	005b      	lsls	r3, r3, #1
 800fa90:	3301      	adds	r3, #1
 800fa92:	68ba      	ldr	r2, [r7, #8]
 800fa94:	4413      	add	r3, r2
 800fa96:	2200      	movs	r2, #0
 800fa98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fa9a:	7dfb      	ldrb	r3, [r7, #23]
 800fa9c:	3301      	adds	r3, #1
 800fa9e:	75fb      	strb	r3, [r7, #23]
 800faa0:	7dfa      	ldrb	r2, [r7, #23]
 800faa2:	79fb      	ldrb	r3, [r7, #7]
 800faa4:	429a      	cmp	r2, r3
 800faa6:	d3d3      	bcc.n	800fa50 <IntToUnicode+0x18>
  }
}
 800faa8:	bf00      	nop
 800faaa:	bf00      	nop
 800faac:	371c      	adds	r7, #28
 800faae:	46bd      	mov	sp, r7
 800fab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab4:	4770      	bx	lr
	...

0800fab8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b098      	sub	sp, #96	@ 0x60
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800fac0:	f107 0310 	add.w	r3, r7, #16
 800fac4:	2250      	movs	r2, #80	@ 0x50
 800fac6:	2100      	movs	r1, #0
 800fac8:	4618      	mov	r0, r3
 800faca:	f000 fb3f 	bl	801014c <memset>
  if(pcdHandle->Instance==USB)
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	4a15      	ldr	r2, [pc, #84]	@ (800fb28 <HAL_PCD_MspInit+0x70>)
 800fad4:	4293      	cmp	r3, r2
 800fad6:	d122      	bne.n	800fb1e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800fad8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800fadc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800fade:	2300      	movs	r3, #0
 800fae0:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800fae2:	f107 0310 	add.w	r3, r7, #16
 800fae6:	4618      	mov	r0, r3
 800fae8:	f7f8 fad2 	bl	8008090 <HAL_RCCEx_PeriphCLKConfig>
 800faec:	4603      	mov	r3, r0
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d001      	beq.n	800faf6 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800faf2:	f7f1 fc78 	bl	80013e6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800faf6:	4b0d      	ldr	r3, [pc, #52]	@ (800fb2c <HAL_PCD_MspInit+0x74>)
 800faf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fafa:	4a0c      	ldr	r2, [pc, #48]	@ (800fb2c <HAL_PCD_MspInit+0x74>)
 800fafc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800fb00:	6593      	str	r3, [r2, #88]	@ 0x58
 800fb02:	4b0a      	ldr	r3, [pc, #40]	@ (800fb2c <HAL_PCD_MspInit+0x74>)
 800fb04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fb06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fb0a:	60fb      	str	r3, [r7, #12]
 800fb0c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800fb0e:	2200      	movs	r2, #0
 800fb10:	2100      	movs	r1, #0
 800fb12:	2014      	movs	r0, #20
 800fb14:	f7f4 fb4b 	bl	80041ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800fb18:	2014      	movs	r0, #20
 800fb1a:	f7f4 fb62 	bl	80041e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800fb1e:	bf00      	nop
 800fb20:	3760      	adds	r7, #96	@ 0x60
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd80      	pop	{r7, pc}
 800fb26:	bf00      	nop
 800fb28:	40005c00 	.word	0x40005c00
 800fb2c:	40021000 	.word	0x40021000

0800fb30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b082      	sub	sp, #8
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800fb44:	4619      	mov	r1, r3
 800fb46:	4610      	mov	r0, r2
 800fb48:	f7fe fd08 	bl	800e55c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800fb4c:	bf00      	nop
 800fb4e:	3708      	adds	r7, #8
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bd80      	pop	{r7, pc}

0800fb54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b082      	sub	sp, #8
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
 800fb5c:	460b      	mov	r3, r1
 800fb5e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800fb66:	78fa      	ldrb	r2, [r7, #3]
 800fb68:	6879      	ldr	r1, [r7, #4]
 800fb6a:	4613      	mov	r3, r2
 800fb6c:	009b      	lsls	r3, r3, #2
 800fb6e:	4413      	add	r3, r2
 800fb70:	00db      	lsls	r3, r3, #3
 800fb72:	440b      	add	r3, r1
 800fb74:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fb78:	681a      	ldr	r2, [r3, #0]
 800fb7a:	78fb      	ldrb	r3, [r7, #3]
 800fb7c:	4619      	mov	r1, r3
 800fb7e:	f7fe fd42 	bl	800e606 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800fb82:	bf00      	nop
 800fb84:	3708      	adds	r7, #8
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd80      	pop	{r7, pc}

0800fb8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb8a:	b580      	push	{r7, lr}
 800fb8c:	b082      	sub	sp, #8
 800fb8e:	af00      	add	r7, sp, #0
 800fb90:	6078      	str	r0, [r7, #4]
 800fb92:	460b      	mov	r3, r1
 800fb94:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800fb9c:	78fa      	ldrb	r2, [r7, #3]
 800fb9e:	6879      	ldr	r1, [r7, #4]
 800fba0:	4613      	mov	r3, r2
 800fba2:	009b      	lsls	r3, r3, #2
 800fba4:	4413      	add	r3, r2
 800fba6:	00db      	lsls	r3, r3, #3
 800fba8:	440b      	add	r3, r1
 800fbaa:	3324      	adds	r3, #36	@ 0x24
 800fbac:	681a      	ldr	r2, [r3, #0]
 800fbae:	78fb      	ldrb	r3, [r7, #3]
 800fbb0:	4619      	mov	r1, r3
 800fbb2:	f7fe fd8b 	bl	800e6cc <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800fbb6:	bf00      	nop
 800fbb8:	3708      	adds	r7, #8
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bd80      	pop	{r7, pc}

0800fbbe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fbbe:	b580      	push	{r7, lr}
 800fbc0:	b082      	sub	sp, #8
 800fbc2:	af00      	add	r7, sp, #0
 800fbc4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f7fe fe9f 	bl	800e910 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800fbd2:	bf00      	nop
 800fbd4:	3708      	adds	r7, #8
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}

0800fbda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fbda:	b580      	push	{r7, lr}
 800fbdc:	b084      	sub	sp, #16
 800fbde:	af00      	add	r7, sp, #0
 800fbe0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fbe2:	2301      	movs	r3, #1
 800fbe4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	795b      	ldrb	r3, [r3, #5]
 800fbea:	2b02      	cmp	r3, #2
 800fbec:	d001      	beq.n	800fbf2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800fbee:	f7f1 fbfa 	bl	80013e6 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fbf8:	7bfa      	ldrb	r2, [r7, #15]
 800fbfa:	4611      	mov	r1, r2
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f7fe fe49 	bl	800e894 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fc08:	4618      	mov	r0, r3
 800fc0a:	f7fe fdf5 	bl	800e7f8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800fc0e:	bf00      	nop
 800fc10:	3710      	adds	r7, #16
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd80      	pop	{r7, pc}
	...

0800fc18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b082      	sub	sp, #8
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fc26:	4618      	mov	r0, r3
 800fc28:	f7fe fe44 	bl	800e8b4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	7a5b      	ldrb	r3, [r3, #9]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d005      	beq.n	800fc40 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fc34:	4b04      	ldr	r3, [pc, #16]	@ (800fc48 <HAL_PCD_SuspendCallback+0x30>)
 800fc36:	691b      	ldr	r3, [r3, #16]
 800fc38:	4a03      	ldr	r2, [pc, #12]	@ (800fc48 <HAL_PCD_SuspendCallback+0x30>)
 800fc3a:	f043 0306 	orr.w	r3, r3, #6
 800fc3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800fc40:	bf00      	nop
 800fc42:	3708      	adds	r7, #8
 800fc44:	46bd      	mov	sp, r7
 800fc46:	bd80      	pop	{r7, pc}
 800fc48:	e000ed00 	.word	0xe000ed00

0800fc4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b082      	sub	sp, #8
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	7a5b      	ldrb	r3, [r3, #9]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d007      	beq.n	800fc6c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fc5c:	4b08      	ldr	r3, [pc, #32]	@ (800fc80 <HAL_PCD_ResumeCallback+0x34>)
 800fc5e:	691b      	ldr	r3, [r3, #16]
 800fc60:	4a07      	ldr	r2, [pc, #28]	@ (800fc80 <HAL_PCD_ResumeCallback+0x34>)
 800fc62:	f023 0306 	bic.w	r3, r3, #6
 800fc66:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800fc68:	f000 f9f8 	bl	801005c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fc72:	4618      	mov	r0, r3
 800fc74:	f7fe fe34 	bl	800e8e0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800fc78:	bf00      	nop
 800fc7a:	3708      	adds	r7, #8
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}
 800fc80:	e000ed00 	.word	0xe000ed00

0800fc84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b082      	sub	sp, #8
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800fc8c:	4a2b      	ldr	r2, [pc, #172]	@ (800fd3c <USBD_LL_Init+0xb8>)
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	4a29      	ldr	r2, [pc, #164]	@ (800fd3c <USBD_LL_Init+0xb8>)
 800fc98:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800fc9c:	4b27      	ldr	r3, [pc, #156]	@ (800fd3c <USBD_LL_Init+0xb8>)
 800fc9e:	4a28      	ldr	r2, [pc, #160]	@ (800fd40 <USBD_LL_Init+0xbc>)
 800fca0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800fca2:	4b26      	ldr	r3, [pc, #152]	@ (800fd3c <USBD_LL_Init+0xb8>)
 800fca4:	2208      	movs	r2, #8
 800fca6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800fca8:	4b24      	ldr	r3, [pc, #144]	@ (800fd3c <USBD_LL_Init+0xb8>)
 800fcaa:	2202      	movs	r2, #2
 800fcac:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fcae:	4b23      	ldr	r3, [pc, #140]	@ (800fd3c <USBD_LL_Init+0xb8>)
 800fcb0:	2202      	movs	r2, #2
 800fcb2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800fcb4:	4b21      	ldr	r3, [pc, #132]	@ (800fd3c <USBD_LL_Init+0xb8>)
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800fcba:	4b20      	ldr	r3, [pc, #128]	@ (800fd3c <USBD_LL_Init+0xb8>)
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800fcc0:	4b1e      	ldr	r3, [pc, #120]	@ (800fd3c <USBD_LL_Init+0xb8>)
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800fcc6:	4b1d      	ldr	r3, [pc, #116]	@ (800fd3c <USBD_LL_Init+0xb8>)
 800fcc8:	2200      	movs	r2, #0
 800fcca:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800fccc:	481b      	ldr	r0, [pc, #108]	@ (800fd3c <USBD_LL_Init+0xb8>)
 800fcce:	f7f5 fefb 	bl	8005ac8 <HAL_PCD_Init>
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d001      	beq.n	800fcdc <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800fcd8:	f7f1 fb85 	bl	80013e6 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fce2:	2318      	movs	r3, #24
 800fce4:	2200      	movs	r2, #0
 800fce6:	2100      	movs	r1, #0
 800fce8:	f7f7 fb82 	bl	80073f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fcf2:	2358      	movs	r3, #88	@ 0x58
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	2180      	movs	r1, #128	@ 0x80
 800fcf8:	f7f7 fb7a 	bl	80073f0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fd02:	23c0      	movs	r3, #192	@ 0xc0
 800fd04:	2200      	movs	r2, #0
 800fd06:	2181      	movs	r1, #129	@ 0x81
 800fd08:	f7f7 fb72 	bl	80073f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fd12:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800fd16:	2200      	movs	r2, #0
 800fd18:	2101      	movs	r1, #1
 800fd1a:	f7f7 fb69 	bl	80073f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fd24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fd28:	2200      	movs	r2, #0
 800fd2a:	2182      	movs	r1, #130	@ 0x82
 800fd2c:	f7f7 fb60 	bl	80073f0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800fd30:	2300      	movs	r3, #0
}
 800fd32:	4618      	mov	r0, r3
 800fd34:	3708      	adds	r7, #8
 800fd36:	46bd      	mov	sp, r7
 800fd38:	bd80      	pop	{r7, pc}
 800fd3a:	bf00      	nop
 800fd3c:	200019b4 	.word	0x200019b4
 800fd40:	40005c00 	.word	0x40005c00

0800fd44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b084      	sub	sp, #16
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd50:	2300      	movs	r3, #0
 800fd52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f7f5 ff82 	bl	8005c64 <HAL_PCD_Start>
 800fd60:	4603      	mov	r3, r0
 800fd62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd64:	7bfb      	ldrb	r3, [r7, #15]
 800fd66:	4618      	mov	r0, r3
 800fd68:	f000 f97e 	bl	8010068 <USBD_Get_USB_Status>
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd70:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	3710      	adds	r7, #16
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}

0800fd7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fd7a:	b580      	push	{r7, lr}
 800fd7c:	b084      	sub	sp, #16
 800fd7e:	af00      	add	r7, sp, #0
 800fd80:	6078      	str	r0, [r7, #4]
 800fd82:	4608      	mov	r0, r1
 800fd84:	4611      	mov	r1, r2
 800fd86:	461a      	mov	r2, r3
 800fd88:	4603      	mov	r3, r0
 800fd8a:	70fb      	strb	r3, [r7, #3]
 800fd8c:	460b      	mov	r3, r1
 800fd8e:	70bb      	strb	r3, [r7, #2]
 800fd90:	4613      	mov	r3, r2
 800fd92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd94:	2300      	movs	r3, #0
 800fd96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd98:	2300      	movs	r3, #0
 800fd9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fda2:	78bb      	ldrb	r3, [r7, #2]
 800fda4:	883a      	ldrh	r2, [r7, #0]
 800fda6:	78f9      	ldrb	r1, [r7, #3]
 800fda8:	f7f6 f8c9 	bl	8005f3e <HAL_PCD_EP_Open>
 800fdac:	4603      	mov	r3, r0
 800fdae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fdb0:	7bfb      	ldrb	r3, [r7, #15]
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	f000 f958 	bl	8010068 <USBD_Get_USB_Status>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fdbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	3710      	adds	r7, #16
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}

0800fdc6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fdc6:	b580      	push	{r7, lr}
 800fdc8:	b084      	sub	sp, #16
 800fdca:	af00      	add	r7, sp, #0
 800fdcc:	6078      	str	r0, [r7, #4]
 800fdce:	460b      	mov	r3, r1
 800fdd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fde0:	78fa      	ldrb	r2, [r7, #3]
 800fde2:	4611      	mov	r1, r2
 800fde4:	4618      	mov	r0, r3
 800fde6:	f7f6 f909 	bl	8005ffc <HAL_PCD_EP_Close>
 800fdea:	4603      	mov	r3, r0
 800fdec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fdee:	7bfb      	ldrb	r3, [r7, #15]
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f000 f939 	bl	8010068 <USBD_Get_USB_Status>
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fdfa:	7bbb      	ldrb	r3, [r7, #14]
}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	3710      	adds	r7, #16
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd80      	pop	{r7, pc}

0800fe04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b084      	sub	sp, #16
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
 800fe0c:	460b      	mov	r3, r1
 800fe0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe10:	2300      	movs	r3, #0
 800fe12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe14:	2300      	movs	r3, #0
 800fe16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fe1e:	78fa      	ldrb	r2, [r7, #3]
 800fe20:	4611      	mov	r1, r2
 800fe22:	4618      	mov	r0, r3
 800fe24:	f7f6 f9b2 	bl	800618c <HAL_PCD_EP_SetStall>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe2c:	7bfb      	ldrb	r3, [r7, #15]
 800fe2e:	4618      	mov	r0, r3
 800fe30:	f000 f91a 	bl	8010068 <USBD_Get_USB_Status>
 800fe34:	4603      	mov	r3, r0
 800fe36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe38:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	3710      	adds	r7, #16
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	bd80      	pop	{r7, pc}

0800fe42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe42:	b580      	push	{r7, lr}
 800fe44:	b084      	sub	sp, #16
 800fe46:	af00      	add	r7, sp, #0
 800fe48:	6078      	str	r0, [r7, #4]
 800fe4a:	460b      	mov	r3, r1
 800fe4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe4e:	2300      	movs	r3, #0
 800fe50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe52:	2300      	movs	r3, #0
 800fe54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fe5c:	78fa      	ldrb	r2, [r7, #3]
 800fe5e:	4611      	mov	r1, r2
 800fe60:	4618      	mov	r0, r3
 800fe62:	f7f6 f9e5 	bl	8006230 <HAL_PCD_EP_ClrStall>
 800fe66:	4603      	mov	r3, r0
 800fe68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe6a:	7bfb      	ldrb	r3, [r7, #15]
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f000 f8fb 	bl	8010068 <USBD_Get_USB_Status>
 800fe72:	4603      	mov	r3, r0
 800fe74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe76:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe78:	4618      	mov	r0, r3
 800fe7a:	3710      	adds	r7, #16
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	bd80      	pop	{r7, pc}

0800fe80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe80:	b480      	push	{r7}
 800fe82:	b085      	sub	sp, #20
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
 800fe88:	460b      	mov	r3, r1
 800fe8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fe92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fe94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	da0b      	bge.n	800feb4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fe9c:	78fb      	ldrb	r3, [r7, #3]
 800fe9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fea2:	68f9      	ldr	r1, [r7, #12]
 800fea4:	4613      	mov	r3, r2
 800fea6:	009b      	lsls	r3, r3, #2
 800fea8:	4413      	add	r3, r2
 800feaa:	00db      	lsls	r3, r3, #3
 800feac:	440b      	add	r3, r1
 800feae:	3312      	adds	r3, #18
 800feb0:	781b      	ldrb	r3, [r3, #0]
 800feb2:	e00b      	b.n	800fecc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800feb4:	78fb      	ldrb	r3, [r7, #3]
 800feb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800feba:	68f9      	ldr	r1, [r7, #12]
 800febc:	4613      	mov	r3, r2
 800febe:	009b      	lsls	r3, r3, #2
 800fec0:	4413      	add	r3, r2
 800fec2:	00db      	lsls	r3, r3, #3
 800fec4:	440b      	add	r3, r1
 800fec6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800feca:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fecc:	4618      	mov	r0, r3
 800fece:	3714      	adds	r7, #20
 800fed0:	46bd      	mov	sp, r7
 800fed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed6:	4770      	bx	lr

0800fed8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b084      	sub	sp, #16
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
 800fee0:	460b      	mov	r3, r1
 800fee2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fee4:	2300      	movs	r3, #0
 800fee6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fee8:	2300      	movs	r3, #0
 800feea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fef2:	78fa      	ldrb	r2, [r7, #3]
 800fef4:	4611      	mov	r1, r2
 800fef6:	4618      	mov	r0, r3
 800fef8:	f7f5 fffd 	bl	8005ef6 <HAL_PCD_SetAddress>
 800fefc:	4603      	mov	r3, r0
 800fefe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff00:	7bfb      	ldrb	r3, [r7, #15]
 800ff02:	4618      	mov	r0, r3
 800ff04:	f000 f8b0 	bl	8010068 <USBD_Get_USB_Status>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff0e:	4618      	mov	r0, r3
 800ff10:	3710      	adds	r7, #16
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}

0800ff16 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ff16:	b580      	push	{r7, lr}
 800ff18:	b086      	sub	sp, #24
 800ff1a:	af00      	add	r7, sp, #0
 800ff1c:	60f8      	str	r0, [r7, #12]
 800ff1e:	607a      	str	r2, [r7, #4]
 800ff20:	603b      	str	r3, [r7, #0]
 800ff22:	460b      	mov	r3, r1
 800ff24:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff26:	2300      	movs	r3, #0
 800ff28:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ff34:	7af9      	ldrb	r1, [r7, #11]
 800ff36:	683b      	ldr	r3, [r7, #0]
 800ff38:	687a      	ldr	r2, [r7, #4]
 800ff3a:	f7f6 f8f0 	bl	800611e <HAL_PCD_EP_Transmit>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff42:	7dfb      	ldrb	r3, [r7, #23]
 800ff44:	4618      	mov	r0, r3
 800ff46:	f000 f88f 	bl	8010068 <USBD_Get_USB_Status>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ff4e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ff50:	4618      	mov	r0, r3
 800ff52:	3718      	adds	r7, #24
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}

0800ff58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b086      	sub	sp, #24
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	60f8      	str	r0, [r7, #12]
 800ff60:	607a      	str	r2, [r7, #4]
 800ff62:	603b      	str	r3, [r7, #0]
 800ff64:	460b      	mov	r3, r1
 800ff66:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff68:	2300      	movs	r3, #0
 800ff6a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ff76:	7af9      	ldrb	r1, [r7, #11]
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	687a      	ldr	r2, [r7, #4]
 800ff7c:	f7f6 f886 	bl	800608c <HAL_PCD_EP_Receive>
 800ff80:	4603      	mov	r3, r0
 800ff82:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff84:	7dfb      	ldrb	r3, [r7, #23]
 800ff86:	4618      	mov	r0, r3
 800ff88:	f000 f86e 	bl	8010068 <USBD_Get_USB_Status>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ff90:	7dbb      	ldrb	r3, [r7, #22]
}
 800ff92:	4618      	mov	r0, r3
 800ff94:	3718      	adds	r7, #24
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd80      	pop	{r7, pc}

0800ff9a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ff9a:	b580      	push	{r7, lr}
 800ff9c:	b082      	sub	sp, #8
 800ff9e:	af00      	add	r7, sp, #0
 800ffa0:	6078      	str	r0, [r7, #4]
 800ffa2:	460b      	mov	r3, r1
 800ffa4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ffac:	78fa      	ldrb	r2, [r7, #3]
 800ffae:	4611      	mov	r1, r2
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f7f6 f89c 	bl	80060ee <HAL_PCD_EP_GetRxCount>
 800ffb6:	4603      	mov	r3, r0
}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	3708      	adds	r7, #8
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}

0800ffc0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b082      	sub	sp, #8
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	460b      	mov	r3, r1
 800ffca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800ffcc:	78fb      	ldrb	r3, [r7, #3]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d002      	beq.n	800ffd8 <HAL_PCDEx_LPM_Callback+0x18>
 800ffd2:	2b01      	cmp	r3, #1
 800ffd4:	d013      	beq.n	800fffe <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800ffd6:	e023      	b.n	8010020 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	7a5b      	ldrb	r3, [r3, #9]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d007      	beq.n	800fff0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ffe0:	f000 f83c 	bl	801005c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ffe4:	4b10      	ldr	r3, [pc, #64]	@ (8010028 <HAL_PCDEx_LPM_Callback+0x68>)
 800ffe6:	691b      	ldr	r3, [r3, #16]
 800ffe8:	4a0f      	ldr	r2, [pc, #60]	@ (8010028 <HAL_PCDEx_LPM_Callback+0x68>)
 800ffea:	f023 0306 	bic.w	r3, r3, #6
 800ffee:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fff6:	4618      	mov	r0, r3
 800fff8:	f7fe fc72 	bl	800e8e0 <USBD_LL_Resume>
    break;
 800fffc:	e010      	b.n	8010020 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010004:	4618      	mov	r0, r3
 8010006:	f7fe fc55 	bl	800e8b4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	7a5b      	ldrb	r3, [r3, #9]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d005      	beq.n	801001e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010012:	4b05      	ldr	r3, [pc, #20]	@ (8010028 <HAL_PCDEx_LPM_Callback+0x68>)
 8010014:	691b      	ldr	r3, [r3, #16]
 8010016:	4a04      	ldr	r2, [pc, #16]	@ (8010028 <HAL_PCDEx_LPM_Callback+0x68>)
 8010018:	f043 0306 	orr.w	r3, r3, #6
 801001c:	6113      	str	r3, [r2, #16]
    break;
 801001e:	bf00      	nop
}
 8010020:	bf00      	nop
 8010022:	3708      	adds	r7, #8
 8010024:	46bd      	mov	sp, r7
 8010026:	bd80      	pop	{r7, pc}
 8010028:	e000ed00 	.word	0xe000ed00

0801002c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801002c:	b480      	push	{r7}
 801002e:	b083      	sub	sp, #12
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010034:	4b03      	ldr	r3, [pc, #12]	@ (8010044 <USBD_static_malloc+0x18>)
}
 8010036:	4618      	mov	r0, r3
 8010038:	370c      	adds	r7, #12
 801003a:	46bd      	mov	sp, r7
 801003c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010040:	4770      	bx	lr
 8010042:	bf00      	nop
 8010044:	20001c90 	.word	0x20001c90

08010048 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010048:	b480      	push	{r7}
 801004a:	b083      	sub	sp, #12
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]

}
 8010050:	bf00      	nop
 8010052:	370c      	adds	r7, #12
 8010054:	46bd      	mov	sp, r7
 8010056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005a:	4770      	bx	lr

0801005c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801005c:	b580      	push	{r7, lr}
 801005e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010060:	f7f1 f976 	bl	8001350 <SystemClock_Config>
}
 8010064:	bf00      	nop
 8010066:	bd80      	pop	{r7, pc}

08010068 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010068:	b480      	push	{r7}
 801006a:	b085      	sub	sp, #20
 801006c:	af00      	add	r7, sp, #0
 801006e:	4603      	mov	r3, r0
 8010070:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010072:	2300      	movs	r3, #0
 8010074:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010076:	79fb      	ldrb	r3, [r7, #7]
 8010078:	2b03      	cmp	r3, #3
 801007a:	d817      	bhi.n	80100ac <USBD_Get_USB_Status+0x44>
 801007c:	a201      	add	r2, pc, #4	@ (adr r2, 8010084 <USBD_Get_USB_Status+0x1c>)
 801007e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010082:	bf00      	nop
 8010084:	08010095 	.word	0x08010095
 8010088:	0801009b 	.word	0x0801009b
 801008c:	080100a1 	.word	0x080100a1
 8010090:	080100a7 	.word	0x080100a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010094:	2300      	movs	r3, #0
 8010096:	73fb      	strb	r3, [r7, #15]
    break;
 8010098:	e00b      	b.n	80100b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801009a:	2303      	movs	r3, #3
 801009c:	73fb      	strb	r3, [r7, #15]
    break;
 801009e:	e008      	b.n	80100b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80100a0:	2301      	movs	r3, #1
 80100a2:	73fb      	strb	r3, [r7, #15]
    break;
 80100a4:	e005      	b.n	80100b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80100a6:	2303      	movs	r3, #3
 80100a8:	73fb      	strb	r3, [r7, #15]
    break;
 80100aa:	e002      	b.n	80100b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80100ac:	2303      	movs	r3, #3
 80100ae:	73fb      	strb	r3, [r7, #15]
    break;
 80100b0:	bf00      	nop
  }
  return usb_status;
 80100b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80100b4:	4618      	mov	r0, r3
 80100b6:	3714      	adds	r7, #20
 80100b8:	46bd      	mov	sp, r7
 80100ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100be:	4770      	bx	lr

080100c0 <arm_sin_f32>:
 80100c0:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8010140 <arm_sin_f32+0x80>
 80100c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80100c8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80100cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100d0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80100d4:	d504      	bpl.n	80100e0 <arm_sin_f32+0x20>
 80100d6:	ee17 3a90 	vmov	r3, s15
 80100da:	3b01      	subs	r3, #1
 80100dc:	ee07 3a90 	vmov	s15, r3
 80100e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80100e4:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8010144 <arm_sin_f32+0x84>
 80100e8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80100ec:	ee20 0a07 	vmul.f32	s0, s0, s14
 80100f0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80100f4:	ee17 3a90 	vmov	r3, s15
 80100f8:	b29b      	uxth	r3, r3
 80100fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80100fe:	d21a      	bcs.n	8010136 <arm_sin_f32+0x76>
 8010100:	ee07 3a90 	vmov	s15, r3
 8010104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010108:	1c59      	adds	r1, r3, #1
 801010a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801010e:	4a0e      	ldr	r2, [pc, #56]	@ (8010148 <arm_sin_f32+0x88>)
 8010110:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010114:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010118:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801011c:	ed93 7a00 	vldr	s14, [r3]
 8010120:	edd2 6a00 	vldr	s13, [r2]
 8010124:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010128:	ee20 0a26 	vmul.f32	s0, s0, s13
 801012c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010130:	ee37 0a80 	vadd.f32	s0, s15, s0
 8010134:	4770      	bx	lr
 8010136:	ee30 0a47 	vsub.f32	s0, s0, s14
 801013a:	2101      	movs	r1, #1
 801013c:	2300      	movs	r3, #0
 801013e:	e7e6      	b.n	801010e <arm_sin_f32+0x4e>
 8010140:	3e22f983 	.word	0x3e22f983
 8010144:	44000000 	.word	0x44000000
 8010148:	08010b84 	.word	0x08010b84

0801014c <memset>:
 801014c:	4402      	add	r2, r0
 801014e:	4603      	mov	r3, r0
 8010150:	4293      	cmp	r3, r2
 8010152:	d100      	bne.n	8010156 <memset+0xa>
 8010154:	4770      	bx	lr
 8010156:	f803 1b01 	strb.w	r1, [r3], #1
 801015a:	e7f9      	b.n	8010150 <memset+0x4>

0801015c <__errno>:
 801015c:	4b01      	ldr	r3, [pc, #4]	@ (8010164 <__errno+0x8>)
 801015e:	6818      	ldr	r0, [r3, #0]
 8010160:	4770      	bx	lr
 8010162:	bf00      	nop
 8010164:	20000184 	.word	0x20000184

08010168 <__libc_init_array>:
 8010168:	b570      	push	{r4, r5, r6, lr}
 801016a:	4d0d      	ldr	r5, [pc, #52]	@ (80101a0 <__libc_init_array+0x38>)
 801016c:	4c0d      	ldr	r4, [pc, #52]	@ (80101a4 <__libc_init_array+0x3c>)
 801016e:	1b64      	subs	r4, r4, r5
 8010170:	10a4      	asrs	r4, r4, #2
 8010172:	2600      	movs	r6, #0
 8010174:	42a6      	cmp	r6, r4
 8010176:	d109      	bne.n	801018c <__libc_init_array+0x24>
 8010178:	4d0b      	ldr	r5, [pc, #44]	@ (80101a8 <__libc_init_array+0x40>)
 801017a:	4c0c      	ldr	r4, [pc, #48]	@ (80101ac <__libc_init_array+0x44>)
 801017c:	f000 fc92 	bl	8010aa4 <_init>
 8010180:	1b64      	subs	r4, r4, r5
 8010182:	10a4      	asrs	r4, r4, #2
 8010184:	2600      	movs	r6, #0
 8010186:	42a6      	cmp	r6, r4
 8010188:	d105      	bne.n	8010196 <__libc_init_array+0x2e>
 801018a:	bd70      	pop	{r4, r5, r6, pc}
 801018c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010190:	4798      	blx	r3
 8010192:	3601      	adds	r6, #1
 8010194:	e7ee      	b.n	8010174 <__libc_init_array+0xc>
 8010196:	f855 3b04 	ldr.w	r3, [r5], #4
 801019a:	4798      	blx	r3
 801019c:	3601      	adds	r6, #1
 801019e:	e7f2      	b.n	8010186 <__libc_init_array+0x1e>
 80101a0:	080113b0 	.word	0x080113b0
 80101a4:	080113b0 	.word	0x080113b0
 80101a8:	080113b0 	.word	0x080113b0
 80101ac:	080113b4 	.word	0x080113b4

080101b0 <memcpy>:
 80101b0:	440a      	add	r2, r1
 80101b2:	4291      	cmp	r1, r2
 80101b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80101b8:	d100      	bne.n	80101bc <memcpy+0xc>
 80101ba:	4770      	bx	lr
 80101bc:	b510      	push	{r4, lr}
 80101be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80101c6:	4291      	cmp	r1, r2
 80101c8:	d1f9      	bne.n	80101be <memcpy+0xe>
 80101ca:	bd10      	pop	{r4, pc}

080101cc <fmodf>:
 80101cc:	b508      	push	{r3, lr}
 80101ce:	ed2d 8b02 	vpush	{d8}
 80101d2:	eef0 8a40 	vmov.f32	s17, s0
 80101d6:	eeb0 8a60 	vmov.f32	s16, s1
 80101da:	f000 f879 	bl	80102d0 <__ieee754_fmodf>
 80101de:	eef4 8a48 	vcmp.f32	s17, s16
 80101e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101e6:	d60c      	bvs.n	8010202 <fmodf+0x36>
 80101e8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8010208 <fmodf+0x3c>
 80101ec:	eeb4 8a68 	vcmp.f32	s16, s17
 80101f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101f4:	d105      	bne.n	8010202 <fmodf+0x36>
 80101f6:	f7ff ffb1 	bl	801015c <__errno>
 80101fa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80101fe:	2321      	movs	r3, #33	@ 0x21
 8010200:	6003      	str	r3, [r0, #0]
 8010202:	ecbd 8b02 	vpop	{d8}
 8010206:	bd08      	pop	{r3, pc}
 8010208:	00000000 	.word	0x00000000

0801020c <powf>:
 801020c:	b508      	push	{r3, lr}
 801020e:	ed2d 8b04 	vpush	{d8-d9}
 8010212:	eeb0 8a60 	vmov.f32	s16, s1
 8010216:	eeb0 9a40 	vmov.f32	s18, s0
 801021a:	f000 f8db 	bl	80103d4 <__ieee754_powf>
 801021e:	eeb4 8a48 	vcmp.f32	s16, s16
 8010222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010226:	eef0 8a40 	vmov.f32	s17, s0
 801022a:	d63e      	bvs.n	80102aa <powf+0x9e>
 801022c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8010230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010234:	d112      	bne.n	801025c <powf+0x50>
 8010236:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801023a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801023e:	d039      	beq.n	80102b4 <powf+0xa8>
 8010240:	eeb0 0a48 	vmov.f32	s0, s16
 8010244:	f000 f839 	bl	80102ba <finitef>
 8010248:	b378      	cbz	r0, 80102aa <powf+0x9e>
 801024a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801024e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010252:	d52a      	bpl.n	80102aa <powf+0x9e>
 8010254:	f7ff ff82 	bl	801015c <__errno>
 8010258:	2322      	movs	r3, #34	@ 0x22
 801025a:	e014      	b.n	8010286 <powf+0x7a>
 801025c:	f000 f82d 	bl	80102ba <finitef>
 8010260:	b998      	cbnz	r0, 801028a <powf+0x7e>
 8010262:	eeb0 0a49 	vmov.f32	s0, s18
 8010266:	f000 f828 	bl	80102ba <finitef>
 801026a:	b170      	cbz	r0, 801028a <powf+0x7e>
 801026c:	eeb0 0a48 	vmov.f32	s0, s16
 8010270:	f000 f823 	bl	80102ba <finitef>
 8010274:	b148      	cbz	r0, 801028a <powf+0x7e>
 8010276:	eef4 8a68 	vcmp.f32	s17, s17
 801027a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801027e:	d7e9      	bvc.n	8010254 <powf+0x48>
 8010280:	f7ff ff6c 	bl	801015c <__errno>
 8010284:	2321      	movs	r3, #33	@ 0x21
 8010286:	6003      	str	r3, [r0, #0]
 8010288:	e00f      	b.n	80102aa <powf+0x9e>
 801028a:	eef5 8a40 	vcmp.f32	s17, #0.0
 801028e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010292:	d10a      	bne.n	80102aa <powf+0x9e>
 8010294:	eeb0 0a49 	vmov.f32	s0, s18
 8010298:	f000 f80f 	bl	80102ba <finitef>
 801029c:	b128      	cbz	r0, 80102aa <powf+0x9e>
 801029e:	eeb0 0a48 	vmov.f32	s0, s16
 80102a2:	f000 f80a 	bl	80102ba <finitef>
 80102a6:	2800      	cmp	r0, #0
 80102a8:	d1d4      	bne.n	8010254 <powf+0x48>
 80102aa:	eeb0 0a68 	vmov.f32	s0, s17
 80102ae:	ecbd 8b04 	vpop	{d8-d9}
 80102b2:	bd08      	pop	{r3, pc}
 80102b4:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80102b8:	e7f7      	b.n	80102aa <powf+0x9e>

080102ba <finitef>:
 80102ba:	ee10 3a10 	vmov	r3, s0
 80102be:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80102c2:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80102c6:	bfac      	ite	ge
 80102c8:	2000      	movge	r0, #0
 80102ca:	2001      	movlt	r0, #1
 80102cc:	4770      	bx	lr
	...

080102d0 <__ieee754_fmodf>:
 80102d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102d2:	ee10 5a90 	vmov	r5, s1
 80102d6:	f025 4000 	bic.w	r0, r5, #2147483648	@ 0x80000000
 80102da:	1e43      	subs	r3, r0, #1
 80102dc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80102e0:	d206      	bcs.n	80102f0 <__ieee754_fmodf+0x20>
 80102e2:	ee10 3a10 	vmov	r3, s0
 80102e6:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 80102ea:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 80102ee:	d304      	bcc.n	80102fa <__ieee754_fmodf+0x2a>
 80102f0:	ee60 0a20 	vmul.f32	s1, s0, s1
 80102f4:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80102f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102fa:	4286      	cmp	r6, r0
 80102fc:	dbfc      	blt.n	80102f8 <__ieee754_fmodf+0x28>
 80102fe:	f003 4400 	and.w	r4, r3, #2147483648	@ 0x80000000
 8010302:	d105      	bne.n	8010310 <__ieee754_fmodf+0x40>
 8010304:	4b32      	ldr	r3, [pc, #200]	@ (80103d0 <__ieee754_fmodf+0x100>)
 8010306:	eb03 7354 	add.w	r3, r3, r4, lsr #29
 801030a:	ed93 0a00 	vldr	s0, [r3]
 801030e:	e7f3      	b.n	80102f8 <__ieee754_fmodf+0x28>
 8010310:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8010314:	d140      	bne.n	8010398 <__ieee754_fmodf+0xc8>
 8010316:	0232      	lsls	r2, r6, #8
 8010318:	f06f 017d 	mvn.w	r1, #125	@ 0x7d
 801031c:	2a00      	cmp	r2, #0
 801031e:	dc38      	bgt.n	8010392 <__ieee754_fmodf+0xc2>
 8010320:	f015 4fff 	tst.w	r5, #2139095040	@ 0x7f800000
 8010324:	d13e      	bne.n	80103a4 <__ieee754_fmodf+0xd4>
 8010326:	0207      	lsls	r7, r0, #8
 8010328:	f06f 027d 	mvn.w	r2, #125	@ 0x7d
 801032c:	2f00      	cmp	r7, #0
 801032e:	da36      	bge.n	801039e <__ieee754_fmodf+0xce>
 8010330:	f111 0f7e 	cmn.w	r1, #126	@ 0x7e
 8010334:	bfb9      	ittee	lt
 8010336:	f06f 037d 	mvnlt.w	r3, #125	@ 0x7d
 801033a:	1a5b      	sublt	r3, r3, r1
 801033c:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 8010340:	f443 0300 	orrge.w	r3, r3, #8388608	@ 0x800000
 8010344:	bfb8      	it	lt
 8010346:	fa06 f303 	lsllt.w	r3, r6, r3
 801034a:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 801034e:	bfb5      	itete	lt
 8010350:	f06f 057d 	mvnlt.w	r5, #125	@ 0x7d
 8010354:	f3c5 0516 	ubfxge	r5, r5, #0, #23
 8010358:	1aad      	sublt	r5, r5, r2
 801035a:	f445 0000 	orrge.w	r0, r5, #8388608	@ 0x800000
 801035e:	bfb8      	it	lt
 8010360:	40a8      	lsllt	r0, r5
 8010362:	1a89      	subs	r1, r1, r2
 8010364:	1a1d      	subs	r5, r3, r0
 8010366:	bb01      	cbnz	r1, 80103aa <__ieee754_fmodf+0xda>
 8010368:	ea13 0325 	ands.w	r3, r3, r5, asr #32
 801036c:	bf38      	it	cc
 801036e:	462b      	movcc	r3, r5
 8010370:	2b00      	cmp	r3, #0
 8010372:	d0c7      	beq.n	8010304 <__ieee754_fmodf+0x34>
 8010374:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010378:	db1f      	blt.n	80103ba <__ieee754_fmodf+0xea>
 801037a:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 801037e:	db1f      	blt.n	80103c0 <__ieee754_fmodf+0xf0>
 8010380:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8010384:	327f      	adds	r2, #127	@ 0x7f
 8010386:	4323      	orrs	r3, r4
 8010388:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801038c:	ee00 3a10 	vmov	s0, r3
 8010390:	e7b2      	b.n	80102f8 <__ieee754_fmodf+0x28>
 8010392:	3901      	subs	r1, #1
 8010394:	0052      	lsls	r2, r2, #1
 8010396:	e7c1      	b.n	801031c <__ieee754_fmodf+0x4c>
 8010398:	15f1      	asrs	r1, r6, #23
 801039a:	397f      	subs	r1, #127	@ 0x7f
 801039c:	e7c0      	b.n	8010320 <__ieee754_fmodf+0x50>
 801039e:	3a01      	subs	r2, #1
 80103a0:	007f      	lsls	r7, r7, #1
 80103a2:	e7c3      	b.n	801032c <__ieee754_fmodf+0x5c>
 80103a4:	15c2      	asrs	r2, r0, #23
 80103a6:	3a7f      	subs	r2, #127	@ 0x7f
 80103a8:	e7c2      	b.n	8010330 <__ieee754_fmodf+0x60>
 80103aa:	2d00      	cmp	r5, #0
 80103ac:	da02      	bge.n	80103b4 <__ieee754_fmodf+0xe4>
 80103ae:	005b      	lsls	r3, r3, #1
 80103b0:	3901      	subs	r1, #1
 80103b2:	e7d7      	b.n	8010364 <__ieee754_fmodf+0x94>
 80103b4:	d0a6      	beq.n	8010304 <__ieee754_fmodf+0x34>
 80103b6:	006b      	lsls	r3, r5, #1
 80103b8:	e7fa      	b.n	80103b0 <__ieee754_fmodf+0xe0>
 80103ba:	005b      	lsls	r3, r3, #1
 80103bc:	3a01      	subs	r2, #1
 80103be:	e7d9      	b.n	8010374 <__ieee754_fmodf+0xa4>
 80103c0:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 80103c4:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 80103c8:	3282      	adds	r2, #130	@ 0x82
 80103ca:	4113      	asrs	r3, r2
 80103cc:	4323      	orrs	r3, r4
 80103ce:	e7dd      	b.n	801038c <__ieee754_fmodf+0xbc>
 80103d0:	08011388 	.word	0x08011388

080103d4 <__ieee754_powf>:
 80103d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103d8:	ee10 4a90 	vmov	r4, s1
 80103dc:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 80103e0:	ed2d 8b02 	vpush	{d8}
 80103e4:	ee10 6a10 	vmov	r6, s0
 80103e8:	eeb0 8a40 	vmov.f32	s16, s0
 80103ec:	eef0 8a60 	vmov.f32	s17, s1
 80103f0:	d10c      	bne.n	801040c <__ieee754_powf+0x38>
 80103f2:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 80103f6:	0076      	lsls	r6, r6, #1
 80103f8:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80103fc:	f240 829c 	bls.w	8010938 <__ieee754_powf+0x564>
 8010400:	ee38 0a28 	vadd.f32	s0, s16, s17
 8010404:	ecbd 8b02 	vpop	{d8}
 8010408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801040c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8010410:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8010414:	d802      	bhi.n	801041c <__ieee754_powf+0x48>
 8010416:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801041a:	d908      	bls.n	801042e <__ieee754_powf+0x5a>
 801041c:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8010420:	d1ee      	bne.n	8010400 <__ieee754_powf+0x2c>
 8010422:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8010426:	0064      	lsls	r4, r4, #1
 8010428:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 801042c:	e7e6      	b.n	80103fc <__ieee754_powf+0x28>
 801042e:	2e00      	cmp	r6, #0
 8010430:	da1e      	bge.n	8010470 <__ieee754_powf+0x9c>
 8010432:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8010436:	d22b      	bcs.n	8010490 <__ieee754_powf+0xbc>
 8010438:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801043c:	d332      	bcc.n	80104a4 <__ieee754_powf+0xd0>
 801043e:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8010442:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8010446:	fa49 f503 	asr.w	r5, r9, r3
 801044a:	fa05 f303 	lsl.w	r3, r5, r3
 801044e:	454b      	cmp	r3, r9
 8010450:	d126      	bne.n	80104a0 <__ieee754_powf+0xcc>
 8010452:	f005 0501 	and.w	r5, r5, #1
 8010456:	f1c5 0502 	rsb	r5, r5, #2
 801045a:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801045e:	d122      	bne.n	80104a6 <__ieee754_powf+0xd2>
 8010460:	2c00      	cmp	r4, #0
 8010462:	f280 826f 	bge.w	8010944 <__ieee754_powf+0x570>
 8010466:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801046a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801046e:	e7c9      	b.n	8010404 <__ieee754_powf+0x30>
 8010470:	2500      	movs	r5, #0
 8010472:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8010476:	d1f0      	bne.n	801045a <__ieee754_powf+0x86>
 8010478:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 801047c:	f000 825c 	beq.w	8010938 <__ieee754_powf+0x564>
 8010480:	d908      	bls.n	8010494 <__ieee754_powf+0xc0>
 8010482:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 80107e4 <__ieee754_powf+0x410>
 8010486:	2c00      	cmp	r4, #0
 8010488:	bfa8      	it	ge
 801048a:	eeb0 0a68 	vmovge.f32	s0, s17
 801048e:	e7b9      	b.n	8010404 <__ieee754_powf+0x30>
 8010490:	2502      	movs	r5, #2
 8010492:	e7ee      	b.n	8010472 <__ieee754_powf+0x9e>
 8010494:	2c00      	cmp	r4, #0
 8010496:	f280 8252 	bge.w	801093e <__ieee754_powf+0x56a>
 801049a:	eeb1 0a68 	vneg.f32	s0, s17
 801049e:	e7b1      	b.n	8010404 <__ieee754_powf+0x30>
 80104a0:	2500      	movs	r5, #0
 80104a2:	e7da      	b.n	801045a <__ieee754_powf+0x86>
 80104a4:	2500      	movs	r5, #0
 80104a6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80104aa:	d102      	bne.n	80104b2 <__ieee754_powf+0xde>
 80104ac:	ee28 0a08 	vmul.f32	s0, s16, s16
 80104b0:	e7a8      	b.n	8010404 <__ieee754_powf+0x30>
 80104b2:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80104b6:	d109      	bne.n	80104cc <__ieee754_powf+0xf8>
 80104b8:	2e00      	cmp	r6, #0
 80104ba:	db07      	blt.n	80104cc <__ieee754_powf+0xf8>
 80104bc:	eeb0 0a48 	vmov.f32	s0, s16
 80104c0:	ecbd 8b02 	vpop	{d8}
 80104c4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104c8:	f000 bae8 	b.w	8010a9c <__ieee754_sqrtf>
 80104cc:	eeb0 0a48 	vmov.f32	s0, s16
 80104d0:	f000 fa50 	bl	8010974 <fabsf>
 80104d4:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80104d8:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80104dc:	4647      	mov	r7, r8
 80104de:	d002      	beq.n	80104e6 <__ieee754_powf+0x112>
 80104e0:	f1b8 0f00 	cmp.w	r8, #0
 80104e4:	d117      	bne.n	8010516 <__ieee754_powf+0x142>
 80104e6:	2c00      	cmp	r4, #0
 80104e8:	bfbc      	itt	lt
 80104ea:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 80104ee:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80104f2:	2e00      	cmp	r6, #0
 80104f4:	da86      	bge.n	8010404 <__ieee754_powf+0x30>
 80104f6:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 80104fa:	ea58 0805 	orrs.w	r8, r8, r5
 80104fe:	d104      	bne.n	801050a <__ieee754_powf+0x136>
 8010500:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010504:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8010508:	e77c      	b.n	8010404 <__ieee754_powf+0x30>
 801050a:	2d01      	cmp	r5, #1
 801050c:	f47f af7a 	bne.w	8010404 <__ieee754_powf+0x30>
 8010510:	eeb1 0a40 	vneg.f32	s0, s0
 8010514:	e776      	b.n	8010404 <__ieee754_powf+0x30>
 8010516:	0ff0      	lsrs	r0, r6, #31
 8010518:	3801      	subs	r0, #1
 801051a:	ea55 0300 	orrs.w	r3, r5, r0
 801051e:	d104      	bne.n	801052a <__ieee754_powf+0x156>
 8010520:	ee38 8a48 	vsub.f32	s16, s16, s16
 8010524:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8010528:	e76c      	b.n	8010404 <__ieee754_powf+0x30>
 801052a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 801052e:	d973      	bls.n	8010618 <__ieee754_powf+0x244>
 8010530:	4bad      	ldr	r3, [pc, #692]	@ (80107e8 <__ieee754_powf+0x414>)
 8010532:	4598      	cmp	r8, r3
 8010534:	d808      	bhi.n	8010548 <__ieee754_powf+0x174>
 8010536:	2c00      	cmp	r4, #0
 8010538:	da0b      	bge.n	8010552 <__ieee754_powf+0x17e>
 801053a:	2000      	movs	r0, #0
 801053c:	ecbd 8b02 	vpop	{d8}
 8010540:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010544:	f000 baa4 	b.w	8010a90 <__math_oflowf>
 8010548:	4ba8      	ldr	r3, [pc, #672]	@ (80107ec <__ieee754_powf+0x418>)
 801054a:	4598      	cmp	r8, r3
 801054c:	d908      	bls.n	8010560 <__ieee754_powf+0x18c>
 801054e:	2c00      	cmp	r4, #0
 8010550:	dcf3      	bgt.n	801053a <__ieee754_powf+0x166>
 8010552:	2000      	movs	r0, #0
 8010554:	ecbd 8b02 	vpop	{d8}
 8010558:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801055c:	f000 ba92 	b.w	8010a84 <__math_uflowf>
 8010560:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010564:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010568:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 80107f0 <__ieee754_powf+0x41c>
 801056c:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8010570:	eee0 6a67 	vfms.f32	s13, s0, s15
 8010574:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010578:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801057c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010580:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010584:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 80107f4 <__ieee754_powf+0x420>
 8010588:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 801058c:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 80107f8 <__ieee754_powf+0x424>
 8010590:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010594:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 80107fc <__ieee754_powf+0x428>
 8010598:	eef0 6a67 	vmov.f32	s13, s15
 801059c:	eee0 6a07 	vfma.f32	s13, s0, s14
 80105a0:	ee16 3a90 	vmov	r3, s13
 80105a4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80105a8:	f023 030f 	bic.w	r3, r3, #15
 80105ac:	ee06 3a90 	vmov	s13, r3
 80105b0:	eee0 6a47 	vfms.f32	s13, s0, s14
 80105b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80105b8:	3d01      	subs	r5, #1
 80105ba:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 80105be:	4305      	orrs	r5, r0
 80105c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80105c4:	f024 040f 	bic.w	r4, r4, #15
 80105c8:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80105cc:	bf18      	it	ne
 80105ce:	eeb0 8a47 	vmovne.f32	s16, s14
 80105d2:	ee07 4a10 	vmov	s14, r4
 80105d6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80105da:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80105de:	ee07 3a90 	vmov	s15, r3
 80105e2:	eee7 0a27 	vfma.f32	s1, s14, s15
 80105e6:	ee07 4a10 	vmov	s14, r4
 80105ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80105ee:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80105f2:	ee17 1a10 	vmov	r1, s14
 80105f6:	2900      	cmp	r1, #0
 80105f8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80105fc:	f340 80dd 	ble.w	80107ba <__ieee754_powf+0x3e6>
 8010600:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8010604:	f240 80ca 	bls.w	801079c <__ieee754_powf+0x3c8>
 8010608:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801060c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010610:	bf4c      	ite	mi
 8010612:	2001      	movmi	r0, #1
 8010614:	2000      	movpl	r0, #0
 8010616:	e791      	b.n	801053c <__ieee754_powf+0x168>
 8010618:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 801061c:	bf01      	itttt	eq
 801061e:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8010800 <__ieee754_powf+0x42c>
 8010622:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8010626:	f06f 0317 	mvneq.w	r3, #23
 801062a:	ee17 7a90 	vmoveq	r7, s15
 801062e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8010632:	bf18      	it	ne
 8010634:	2300      	movne	r3, #0
 8010636:	3a7f      	subs	r2, #127	@ 0x7f
 8010638:	441a      	add	r2, r3
 801063a:	4b72      	ldr	r3, [pc, #456]	@ (8010804 <__ieee754_powf+0x430>)
 801063c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8010640:	429f      	cmp	r7, r3
 8010642:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8010646:	dd06      	ble.n	8010656 <__ieee754_powf+0x282>
 8010648:	4b6f      	ldr	r3, [pc, #444]	@ (8010808 <__ieee754_powf+0x434>)
 801064a:	429f      	cmp	r7, r3
 801064c:	f340 80a4 	ble.w	8010798 <__ieee754_powf+0x3c4>
 8010650:	3201      	adds	r2, #1
 8010652:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8010656:	2600      	movs	r6, #0
 8010658:	4b6c      	ldr	r3, [pc, #432]	@ (801080c <__ieee754_powf+0x438>)
 801065a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 801065e:	ee07 1a10 	vmov	s14, r1
 8010662:	edd3 5a00 	vldr	s11, [r3]
 8010666:	4b6a      	ldr	r3, [pc, #424]	@ (8010810 <__ieee754_powf+0x43c>)
 8010668:	ee75 7a87 	vadd.f32	s15, s11, s14
 801066c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010670:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8010674:	1049      	asrs	r1, r1, #1
 8010676:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801067a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 801067e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8010682:	ee37 6a65 	vsub.f32	s12, s14, s11
 8010686:	ee07 1a90 	vmov	s15, r1
 801068a:	ee26 5a24 	vmul.f32	s10, s12, s9
 801068e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8010692:	ee15 7a10 	vmov	r7, s10
 8010696:	401f      	ands	r7, r3
 8010698:	ee06 7a90 	vmov	s13, r7
 801069c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80106a0:	ee37 7a65 	vsub.f32	s14, s14, s11
 80106a4:	ee65 7a05 	vmul.f32	s15, s10, s10
 80106a8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80106ac:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8010814 <__ieee754_powf+0x440>
 80106b0:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8010818 <__ieee754_powf+0x444>
 80106b4:	eee7 5a87 	vfma.f32	s11, s15, s14
 80106b8:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 801081c <__ieee754_powf+0x448>
 80106bc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80106c0:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 80107f0 <__ieee754_powf+0x41c>
 80106c4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80106c8:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8010820 <__ieee754_powf+0x44c>
 80106cc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80106d0:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8010824 <__ieee754_powf+0x450>
 80106d4:	ee26 6a24 	vmul.f32	s12, s12, s9
 80106d8:	eee7 5a27 	vfma.f32	s11, s14, s15
 80106dc:	ee35 7a26 	vadd.f32	s14, s10, s13
 80106e0:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80106e4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80106e8:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80106ec:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80106f0:	eef0 5a67 	vmov.f32	s11, s15
 80106f4:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80106f8:	ee75 5a87 	vadd.f32	s11, s11, s14
 80106fc:	ee15 1a90 	vmov	r1, s11
 8010700:	4019      	ands	r1, r3
 8010702:	ee05 1a90 	vmov	s11, r1
 8010706:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801070a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801070e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010712:	ee67 7a85 	vmul.f32	s15, s15, s10
 8010716:	eee6 7a25 	vfma.f32	s15, s12, s11
 801071a:	eeb0 6a67 	vmov.f32	s12, s15
 801071e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8010722:	ee16 1a10 	vmov	r1, s12
 8010726:	4019      	ands	r1, r3
 8010728:	ee06 1a10 	vmov	s12, r1
 801072c:	eeb0 7a46 	vmov.f32	s14, s12
 8010730:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8010734:	493c      	ldr	r1, [pc, #240]	@ (8010828 <__ieee754_powf+0x454>)
 8010736:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 801073a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801073e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 801082c <__ieee754_powf+0x458>
 8010742:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8010830 <__ieee754_powf+0x45c>
 8010746:	ee67 7a87 	vmul.f32	s15, s15, s14
 801074a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8010834 <__ieee754_powf+0x460>
 801074e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010752:	ed91 7a00 	vldr	s14, [r1]
 8010756:	ee77 7a87 	vadd.f32	s15, s15, s14
 801075a:	ee07 2a10 	vmov	s14, r2
 801075e:	eef0 6a67 	vmov.f32	s13, s15
 8010762:	4a35      	ldr	r2, [pc, #212]	@ (8010838 <__ieee754_powf+0x464>)
 8010764:	eee6 6a25 	vfma.f32	s13, s12, s11
 8010768:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 801076c:	ed92 5a00 	vldr	s10, [r2]
 8010770:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010774:	ee76 6a85 	vadd.f32	s13, s13, s10
 8010778:	ee76 6a87 	vadd.f32	s13, s13, s14
 801077c:	ee16 2a90 	vmov	r2, s13
 8010780:	4013      	ands	r3, r2
 8010782:	ee06 3a90 	vmov	s13, r3
 8010786:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801078a:	ee37 7a45 	vsub.f32	s14, s14, s10
 801078e:	eea6 7a65 	vfms.f32	s14, s12, s11
 8010792:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010796:	e70f      	b.n	80105b8 <__ieee754_powf+0x1e4>
 8010798:	2601      	movs	r6, #1
 801079a:	e75d      	b.n	8010658 <__ieee754_powf+0x284>
 801079c:	d152      	bne.n	8010844 <__ieee754_powf+0x470>
 801079e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 801083c <__ieee754_powf+0x468>
 80107a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80107a6:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80107aa:	eef4 6ac7 	vcmpe.f32	s13, s14
 80107ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107b2:	f73f af29 	bgt.w	8010608 <__ieee754_powf+0x234>
 80107b6:	2386      	movs	r3, #134	@ 0x86
 80107b8:	e048      	b.n	801084c <__ieee754_powf+0x478>
 80107ba:	4a21      	ldr	r2, [pc, #132]	@ (8010840 <__ieee754_powf+0x46c>)
 80107bc:	4293      	cmp	r3, r2
 80107be:	d907      	bls.n	80107d0 <__ieee754_powf+0x3fc>
 80107c0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80107c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107c8:	bf4c      	ite	mi
 80107ca:	2001      	movmi	r0, #1
 80107cc:	2000      	movpl	r0, #0
 80107ce:	e6c1      	b.n	8010554 <__ieee754_powf+0x180>
 80107d0:	d138      	bne.n	8010844 <__ieee754_powf+0x470>
 80107d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80107d6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80107da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107de:	dbea      	blt.n	80107b6 <__ieee754_powf+0x3e2>
 80107e0:	e7ee      	b.n	80107c0 <__ieee754_powf+0x3ec>
 80107e2:	bf00      	nop
 80107e4:	00000000 	.word	0x00000000
 80107e8:	3f7ffff3 	.word	0x3f7ffff3
 80107ec:	3f800007 	.word	0x3f800007
 80107f0:	3eaaaaab 	.word	0x3eaaaaab
 80107f4:	3fb8aa3b 	.word	0x3fb8aa3b
 80107f8:	36eca570 	.word	0x36eca570
 80107fc:	3fb8aa00 	.word	0x3fb8aa00
 8010800:	4b800000 	.word	0x4b800000
 8010804:	001cc471 	.word	0x001cc471
 8010808:	005db3d6 	.word	0x005db3d6
 801080c:	080113a0 	.word	0x080113a0
 8010810:	fffff000 	.word	0xfffff000
 8010814:	3e6c3255 	.word	0x3e6c3255
 8010818:	3e53f142 	.word	0x3e53f142
 801081c:	3e8ba305 	.word	0x3e8ba305
 8010820:	3edb6db7 	.word	0x3edb6db7
 8010824:	3f19999a 	.word	0x3f19999a
 8010828:	08011390 	.word	0x08011390
 801082c:	3f76384f 	.word	0x3f76384f
 8010830:	3f763800 	.word	0x3f763800
 8010834:	369dc3a0 	.word	0x369dc3a0
 8010838:	08011398 	.word	0x08011398
 801083c:	3338aa3c 	.word	0x3338aa3c
 8010840:	43160000 	.word	0x43160000
 8010844:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8010848:	d971      	bls.n	801092e <__ieee754_powf+0x55a>
 801084a:	15db      	asrs	r3, r3, #23
 801084c:	3b7e      	subs	r3, #126	@ 0x7e
 801084e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8010852:	4118      	asrs	r0, r3
 8010854:	4408      	add	r0, r1
 8010856:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801085a:	4a3c      	ldr	r2, [pc, #240]	@ (801094c <__ieee754_powf+0x578>)
 801085c:	3b7f      	subs	r3, #127	@ 0x7f
 801085e:	411a      	asrs	r2, r3
 8010860:	4002      	ands	r2, r0
 8010862:	ee07 2a10 	vmov	s14, r2
 8010866:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801086a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801086e:	f1c3 0317 	rsb	r3, r3, #23
 8010872:	4118      	asrs	r0, r3
 8010874:	2900      	cmp	r1, #0
 8010876:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801087a:	bfb8      	it	lt
 801087c:	4240      	neglt	r0, r0
 801087e:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8010882:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8010950 <__ieee754_powf+0x57c>
 8010886:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 8010954 <__ieee754_powf+0x580>
 801088a:	ee17 3a10 	vmov	r3, s14
 801088e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8010892:	f023 030f 	bic.w	r3, r3, #15
 8010896:	ee07 3a10 	vmov	s14, r3
 801089a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801089e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80108a2:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80108a6:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8010958 <__ieee754_powf+0x584>
 80108aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80108ae:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80108b2:	eef0 6a67 	vmov.f32	s13, s15
 80108b6:	eee7 6a06 	vfma.f32	s13, s14, s12
 80108ba:	eef0 5a66 	vmov.f32	s11, s13
 80108be:	eee7 5a46 	vfms.f32	s11, s14, s12
 80108c2:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80108c6:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80108ca:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 801095c <__ieee754_powf+0x588>
 80108ce:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8010960 <__ieee754_powf+0x58c>
 80108d2:	eea7 6a25 	vfma.f32	s12, s14, s11
 80108d6:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8010964 <__ieee754_powf+0x590>
 80108da:	eee6 5a07 	vfma.f32	s11, s12, s14
 80108de:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8010968 <__ieee754_powf+0x594>
 80108e2:	eea5 6a87 	vfma.f32	s12, s11, s14
 80108e6:	eddf 5a21 	vldr	s11, [pc, #132]	@ 801096c <__ieee754_powf+0x598>
 80108ea:	eee6 5a07 	vfma.f32	s11, s12, s14
 80108ee:	eeb0 6a66 	vmov.f32	s12, s13
 80108f2:	eea5 6ac7 	vfms.f32	s12, s11, s14
 80108f6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80108fa:	ee66 5a86 	vmul.f32	s11, s13, s12
 80108fe:	ee36 6a47 	vsub.f32	s12, s12, s14
 8010902:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8010906:	ee85 7a86 	vdiv.f32	s14, s11, s12
 801090a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801090e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010912:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010916:	ee10 3a10 	vmov	r3, s0
 801091a:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801091e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010922:	da06      	bge.n	8010932 <__ieee754_powf+0x55e>
 8010924:	f000 f82e 	bl	8010984 <scalbnf>
 8010928:	ee20 0a08 	vmul.f32	s0, s0, s16
 801092c:	e56a      	b.n	8010404 <__ieee754_powf+0x30>
 801092e:	2000      	movs	r0, #0
 8010930:	e7a5      	b.n	801087e <__ieee754_powf+0x4aa>
 8010932:	ee00 3a10 	vmov	s0, r3
 8010936:	e7f7      	b.n	8010928 <__ieee754_powf+0x554>
 8010938:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801093c:	e562      	b.n	8010404 <__ieee754_powf+0x30>
 801093e:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8010970 <__ieee754_powf+0x59c>
 8010942:	e55f      	b.n	8010404 <__ieee754_powf+0x30>
 8010944:	eeb0 0a48 	vmov.f32	s0, s16
 8010948:	e55c      	b.n	8010404 <__ieee754_powf+0x30>
 801094a:	bf00      	nop
 801094c:	ff800000 	.word	0xff800000
 8010950:	3f317218 	.word	0x3f317218
 8010954:	3f317200 	.word	0x3f317200
 8010958:	35bfbe8c 	.word	0x35bfbe8c
 801095c:	b5ddea0e 	.word	0xb5ddea0e
 8010960:	3331bb4c 	.word	0x3331bb4c
 8010964:	388ab355 	.word	0x388ab355
 8010968:	bb360b61 	.word	0xbb360b61
 801096c:	3e2aaaab 	.word	0x3e2aaaab
 8010970:	00000000 	.word	0x00000000

08010974 <fabsf>:
 8010974:	ee10 3a10 	vmov	r3, s0
 8010978:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801097c:	ee00 3a10 	vmov	s0, r3
 8010980:	4770      	bx	lr
	...

08010984 <scalbnf>:
 8010984:	ee10 3a10 	vmov	r3, s0
 8010988:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801098c:	d02b      	beq.n	80109e6 <scalbnf+0x62>
 801098e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8010992:	d302      	bcc.n	801099a <scalbnf+0x16>
 8010994:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010998:	4770      	bx	lr
 801099a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801099e:	d123      	bne.n	80109e8 <scalbnf+0x64>
 80109a0:	4b24      	ldr	r3, [pc, #144]	@ (8010a34 <scalbnf+0xb0>)
 80109a2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8010a38 <scalbnf+0xb4>
 80109a6:	4298      	cmp	r0, r3
 80109a8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80109ac:	db17      	blt.n	80109de <scalbnf+0x5a>
 80109ae:	ee10 3a10 	vmov	r3, s0
 80109b2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80109b6:	3a19      	subs	r2, #25
 80109b8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80109bc:	4288      	cmp	r0, r1
 80109be:	dd15      	ble.n	80109ec <scalbnf+0x68>
 80109c0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8010a3c <scalbnf+0xb8>
 80109c4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8010a40 <scalbnf+0xbc>
 80109c8:	ee10 3a10 	vmov	r3, s0
 80109cc:	eeb0 7a67 	vmov.f32	s14, s15
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	bfb8      	it	lt
 80109d4:	eef0 7a66 	vmovlt.f32	s15, s13
 80109d8:	ee27 0a87 	vmul.f32	s0, s15, s14
 80109dc:	4770      	bx	lr
 80109de:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010a44 <scalbnf+0xc0>
 80109e2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80109e6:	4770      	bx	lr
 80109e8:	0dd2      	lsrs	r2, r2, #23
 80109ea:	e7e5      	b.n	80109b8 <scalbnf+0x34>
 80109ec:	4410      	add	r0, r2
 80109ee:	28fe      	cmp	r0, #254	@ 0xfe
 80109f0:	dce6      	bgt.n	80109c0 <scalbnf+0x3c>
 80109f2:	2800      	cmp	r0, #0
 80109f4:	dd06      	ble.n	8010a04 <scalbnf+0x80>
 80109f6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80109fa:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80109fe:	ee00 3a10 	vmov	s0, r3
 8010a02:	4770      	bx	lr
 8010a04:	f110 0f16 	cmn.w	r0, #22
 8010a08:	da09      	bge.n	8010a1e <scalbnf+0x9a>
 8010a0a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8010a44 <scalbnf+0xc0>
 8010a0e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8010a48 <scalbnf+0xc4>
 8010a12:	ee10 3a10 	vmov	r3, s0
 8010a16:	eeb0 7a67 	vmov.f32	s14, s15
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	e7d9      	b.n	80109d2 <scalbnf+0x4e>
 8010a1e:	3019      	adds	r0, #25
 8010a20:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010a24:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010a28:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8010a4c <scalbnf+0xc8>
 8010a2c:	ee07 3a90 	vmov	s15, r3
 8010a30:	e7d7      	b.n	80109e2 <scalbnf+0x5e>
 8010a32:	bf00      	nop
 8010a34:	ffff3cb0 	.word	0xffff3cb0
 8010a38:	4c000000 	.word	0x4c000000
 8010a3c:	7149f2ca 	.word	0x7149f2ca
 8010a40:	f149f2ca 	.word	0xf149f2ca
 8010a44:	0da24260 	.word	0x0da24260
 8010a48:	8da24260 	.word	0x8da24260
 8010a4c:	33000000 	.word	0x33000000

08010a50 <with_errnof>:
 8010a50:	b510      	push	{r4, lr}
 8010a52:	ed2d 8b02 	vpush	{d8}
 8010a56:	eeb0 8a40 	vmov.f32	s16, s0
 8010a5a:	4604      	mov	r4, r0
 8010a5c:	f7ff fb7e 	bl	801015c <__errno>
 8010a60:	eeb0 0a48 	vmov.f32	s0, s16
 8010a64:	ecbd 8b02 	vpop	{d8}
 8010a68:	6004      	str	r4, [r0, #0]
 8010a6a:	bd10      	pop	{r4, pc}

08010a6c <xflowf>:
 8010a6c:	b130      	cbz	r0, 8010a7c <xflowf+0x10>
 8010a6e:	eef1 7a40 	vneg.f32	s15, s0
 8010a72:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010a76:	2022      	movs	r0, #34	@ 0x22
 8010a78:	f7ff bfea 	b.w	8010a50 <with_errnof>
 8010a7c:	eef0 7a40 	vmov.f32	s15, s0
 8010a80:	e7f7      	b.n	8010a72 <xflowf+0x6>
	...

08010a84 <__math_uflowf>:
 8010a84:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010a8c <__math_uflowf+0x8>
 8010a88:	f7ff bff0 	b.w	8010a6c <xflowf>
 8010a8c:	10000000 	.word	0x10000000

08010a90 <__math_oflowf>:
 8010a90:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010a98 <__math_oflowf+0x8>
 8010a94:	f7ff bfea 	b.w	8010a6c <xflowf>
 8010a98:	70000000 	.word	0x70000000

08010a9c <__ieee754_sqrtf>:
 8010a9c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010aa0:	4770      	bx	lr
	...

08010aa4 <_init>:
 8010aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010aa6:	bf00      	nop
 8010aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010aaa:	bc08      	pop	{r3}
 8010aac:	469e      	mov	lr, r3
 8010aae:	4770      	bx	lr

08010ab0 <_fini>:
 8010ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ab2:	bf00      	nop
 8010ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ab6:	bc08      	pop	{r3}
 8010ab8:	469e      	mov	lr, r3
 8010aba:	4770      	bx	lr
